[{"categories":null,"content":"Avant de d√©velopper une nouvelle page, il vaut mieux r√©fl√©chir √† la disposition des diff√©rents √©l√©ments. Et tu vas voir, c‚Äôest un vrai travail d‚Äôarchitecte !","date":"30/01/2023","objectID":"/posts/tutos/my-first-app/6-scaffolding/","tags":["C# markup","Grid"],"title":"Les fondations","uri":"/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":" ‚Äé Pour assurer le bon d√©roulement de cet article, je t‚Äôinvite √† repartir du projet reprenant les diff√©rentes √©tapes appliqu√©es dans les articles pr√©c√©dents. Pour cela, t√©l√©charge le projet si ce n‚Äôest pas d√©j√† fait, et ouvre le projet NightClub situ√© dans le dossier ‚Äú2 - Navigation‚Äù. Avec ce nouveau chapitre, on entame une s√©rie d‚Äôarticles ax√©s autour du visuel de l‚Äôapp, et il y a de bonnes chances que cela te plaise ! En effet, d√©velopper une interface visuelle n√©cessite de nombreux tests du rendu √† l‚Äô√©cran, et il n‚Äôy a rien de mieux pour apprendre. Et c‚Äôest par la pratique r√©guli√®re que tu vas naturellement comprendre et retenir tout un tas de choses üôÇ Allez, on est partis pour mettre en place les fondations de la page principale ! ","date":"30/01/2023","objectID":"/posts/tutos/my-first-app/6-scaffolding/:0:0","tags":["C# markup","Grid"],"title":"Les fondations","uri":"/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":"Le design Mais avant tout d√©veloppement graphique, il vaut mieux r√©fl√©chir √† la disposition des diff√©rents √©l√©ments que l‚Äôon souhaite afficher. Justement, .NET MAUI fournit pour cela plusieurs solutions simples pour structurer nos pages. Et tu vas voir, c‚Äôest un vrai travail d‚Äôarchitecte ! ‚Äé üêí‚Äé ‚Äé Mais au fait, √† quoi doit ressembler notre page ? C‚Äôest une tr√®s bonne question ! En g√©n√©ral, quand imagine une nouvelle page pour notre application, il est conseill√© d‚Äôen √©laborer le design au crayon sur une feuille. En effet, comme les √©crans de t√©l√©phone sont assez petits, il n‚Äôest pas facile de disposer tous les √©l√©ments souhait√©s. Puis, quand on est satisfait du rendu sur papier, on pr√©pare alors une maquette sur ordinateur pour un rendu plus r√©aliste : √ßa facilite grandement l‚Äôint√©gration de la page dans l‚Äôapplication. Dans le cadre de notre cours, la page principale devra ressembler √† la maquette suivante : ","date":"30/01/2023","objectID":"/posts/tutos/my-first-app/6-scaffolding/:0:1","tags":["C# markup","Grid"],"title":"Les fondations","uri":"/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":"Structuration de la page Sur cette maquette, on remarque que les √©l√©ments sont dispos√©s de fa√ßon assez r√©guli√®re. On pourrait m√™me imaginer des lignes pour aligner les √©l√©ments les uns par rapport aux autres : Disposer les √©l√©ments suivant des lignes imaginaires est un exercice un peu sp√©cial au d√©but, mais cela devient une habitude avec le temps. Ces lignes te feront peut-√™tre penser √† une grille‚Ä¶ et si c‚Äôest le cas, bien vu ! C‚Äôest tout le principe du composant Grid, qui comme son nom l‚Äôindique, permet de disposer des √©l√©ments sur une grille. On va l‚Äôutiliser plusieurs fois pour cette page. ","date":"30/01/2023","objectID":"/posts/tutos/my-first-app/6-scaffolding/:0:2","tags":["C# markup","Grid"],"title":"Les fondations","uri":"/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":"Initiation au Grid Pour respecter la maquette, la premi√®re chose √† faire est de diviser la page en deux : La partie du haut qui n‚Äôaffiche rien d‚Äôautre qu‚Äôun fond noir, Et celle du bas pour contr√¥ler notre lecteur de musique. Tu remarqueras que la partie sup√©rieure est l√©g√®rement plus grande que la partie inf√©rieure. On pourrait m√™me dire que la partie noire s‚Äô√©tale verticalement sur 60% de la page, ce qui laisse 40% d‚Äôespace pour le reste. Ce sont des donn√©es tr√®s utiles ! Mettons-les en application pour d√©finir le contenu de notre page *MusicPlayerView *avec un Grid : Nom du fichier :MusicPlayerView.cs using CommunityToolkit.Maui.Markup; using static CommunityToolkit.Maui.Markup.GridRowsColumns; ... public MusicPlayerView() { ... Content = new Grid { RowDefinitions = Rows.Define( Stars(60), Stars(40)), RowSpacing = 0, Children = { TopLayout.Row(0), BottomLayout.Row(1), } }; } Avec le param√®tre RowDefinitions, on configure une grille de 2 lignes : la premi√®re pourra s‚Äô√©tendre jusqu‚Äô√† 60% de la page verticalement contre 40% pour la deuxi√®me, comme sur notre design ! A l‚Äôinitialisation du Grid, on d√©finit √©galement deux autres param√®tres : le RowSpacing d√©fini √† 0 pour ne laisser aucun espace entre les lignes de notre grille, et Children qui contiendra tous les √©l√©ments de notre grille, √† r√©partir sur deux lignes. Et si tu te demandes d‚Äôo√π sortent ces fameux TopLayout et BottomLayout, il s‚Äôagit de deux conteneurs d‚Äô√©l√©ments √† d√©finir en dehors du constructeur de la page. En effet, on utilise √† nouveau un Grid pour chacun de ces deux contr√¥les pour nous aider dans le placement des √©l√©ments restants. Le premier Grid (le TopLayout) correspond √† la partie sup√©rieure de notre page et a donc un fond noir. Quant √† l‚Äôautre Grid (le BottomLayout), on lui d√©finit un fond gris fonc√© pour repr√©senter la partie inf√©rieure. Copie le code suivant et colle-le dans la r√©gion d√©di√©e aux contr√¥les du fichier MusicPlayerView.cs: Nom du fichier :MusicPlayerView.cs #region Controls Grid TopLayout =\u003e new Grid { BackgroundColor = Colors.Black }; Grid BottomLayout =\u003e new Grid { BackgroundColor = Colors.DimGray }; #endregion ","date":"30/01/2023","objectID":"/posts/tutos/my-first-app/6-scaffolding/:0:3","tags":["C# markup","Grid"],"title":"Les fondations","uri":"/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":"Les fondations principales Concentrons-nous dans un premier temps sur le contenu du BottomLayout. En regardant d‚Äôun peu plus pr√®s le design, on remarque de nouvelles lignes, mais √©galement des colonnes. Plus exactement : on remarque 3 lignes de haut en bas, √† taille identique, et il y a 7 colonnes de gauche √† droite (2 petites, 3 grandes et 2 petites √† nouveau). En quadrillant la zone inf√©rieure de la page, on remarque que chaque √©l√©ment visuel a bien sa case attitr√©e. D√©finissons maintenant les lignes et colonnes qui composent notre BottomLayout de sorte √† respecter l‚Äôalignement des √©l√©ments visuels, comme sur la maquette : Nom du fichier :MusicPlayerView.cs Grid BottomLayout =\u003e new Grid { BackgroundColor = Colors.DimGray, RowDefinitions = Rows.Define( Stars(1), Stars(1), Stars(1)), RowSpacing = 0, ColumnDefinitions = Columns.Define( Stars(10), Stars(10), Stars(20), Stars(20), Stars(20), Stars(10), Stars(10)), ColumnSpacing = 0 }; Comme tu vois, le code ci-dessus propose un d√©coupage en 3 lignes de m√™me taille et 7 colonnes avec des tailles diff√©rentes. ‚Äé üêí‚Äé ‚Äé Euh‚Ä¶ alors si j‚Äôadditionne les tailles de chaque colonne, j‚Äôobtiens bien 100% ! Mais pour ce qui est des lignes, on a un probl√®me non ? Tr√®s bonne remarque ! En fait si je suis parti au d√©but avec un √©chelonnement des tailles sur 100%, c‚Äôest parce que c‚Äôest souvent plus facile √† comprendre. En r√©alit√©, quand tu √©cris‚Ä¶ Nom du fichier :MusicPlayerView.cs RowDefinitions = Rows.Define( Stars(60), Stars(40)) ‚Ä¶ l‚Äôapplication comprend que la premi√®re ligne aura un poids de 60 par rapport √† la deuxi√®me ligne, qui elle n‚Äôaura qu‚Äôun poids de 40. C‚Äôest une fa√ßon dynamique d‚Äôattribuer une hauteur √† nos lignes en fonction de la taille de l‚Äô√©cran, puisqu‚Äôelle change d‚Äôun mod√®le de t√©l√©phone √† un autre. Finalement, tu peux voir ce poids comme un coefficient multiplicateur. Par exemple, ce m√™me bout de code peut √™tre r√©√©crit de cette fa√ßon: Nom du fichier :MusicPlayerView.cs RowDefinitions = Rows.Define( Stars(1.5), // 1.5 x 40 = 60 Stars(1)) // 1 x 40 = 40 A toi de choisir ce qui te semble plus coh√©rent ! ","date":"30/01/2023","objectID":"/posts/tutos/my-first-app/6-scaffolding/:0:4","tags":["C# markup","Grid"],"title":"Les fondations","uri":"/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":"V√©rification du rendu √† l‚Äô√©cran Maintenant que notre quadrillage de la partie inf√©rieure est en place, v√©rifions si les param√®tres sont corrects. Avec une Grid configur√©e sur 3 lignes et 7 colonnes, √ßa fait beaucoup de cases √† valider ! Mais j‚Äôai une astuce pour tester rapidement si le d√©coupage est bien celui attendu ou s‚Äôil y a des ajustements √† faire. Pour cela, tu peux dessiner une forme g√©om√©trique dans chaque case du quadrillage, avec chacune sa propre couleur. Avec la BoxView, c‚Äôest tr√®s facile : Nom du fichier :MusicPlayerView.cs Grid BottomLayout =\u003e new Grid { ... Children = { new BoxView { Color = Color.FromArgb(\"#ffffff\") }.Row(0).Column(0), new BoxView { Color = Color.FromArgb(\"#d0d0d0\") }.Row(0).Column(1), new BoxView { Color = Color.FromArgb(\"#a2a3a3\") }.Row(0).Column(2), new BoxView { Color = Color.FromArgb(\"#777879\") }.Row(0).Column(3), new BoxView { Color = Color.FromArgb(\"#4e5051\") }.Row(0).Column(4), new BoxView { Color = Color.FromArgb(\"#292b2c\") }.Row(0).Column(5), new BoxView { Color = Color.FromArgb(\"#000405\") }.Row(0).Column(6), new BoxView { Color = Color.FromArgb(\"#f3f337\") }.Row(1).Column(0), new BoxView { Color = Color.FromArgb(\"#a2eb5b\") }.Row(1).Column(1), new BoxView { Color = Color.FromArgb(\"#4edb80\") }.Row(1).Column(2), new BoxView { Color = Color.FromArgb(\"#00c89f\") }.Row(1).Column(3), new BoxView { Color = Color.FromArgb(\"#00b1b1\") }.Row(1).Column(4), new BoxView { Color = Color.FromArgb(\"#0098b2\") }.Row(1).Column(5), new BoxView { Color = Color.FromArgb(\"#177ea2\") }.Row(1).Column(6), new BoxView { Color = Color.FromArgb(\"#bf7aef\") }.Row(2).Column(0), new BoxView { Color = Color.FromArgb(\"#ea6cd4\") }.Row(2).Column(1), new BoxView { Color = Color.FromArgb(\"#ff63b3\") }.Row(2).Column(2), new BoxView { Color = Color.FromArgb(\"#ff6590\") }.Row(2).Column(3), new BoxView { Color = Color.FromArgb(\"#ff716e\") }.Row(2).Column(4), new BoxView { Color = Color.FromArgb(\"#ff844e\") }.Row(2).Column(5), new BoxView { Color = Color.FromArgb(\"#f89832\") }.Row(2).Column(6), } }; Et si tu lances l‚Äôapplication, tu pourras alors confirmer avec certitude que notre emploi des Grid est effectivement correct : √áa fait un peu penser aux vieilles t√©l√©visions en couleur. Bon, il n‚Äôy a rien de fonctionnel pour l‚Äôutilisateur, mais maintenant que nos fondations sont pr√™tes, √ßa va grandement nous simplifier la vie ! On va enfin pouvoir s‚Äôamuser √† disposer tous les √©l√©ments de contr√¥le d√®s le prochain chapitre, en commen√ßant par la gestion du minutage. Plus d‚Äôarticles dans la m√™me s√©rie: Introduction Installer le projet Premi√®re ex√©cution du projet MVVM, la cl√© de la r√©ussite D‚Äôune page √† l‚Äôautre Les fondations ","date":"30/01/2023","objectID":"/posts/tutos/my-first-app/6-scaffolding/:0:5","tags":["C# markup","Grid"],"title":"Les fondations","uri":"/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":"On attaque d√©sormais la cr√©ation de la page principale de l‚Äôapplication. Mais qui dit nouvelle page dit aussi: permettre √† l‚Äôutilisateur de se rendre sur cette page ! Voyons donc comment impl√©menter la navigation d‚Äôune page √† une autre.","date":"23/01/2023","objectID":"/posts/tutos/my-first-app/5-how-to-navigate/","tags":["Navigation"],"title":"D‚Äôune page √† l‚Äôautre","uri":"/posts/tutos/my-first-app/5-how-to-navigate/"},{"categories":null,"content":" ‚Äé Pour assurer le bon d√©roulement de cet article, je t‚Äôinvite √† repartir du projet reprenant les diff√©rentes √©tapes appliqu√©es dans les articles pr√©c√©dents. Pour cela, t√©l√©charge le projet si ce n‚Äôest pas d√©j√† fait, et ouvre le projet NightClub situ√© dans le dossier ‚Äú1 - MVVM‚Äù. H√©, mais te revoil√† ! On en a maintenant fini avec le MVVM et crois-moi, tu viens de faire un grand pas en avant ! Aujourd‚Äôhui ce sera bien plus simple, on attaque la cr√©ation de la page principale de l‚Äôapplication. Mais qui dit nouvelle page dit aussi: permettre √† l‚Äôutilisateur de s‚Äôy rendre ! Voyons donc comment impl√©menter la navigation d‚Äôune page √† une autre. ","date":"23/01/2023","objectID":"/posts/tutos/my-first-app/5-how-to-navigate/:0:0","tags":["Navigation"],"title":"D‚Äôune page √† l‚Äôautre","uri":"/posts/tutos/my-first-app/5-how-to-navigate/"},{"categories":null,"content":"Naviguer vers une nouvelle page Commen√ßons d√©j√† par ajouter notre nouvelle page. Pour cela, fais un clic droit sur le dossier Views pour ajouter un nouveau fichier, puis choisis le template ‚Äú.NET MAUI ContentPage (C#)‚Äù comme ci-dessous. On va nommer ce fichier : MusicPlayerView.cs. Comme tu l‚Äôauras remarqu√©, le template utilis√© pour cr√©er la page nous fournit un contenu par d√©faut. Il n‚Äôy a donc plus qu‚Äô√† naviguer vers cette nouvelle page ! Pour cela, rends-toi dans le fichier HomeViewModel.cs et modifie la m√©thode Enter() de la fa√ßon suivante : Nom du fichier :HomeViewModel.cs using NightClub.Views; // Rappel: sans cette ligne, √ßa ne compilerait pas ! ... [RelayCommand] async Task Enter() { await Application.Current.MainPage.Navigation.PushAsync( new MusicPlayerView()); } Tout ce qu‚Äôon fait ici, c‚Äôest acc√©der au service de navigation fourni par l‚Äôapplication pour afficher une nouvelle page de type MusicPlayerView. En fait, lorsqu‚Äôon fait appel √† la m√©thode PushAsync(), on ajoute la page MusicPlayerView tout en haut de la pile de pages d√©j√† existantes, exactement comme sur le sch√©ma ci-dessous: Comme avec un paquet de cartes √† jouer, il n‚Äôy a que celle du dessus qui est visible. ‚Äé üêí‚Äé ‚Äé Ah! Et c‚Äôest tout, je peux tester alors ? On y est presque ! En effet pour que la navigation fonctionne, on a besoin que la premi√®re page affich√©e au d√©marrage soit englob√©e dans une NavigationPage. Si tu retournes dans le fichier App.cs, il y a justement une m√©thode OnStart() qui est automatiquement ex√©cut√©e √† chaque fois que l‚Äôapp est initialis√©e. Modifie donc cette m√©thode de sorte √† d√©finir HomeView comme la page racine de l‚Äôapplication, dans une NavigationPage: Nom du fichier :App.cs protected override void OnStart() { base.OnStart(); Console.WriteLine(\"[NightClub] App - OnStart\"); MainPage = new NavigationPage(new HomeView()); } Voil√† c‚Äôest bon, relance l‚Äôapplication et clique sur le bouton Enter ! ","date":"23/01/2023","objectID":"/posts/tutos/my-first-app/5-how-to-navigate/:0:1","tags":["Navigation"],"title":"D‚Äôune page √† l‚Äôautre","uri":"/posts/tutos/my-first-app/5-how-to-navigate/"},{"categories":null,"content":"Supprimer l‚Äôen-t√™te de navigation Comme tu l‚Äôauras s√ªrement compris, notre page d‚Äôaccueil est d√©sormais contenue dans une page sp√©cialement configur√©e pour la navigation. Elle contient donc par d√©faut une en-t√™te de navigation : D‚Äôun point de vue design, ce n‚Äôest pas n√©cessairement ce que l‚Äôon souhaite. Voyons donc rapidement comment supprimer cette en-t√™te pour la page d‚Äôaccueil. Rends-toi dans le fichier HomeView.cs et invoque la m√©thode SetHasNavigationBar() dans le constructeur de la page, comme ceci: Nom du fichier :HomeView.cs public HomeView() { ... BindingContext = new HomeViewModel(); NavigationPage.SetHasNavigationBar(this, false); BackgroundColor = Colors.Black; ... } Et maintenant, si tu relances l‚Äôapp, c‚Äôest quand m√™me plus joli ! L‚Äôapplication commence √† prendre forme tout doucement, et d‚Äôautant plus avec le prochain chapitre ! On se revoit tr√®s bient√¥t pour l‚Äô√©laboration de notre page principale. Plus d‚Äôarticles dans la m√™me s√©rie: Introduction Installer le projet Premi√®re ex√©cution du projet MVVM, la cl√© de la r√©ussite D‚Äôune page √† l‚Äôautre Les fondations ","date":"23/01/2023","objectID":"/posts/tutos/my-first-app/5-how-to-navigate/:0:2","tags":["Navigation"],"title":"D‚Äôune page √† l‚Äôautre","uri":"/posts/tutos/my-first-app/5-how-to-navigate/"},{"categories":null,"content":"Dans ce chapitre, nous d√©couvrirons un patron de conception majeur pour le d√©veloppement d‚Äôapplication mobile, le Model-View-ViewModel (MVVM) !","date":"12/01/2023","objectID":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM, la cl√© de la r√©ussite","uri":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":" ‚Äé Pour assurer le bon d√©roulement de cet article, je t‚Äôinvite √† repartir du projet reprenant les diff√©rentes √©tapes appliqu√©es dans les articles pr√©c√©dents. Pour cela, t√©l√©charge le projet si ce n‚Äôest pas d√©j√† fait, et ouvre le projet NightClub situ√© dans le dossier ‚Äú0 - Get Started‚Äù. Dans ce chapitre, nous d√©couvrirons un patron de conception majeur pour le d√©veloppement d‚Äôapplication mobile, le Model-View-ViewModel ! (plus couramment appel√© ‚Äúle MVVM‚Äù) ","date":"12/01/2023","objectID":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/:0:0","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM, la cl√© de la r√©ussite","uri":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":"Le Model-View-ViewModel Le MVVM est un patron de conception qui propose au d√©veloppeur une s√©paration logique de son code en 3 couches : La View, qui correspond √† l‚Äôinterface utilisateur, c‚Äôest-√†-dire tout ce que l‚Äôon va afficher √† l‚Äô√©cran (e.g. la page HomeView), Le Model, qui fait r√©f√©rence au type de donn√©es affich√©es dans cette View, Et enfin le ViewModel, qui fait le lien entre la View et le Model. Par exemple, pour r√©cup√©rer des donn√©es depuis le Cloud ou r√©pondre aux interactions de l‚Äôutilisateur. ‚Äé üêí‚Äé ‚Äé Je vois bien la s√©paration en effet, mais pourquoi est-ce recommand√© ? L‚Äôun des principaux avantages du MVVM est de pouvoir isoler la vue (i.e. l‚Äôinterface utilisateur) de la logique ‚Äúm√©tier‚Äù. Dans le cadre de notre premi√®re page, on obtient finalement deux fichiers : HomeView.cs qui d√©finit pr√©cis√©ment comment notre page s‚Äôaffichera (i.e. une couleur de fond, une image en haut, un bouton en bas), Et HomeViewModel.cs qui regroupe toute la logique pour faire fonctionner notre page (ici, le comportement du bouton quand l‚Äôutilisateur appuie dessus). En suivant ce principe, le d√©coupage de ton code est clair et tu limites le nombre de lignes de code par fichier. Tu ne voudrais pas d‚Äôun fichier de plus de 10 000 lignes ! üòÑ¬†En plus, il n‚Äôy a aucun risque d‚Äôaffecter la logique de ton app en changeant seulement la couleur d‚Äôun bouton. ‚Äé üêí‚Äé ‚Äé C‚Äôest clair ! Mais il y a un truc que je ne comprends pas, on n‚Äôa aucun Model pour la page HomeView ? Bonne remarque ! En effet, certaines pages sont tellement simples qu‚Äôelles ne n√©cessitent pas de Model. Dans ces cas-l√†, seuls les View et ViewModel seront donc requis. ","date":"12/01/2023","objectID":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/:0:1","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM, la cl√© de la r√©ussite","uri":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":"Le Data Binding On sait d√©sormais bien d√©couper notre code en plusieurs couches. Par exemple, d√©finir un bouton dans une View et d√©clarer son action dans un ViewModel. Mais est-ce que tu saurais dire comment elles vont fonctionner ensemble ? ‚Äé üêí‚Äé ‚Äé Hmm‚Ä¶ peut-√™tre dire au bouton de cette View d‚Äôagir selon ce qui a √©t√© d√©clar√© dans ce ViewModel ? En effet, c‚Äôest quasiment √ßa ! Cela se d√©roule en deux temps : On associe d‚Äôabord un ViewModel √† sa View (g√©n√©ralement via le BindingContext de la View), Puis on d√©finit le comportement de chaque √©l√©ment de la View dans le ViewModel, en recourant au principe du Data Binding. Le Data Binding est une technique permettant de lier deux objets de sorte que, lorsque l‚Äôun des deux est modifi√©, l‚Äôautre le sera √©galement. √áa peut para√Ætre un peu flou comme √ßa, mais tu comprendras mieux son r√¥le dans la section d‚Äôapr√®s. Pour le moment, on continue ! ","date":"12/01/2023","objectID":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/:0:2","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM, la cl√© de la r√©ussite","uri":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":"Appliquer le MVVM Maintenant que tu connais les bases du MVVM, je vais pouvoir t‚Äôapprendre √† l‚Äôappliquer concr√®tement dans l‚Äôapplication. Commen√ßons par cr√©er un fichier qui servira de ViewModel pour notre HomeView. Pour cela, cr√©e d‚Äôabord un nouveau dossier ViewModels dans le projet, puis ajoutes-y un nouveau fichier. Ce sera une nouvelle classe vide appel√©e HomeViewModel.cs : Ensuite, remplace son contenu par le suivant: Nom du fichier :HomeViewModel.cs using System; namespace NightClub.ViewModels; public class HomeViewModel { public HomeViewModel() { } async Task Enter() { await Application.Current.MainPage.DisplayAlert( \"Well Done !\", \"You have successfully reached the end of this chapter.\", \"Next !\"); } } Bon, il n‚Äôy a vraiment rien de sp√©cial ici. C‚Äôest juste une classe d‚Äôobjet C# avec une m√©thode Enter() qui affiche du texte √† l‚Äô√©cran apr√®s un clic de l‚Äôutilisateur sur le bouton ‚ÄúENTER‚Äù. ‚Äé üêí‚Äé ‚Äé Ah ben quand m√™me, on vient de d√©finir l‚Äôaction du bouton de la page d‚Äôaccueil ! Eh oui tu as raison, mais en l‚Äô√©tat, il reste inutilisable ! Heureusement, il existe une librairie mise √† disposition par Microsoft qui va grandement nous simplifier la vie: le MVVM Toolkit. Cette librairie a d√©j√† √©t√© ajout√©e au projet et tu peux le v√©rifier facilement en ouvrant la gestion des paquets NuGet. Fais donc un clic droit sur les d√©pendances du projet: Et voil√† la librairie en question ! Elle s‚Äôappelle CommunityToolkit.Mvvm : ‚Äé Aller plus loin avec les paquets NuGet Voyons d√©sormais comment pr√©parer notre classe HomeViewModel pour √™tre un v√©ritable ViewModel : Premi√®rement, fais-le h√©riter de la classe ObservableObject, puis, d√©finis-le comme une classe partielle avec le mot-cl√© partial. Tu devrais avoir la configuration suivante: Nom du fichier :HomeViewModel.cs using System; using CommunityToolkit.Mvvm.ComponentModel; namespace NightClub.ViewModels; public partial class HomeViewModel : ObservableObject ... ‚Äé En faisant h√©riter HomeViewModel de la classe ObservableObject, Visual Studio rajoute automatiquement les using n√©cessaires √† la compilation. En effet, une r√©f√©rence √† CommunityToolkit.Mvvm.ComponentModel est requise pour que ObservableObject devienne r√©ellement compr√©hensible par l‚Äôapplication. Ces deux √©tapes sont n√©cessaires pour permettre au MVVM Toolkit de g√©n√©rer du code source √† la simple mention de mots-cl√©s sp√©cifiques. Concr√®tement, on √©crit un seul mot et hop, √ßa g√©n√®re tout seul des dizaines de lignes de code, c‚Äôest g√©nial, non ?! ü§ò Par exemple ici, on va d√©finir notre m√©thode Enter() comme √©tant une commande en lui rajoutant un simple attribut [RelayCommand] , voil√† comment : Nom du fichier :HomeViewModel.cs [RelayCommand] async Task Enter() { await Application.Current.MainPage.DisplayAlert( \"Well Done !\", \"You have successfully reached the end of this chapter.\", \"Next !\"); } Avec seulement un mot, on a d√©sormais une commande Enter() qui supporte la technique du Data Binding ! Et ce uniquement gr√¢ce √† la librairie MVVM Toolkit qui s‚Äôoccupe de g√©n√©rer tout le code source n√©cessaire. ‚Äé Aller plus loin avec les g√©n√©rateurs de code source MVVM ","date":"12/01/2023","objectID":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/:0:3","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM, la cl√© de la r√©ussite","uri":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":"Bient√¥t la d√©mo ! On y est presque ! Il ne reste plus qu‚Äô√† actionner la commande Enter() au clic du bouton ‚ÄúENTER‚Äù. Tout d‚Äôabord, retourne dans le fichier HomeView.cs pour lier la vue au HomeViewModel via le **BindingContext **: Nom du fichier :HomeView.cs public HomeView() { BindingContext = new HomeViewModel(); BackgroundColor = Colors.Black; Content = ... } Puis d√©finissons l‚Äôaction du bouton EnterButton avec BindCommand pour d√©clencher la commande Enter() sp√©cifi√©e dans le HomeViewModel: Nom du fichier :HomeView.cs Button EnterButton =\u003e new Button { Text = \"ENTER\", TextColor = Colors.White, BackgroundColor = Colors.Magenta, CornerRadius = 10 } .Bold() .Paddings(50, 2, 50, 2) .CenterHorizontal() .BindCommand(\"EnterCommand\"); // Note: on doit ajouter \"Command\" apr√®s \"Enter\" Et voil√† le travail ! ‚Äé üêí‚Äé ‚Äé Ok donc si je comprends bien il faut faire √ßa √† peu pr√®s sur toutes les pages de l‚Äôapp, c‚Äôest pas si compliqu√© ! Eh bien oui en th√©orie ! Mais il manque tout de m√™me plusieurs fonctionnalit√©s cl√©s d‚Äôune application : un syst√®me d‚Äôauthentification, une base de donn√©es, etc‚Ä¶ Tiens par exemple, une fois qu‚Äôon aura cr√©√© la page principale de l‚Äôapplication, il faudra bien pouvoir s‚Äôy rendre depuis la page d‚Äôaccueil ! C‚Äôest ce qu‚Äôon verra dans le prochain chapitre. Plus d‚Äôarticles dans la m√™me s√©rie: Introduction Installer le projet Premi√®re ex√©cution du projet MVVM, la cl√© de la r√©ussite D‚Äôune page √† l‚Äôautre Les fondations ","date":"12/01/2023","objectID":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/:0:4","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM, la cl√© de la r√©ussite","uri":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":"Allez, il est temps de faire tourner l‚Äôapplication. On en profitera aussi pour jeter un ≈ìil au code source ! üôÇ","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/3-first-run-of-the-project/","tags":["Visual Studio","C# markup"],"title":"Premi√®re ex√©cution du projet","uri":"/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":" ‚Äé Pour assurer le bon d√©roulement de cet article, je t‚Äôinvite √† repartir du projet reprenant les diff√©rentes √©tapes appliqu√©es dans les articles pr√©c√©dents. Pour cela, t√©l√©charge le projet si ce n‚Äôest pas d√©j√† fait, et ouvre le projet NightClub situ√© dans le dossier ‚Äú0 - Get Started‚Äù. Allez, il est temps de faire tourner l‚Äôapplication. On en profitera aussi pour jeter un ≈ìil au code source ! üôÇ Mais pour que notre application puisse fonctionner, il nous reste deux points √† aborder : l‚Äôinitialisation de l‚Äôapp et surtout, g√©rer son √©tat d‚Äôex√©cution. ","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/3-first-run-of-the-project/:0:0","tags":["Visual Studio","C# markup"],"title":"Premi√®re ex√©cution du projet","uri":"/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"Initialisation de l‚Äôapp Pour chaque plateforme cibl√©e (iOS, Android, ‚Ä¶), chaque application .NET MAUI sera initialis√©e depuis un seul point d‚Äôentr√©e via la m√©thode CreateMauiApp() situ√©e dans le fichier MauiProgram.cs. C‚Äôest ici que l‚Äôon configurera tout ce dont a besoin l‚Äôapp pour fonctionner comme on le souhaite : les services Web, les d√©pendances externes, ou bien encore les polices de caract√®res sp√©cifiques. ","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/3-first-run-of-the-project/:0:1","tags":["Visual Studio","C# markup"],"title":"Premi√®re ex√©cution du projet","uri":"/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"Gestion de l‚Äô√©tat de l‚Äôapp Mais on aura aussi besoin de quoi d√©finir l‚Äô√©tat actuel de notre application (quelle page afficher, que faire si l‚Äôapplication est arr√™t√©e, ‚Ä¶). Et pour √ßa on a justement une classe Application d√©clar√©e dans le fichier App.cs. ","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/3-first-run-of-the-project/:0:2","tags":["Visual Studio","C# markup"],"title":"Premi√®re ex√©cution du projet","uri":"/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"Lancement de l‚Äôapp Allez, il est temps de faire tourner l‚Äôapplication ! Choisis donc la plateforme que tu souhaites cibler, puis clique sur le bouton encadr√© en rouge pour d√©marrer le projet: Dans un premier temps, tu verras ton projet √™tre compil√© avec la configuration choisie (c‚Äôest l‚Äô√©tape du build): Sous Visual Studio for Mac, le statut actuel du projet peut facilement √™tre consult√© en bas √† gauche de la fen√™tre. Puis tu verras ton application se d√©ployer automatiquement vers la plateforme choisie (ici, une simulation de l‚ÄôiPhone 13, iOS 15.5). Et voil√† le r√©sultat ! ‚Äé üêí‚Äé ‚Äé H√©√©√©√© mais il ne se passe rien quand je clique sur le bouton ! Ce n‚Äôest √©videmment que le d√©but de notre app, le plus gros reste √† faire ! ","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/3-first-run-of-the-project/:0:3","tags":["Visual Studio","C# markup"],"title":"Premi√®re ex√©cution du projet","uri":"/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"La page d‚Äôaccueil Ce que tu vois pour le moment, c‚Äôest la page d‚Äôaccueil dont le contenu est sp√©cifi√© dans le fichier HomeView.cs. Il s‚Äôagit l√† d‚Äôune ContentPage (litt√©ralement une page avec du contenu) qui est le type de page le plus courant. Et comme tu peux le voir, ce qu‚Äôelle d√©finit est tr√®s simple: Nom du fichier :HomeView.cs public HomeView() { BackgroundColor = Colors.Black; Content = new VerticalStackLayout { Children = { NightClubImage, EnterButton } }.CenterVertical(); } C‚Äôest une page avec un arri√®re-plan noir et dont le contenu est d√©fini par une image et un bouton qui sont empil√©s verticalement dans un VerticalStackLayout. Et si tu veux savoir comment sont d√©finis ces deux composants, il te suffit de regarder un peu plus bas dans le code de la page : Nom du fichier :HomeView.cs #region Controls Image NightClubImage =\u003e new Image { // .NET MAUI converts SVG files to PNG files. Source = \"night_club.png\" }; Button EnterButton =\u003e new Button { Text = \"ENTER\", TextColor = Colors.White, BackgroundColor = Colors.Magenta, CornerRadius = 10 } .Bold() .Paddings(50, 2, 50, 2) .CenterHorizontal(); #endregion Rien de tr√®s complexe √† ce stade: On d√©finit l‚Äôimage du composant NightClubImage via la propri√©t√© ‚ÄúSource‚Äù, Et pour le bouton, on d√©finit quelques propri√©t√©s de base comme le texte, la couleur, ‚Ä¶ mais tu aurais peut-√™tre remarqu√© qu‚Äôon applique des fonctions au composant EnterButton : Bold() pour mettre en gras le texte du bouton, Paddings() pour rajouter un peu d‚Äôespace autour du texte, notamment √† gauche et √† droite du texte, Et enfin, CenterHorizontal() pour positionner le texte au centre du bouton. ‚Äé Ces m√©thodes sont fournies par un type de programmation particuli√®re appel√©e ‚ÄúDeclarative UI‚Äù ou encore ‚ÄúFluent UI‚Äù. Gr√¢ce √† cela, la page est enti√®rement cod√©e en C#, comme pour le reste de l‚Äôapp ! ‚Äé üêí‚Äé ‚Äé D‚Äôaccord ! Et il ne faudrait pas lui d√©clarer une action √† ce bouton ? Tout juste ! Et on va voir comment d√©clencher l‚Äôex√©cution de code en cliquant sur ce bouton, mais pas n‚Äôimporte comment. En effet, nous allons appliquer ce merveilleux patron de conception qu‚Äôest le Model-View-ViewModel (MVVM). Plus d‚Äôarticles dans la m√™me s√©rie: Introduction Installer le projet Premi√®re ex√©cution du projet MVVM, la cl√© de la r√©ussite D‚Äôune page √† l‚Äôautre Les fondations ","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/3-first-run-of-the-project/:0:4","tags":["Visual Studio","C# markup"],"title":"Premi√®re ex√©cution du projet","uri":"/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"Aujourd'hui on attaque la cr√©ation de notre premi√®re application ! Juste le temps d'installer ton environnement de travail et on aura rapidement quelque chose de concret. Allez c'est parti !","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/2-setup-the-project/","tags":["Visual Studio","Setup","New Project"],"title":"Installer le projet","uri":"/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":" Tu vas bient√¥t pouvoir cr√©er ta premi√®re application mobile ! Juste le temps d‚Äôinstaller ton environnement de travail et on aura rapidement quelque chose de concret. Allez c‚Äôest parti ! ","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/2-setup-the-project/:0:0","tags":["Visual Studio","Setup","New Project"],"title":"Installer le projet","uri":"/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Quels outils pour d√©velopper ? Voyons d√©j√† les outils qui te permettront de d√©velopper ton appli. ‚Äé üêí‚Äé ‚Äé Mais au fait, il faut √™tre sous Windows, MacOS ou Linux ? En fait, il n‚Äôy a pas de pr√©-requis particulier pour d√©velopper une app avec .NET MAUI, √† moins que tu ne tra√Ænes un ordinateur de l‚Äôavant-guerre et que tu ne mettes rien √† jour‚Ä¶ ü§î Sinon, c‚Äôest surtout une question de pr√©f√©rence ! Personnellement, je d√©veloppe sous MacOS car c‚Äôest un syst√®me que j‚Äôaffectionne, et le simulateur d‚ÄôiPhone qui y est int√©gr√© est tr√®s performant et me permet d‚Äôavoir rapidement un rendu de ce que je programme. Mais tu peux tout aussi bien d√©velopper sous Windows ou Linux ! Plus concr√®tement : sous Windows ou MacOS, c‚Äôest facile, Microsoft propose un environnement de d√©veloppement int√©gr√© tr√®s performant: Visual Studio pour Windows, et Visual Studio for Mac pour‚Ä¶ eh bien pour MacOS üòÑ et si tu es sous Linux, il te faudra recourir √† un peu plus d‚Äôing√©niosit√© (et c‚Äôest bien pour cela que tu es sous Linux, n‚Äôest-ce pas ? üòõ). Dans ce cas-l√†, je te conseille d‚Äôutiliser l‚Äôexcellent √©diteur de code source Visual Studio Code. ‚Äé Dans le cadre de ce blog, je me concentrerais uniquement sur le d√©veloppement d‚Äôapplication mobile √† l‚Äôaide de Visual Studio. En effet, son utilisation est bien plus intuitive et c‚Äôest justement cela qui pla√Æt √† tout vrai n√©ophyte. ","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/2-setup-the-project/:0:1","tags":["Visual Studio","Setup","New Project"],"title":"Installer le projet","uri":"/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Installation de l‚Äôenvironnement Passons maintenant √† l‚Äôinstallation de l‚Äôenvironnement de travail: Dans un premier temps, t√©l√©charge Visual Studio depuis le site officiel de Microsoft, en choisissant la version appropri√©e √† ton syst√®me (Windows ou MacOS), Puis vient le moment d‚Äôinstaller Visual Studio et son environnement de d√©veloppement .NET MAUI. Pour am√©liorer la lecture de ce blog, je te propose de directement suivre les √©tapes d‚Äôinstallation sur le site officiel: suivre les √©tapes d‚Äôinstallation sous Windows suivre les √©tapes d‚Äôinstallation sous MacOS Enfin, t√©l√©charge le projet depuis GitHub. Pour cela, rends-toi sur le d√©p√¥t de code du blog, clique sur le bouton ‚ÄúCode‚Äù et t√©l√©charge le tout au format .ZIP ‚Äé Avant d‚Äôaller plus loin, si tu es sous MacOS, il te faudra t‚Äôassurer d‚Äôavoir t√©l√©charg√© la derni√®re version d‚ÄôXcode qui est requise pour le simulateur d‚ÄôiPhone. Son installation peut √™tre tr√®s longue, aussi, je te conseille de le faire en parall√®le de ta lecture. ","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/2-setup-the-project/:0:2","tags":["Visual Studio","Setup","New Project"],"title":"Installer le projet","uri":"/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Description du projet Une fois le fichier t√©l√©charg√© d√©compress√©, rends-toi dans le dossier des exemples associ√©s √† notre cours (Samples/NightClub). Les dossiers qui y sont entrepos√©s correspondent chacun √† une partie diff√©rente du cours: Pour le moment, ouvre le premier dossier (0 - Get Started) et double-clique sur NightClub.sln pour ouvrir le projet NightClub dans Visual Studio. La structure du projet NightClub apr√®s ouverture dans Visual Studio. ‚Äé üêí‚Äé ‚Äé Ok ! J‚Äôouvre le projet, √ßa charge‚Ä¶ Mais il y a d√©j√† plein de choses dans ce projet, on ne peut pas partir de z√©ro ? En fait, c‚Äôest d√©j√† le cas ! Le projet que tu as sous les yeux est tout neuf, mais il embarque plusieurs fichiers de base n√©cessaires au bon fonctionnement d‚Äôune application .NET MAUI: Toutes les librairies n√©cessaires au bon fonctionnement du projet sont regroup√©es dans le dossier Dependencies, Dans Platforms, tu retrouveras tous les fichiers n√©cessaires √† l‚Äôex√©cution de l‚Äôapplication, et ce pour chaque plateforme cible, Quant au dossier Properties, on y retrouve g√©n√©ralement des fichiers de configuration (il y en a d‚Äôailleurs une cr√©√©e par d√©faut pour Windows), Et puis, tu auras la possibilit√© pour chaque application de lui configurer une ic√¥ne et un √©cran de chargement ! Pour cela, on recourt g√©n√©ralement au dossier Resources pour stocker tous nos m√©dias (ic√¥nes, images, pistes audio et vid√©o, ‚Ä¶), Enfin, il faudra bien pouvoir afficher quelque chose √† l‚Äôouverture de l‚Äôapp ! Et pour √ßa, on a le dossier Views qui contient pour le moment notre premi√®re page, la fameuse page d‚Äôaccueil‚Ä¶ ‚Äé Aller plus loin avec la structure de base des projets Visual Studio Et voil√† c‚Äôest tout, et si on lan√ßait cette app ? üôÇ Plus d‚Äôarticles dans la m√™me s√©rie: Introduction Installer le projet Premi√®re ex√©cution du projet MVVM, la cl√© de la r√©ussite D‚Äôune page √† l‚Äôautre Les fondations ","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/2-setup-the-project/:0:3","tags":["Visual Studio","Setup","New Project"],"title":"Installer le projet","uri":"/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Salut les Dev‚Ä¢e‚Ä¢s ! ü§ì Moi c'est J-E et mon but avec ce blog est d‚Äôaider tout d√©veloppeur d√©butant √† se lancer dans son projet d‚Äôapplication mobile au travers de cours tr√®s simples. Pas de cours th√©oriques √† rallonge, ici tu vas vite t‚Äôamuser et produire des apps sympas ! Et je t‚Äôaccompagnerai du d√©veloppement jusqu‚Äô√† la mise en ligne de ton application sur les stores.","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/1-introduction/","tags":["New Project"],"title":"Introduction","uri":"/posts/tutos/my-first-app/1-introduction/"},{"categories":null,"content":" Salut les Dev‚Ä¢e‚Ä¢s ! ü§ì Moi c‚Äôest J-E, ou Jean-Emmanuel si tu pr√©f√®res, et je suis ravi de te savoir en train de me lire ! üòä En effet, j‚Äôavais √† c≈ìur de partager ma passion pour le d√©veloppement d‚Äôapplications mobiles cross-platforms, et tout particuli√®rement avec .NET MAUI (√† prononcer ‚Äúdote-net maoui‚Äù). Avec ce blog, je veux pouvoir aider tout d√©veloppeur d√©butant √† se lancer dans son projet d‚Äôapplication mobile au travers de cours tr√®s simples. Pas de cours th√©oriques √† rallonge, ici tu vas vite t‚Äôamuser et produire des apps sympas ! Et je t‚Äôaccompagnerai du d√©veloppement jusqu‚Äô√† la mise en ligne de ton application sur les stores. ‚Äé üêí‚Äé ‚Äé Mais au fait, c‚Äôest quoi .NET MAUI ? Tu peux m‚Äôen dire plus ? Il s‚Äôagit du framework maintenu par Microsoft pour d√©velopper des applications mobiles, mais pas que ! En fait, MAUI signifie : ‚ÄúMulti-platform App User Interface‚Äù, ce qui veut litt√©ralement dire ‚Äúapplication dot√©e d‚Äôune interface utilisateur et qui peut s‚Äôex√©cuter sur plusieurs plateformes‚Äù. .NET MAUI a √©t√© officiellement publi√© courant 2022 et se base sur l‚Äôexcellent framework Xamarin.Forms qui couvre iOS et Android uniquement. Et si tu n‚Äôen avais jamais entendu parler, pas de panique ! Moi-m√™me j‚Äôen ai appris l‚Äôexistence seulement fin 2019, et c‚Äôest gr√¢ce √† lui que j‚Äôai d√©ploy√© ma toute premi√®re application sur les stores: MyVanity. ‚Äé üêí‚Äé ‚Äé Et comment as-tu fait pour publier ta premi√®re application ? √áa t‚Äôa pris longtemps ? Et c‚Äôest l√† toute la magie de .NET MAUI, tu n‚Äôas qu‚Äô√† coder un seul programme pour qu‚Äôil fonctionne sur Android, iOS, macOS et Windows ! Et tout √ßa bien-s√ªr avec un seul langage de programmation. Et donc non, cela ne m‚Äôa pas pris tr√®s longtemps, mais cela d√©pendra surtout: de tes connaissances en d√©veloppement, de la complexit√© de ton application, et du temps que tu peux lui accorder. Dans mon cas, cela m‚Äôa pris exactement un an entre le moment o√π j‚Äôai imagin√© l‚Äôapplication et le jour o√π je l‚Äôai publi√©e sur les stores. ‚Äé üêí‚Äé ‚Äé D‚Äôaccord, alors qu‚Äôest-ce que je dois savoir avant de d√©buter mon application ? Tout d‚Äôabord bravo, tu as raison de te lancer ! Alors pour d√©marrer ton application, il te faudra : Trouver une id√©e, Concevoir la maquette, Comprendre le langage C#. Pour le premier point, c‚Äôest facile, tu l‚Äôas normalement d√©j√† fait pour arriver jusqu‚Äôici. üòõ Le deuxi√®me, c‚Äôest simplement pour avoir une id√©e pr√©cise de ce √† quoi ton application ressemblera, et pour √ßa, tu peux utiliser le tr√®s bon Adobe XD qui est gratuit ! Enfin pour finir, il te faudra conna√Ætre le langage C# pour programmer ton application, et pour cela je te propose le parcours d‚Äôapprentissage √©labor√© par Microsoft. Cela dit, si tu as d√©j√† cod√© dans ta vie, alors tu peux te lancer m√™me sans conna√Ætre le C# ! Tu apprendras tr√®s vite en voulant d√©velopper ton application. Pour ce premier cours, je te propose de d√©velopper une application pour lire des titres musicaux dans une ambiance ‚Äúbo√Æte de nuit‚Äù. üíÉüèæüï∫üèªü™© Tu feras s√ªrement quelques erreurs, mais se tromper est justement la meilleure fa√ßon d‚Äôapprendre, alors surtout: va jusqu‚Äôau bout de ton id√©e ! ‚Äé üêí‚Äé ‚Äé J‚Äôai l‚Äôid√©e en t√™te, mon design est pr√™t, et coder en C# ne me fait pas peur, on attaque ? Allez c‚Äôest parti, rendez-vous au prochain article ! Plus d‚Äôarticles dans la m√™me s√©rie: Introduction Installer le projet Premi√®re ex√©cution du projet MVVM, la cl√© de la r√©ussite D‚Äôune page √† l‚Äôautre Les fondations ","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/1-introduction/:0:0","tags":["New Project"],"title":"Introduction","uri":"/posts/tutos/my-first-app/1-introduction/"}]