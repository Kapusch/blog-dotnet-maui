[{"categories":null,"content":"Let's continue with the implementation of playhead control! The idea is to be able to move to a specific frame in the track.","date":"01/12/2023","objectID":"/en/posts/tutos/my-first-app/11-binding-playhead-control/","tags":["MVVM","Data Binding","MediaElement","Slider"],"title":"Control the playback position","uri":"/en/posts/tutos/my-first-app/11-binding-playhead-control/"},{"categories":null,"content":" ‚Äé To ease your read, please resume from this chapter where we have set up the MediaElement. In the previous article, we discovered the MediaElement for playing audio files, but with the help of our own controls. Remember the Sliders we set up? They‚Äôre cool, but they‚Äôre useless! üòÑ So today, we are going to implement the playhead control, to allow the user to move to a specific frame in the track. Adding a new ViewModel First of all, we need to set up a new ViewModel for the MusicPlayerView. To do this, add a new class named MusicPlayerViewModel to the ViewModels folder, and define it with the following code: Filename:MusicPlayerViewModel.cs using CommunityToolkit.Mvvm.ComponentModel; using CommunityToolkit.Mvvm.Input; namespace NightClub.ViewModels; public partial class MusicPlayerViewModel : ObservableObject { #region Properties #endregion public MusicPlayerViewModel() { } #region Commands #endregion } ‚Äé If figuring out this bit of code is difficult for you, then don‚Äôt get discouraged and take some time to read again the chapter on MVVM. Of course, this ViewModel doesn‚Äôt do anything at the moment, but it‚Äôs ready to be associated with its View. So open the file MusicPlayerView.cs and modify it as follows: Filename:MusicPlayerView.cs ... // This using is mandatory to resolve the definition of MusicPlayerViewModel using NightClub.ViewModels; namespace NightClub.Views; public class MusicPlayerView : ContentPage { public MusicPlayerView() { Console.WriteLine(\"[NightClub] MusicPlayerView - Constructor\"); // Here is where the association is happening BindingContext = new MusicPlayerViewModel(); NavigationPage.SetHasNavigationBar(this, false); BackgroundColor = Colors.DimGray; ... } ... } As with the HomeViewModel associated with the HomeView, here we have modified the MusicPlayerView‚Äôs BindingContext to associate it with the new MusicPlayerViewModel. Well, that was quick. Now let‚Äôs see how to actually move the pickup! Binding our components If you remember, in the chapter on timing display, we introduced 3 components: ElapsedTime, a Label for displaying elapsed playback time, TotalTime, also a Label but to display the total duration of the audio track, and finally the Slider TimeTracker, to control the track‚Äôs playback head. Goodbye dummy data! We are now going to bring these components to life with the help of Data Binding. And for this, we will use an initialization method, InitTimeTracker(): Filename:MusicPlayerView.cs #region Time Tracker // Find the region where to add the code below ... void InitTimeTracker() // And here is the init method { TimeTracker.Bind( Slider.ValueProperty, nameof(MusicPlayer.Position), source: MusicPlayer, convert: (TimeSpan currentPosition) =\u003e currentPosition.TotalSeconds); TimeTracker.Bind( Slider.MaximumProperty, nameof(MusicPlayer.Duration), source: MusicPlayer, convert: (TimeSpan duration) =\u003e duration.TotalSeconds); ElapsedTime.Bind( Label.TextProperty, nameof(MusicPlayer.Position), source: MusicPlayer, stringFormat: \"{0:mm\\\\:ss}\"); TotalTime.Bind( Label.TextProperty, nameof(MusicPlayer.Duration), source: MusicPlayer, stringFormat: \"{0:mm\\\\:ss}\"); } #endregion Yes, I know it‚Äôs a bit dense, but cheer up! It‚Äôs all explained below. To get started, we have modified the behaviour of the TimeTracker to associate two properties with it: the current position of the cursor on the Slider, and the maximum value of the cursor (when it‚Äôs all to the right). Let‚Äôs take a closer look at the MediaElement represented by our MusicPlayer component. It has exactly what we need: the real time position of the playback head (MusicPlayer.Position), to be associated with the cursor position on the Slider (TimeTracker.Value), and the total duration of the song (MusicPlayer.Duration), to be associated with the maximum value of the Slider (TimeTracker.Maximum). And now, if you remember, the Slider can only consider values of double type. This is why we need to convert the values obtained from MusicPlayer.Position and MusicPla","date":"01/12/2023","objectID":"/en/posts/tutos/my-first-app/11-binding-playhead-control/:0:0","tags":["MVVM","Data Binding","MediaElement","Slider"],"title":"Control the playback position","uri":"/en/posts/tutos/my-first-app/11-binding-playhead-control/"},{"categories":null,"content":"Brick after brick, our application is taking shape! But it's only visual for now... so let‚Äôs bring all those dummy controls to life!","date":"18/09/2023","objectID":"/en/posts/tutos/my-first-app/10-play-music/","tags":["MediaElement",".NET Community Toolkit","MVVM","Data Binding","ImageButton"],"title":"Play music","uri":"/en/posts/tutos/my-first-app/10-play-music/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied so far in this tutorial. To do so, refer to the project setup guide and resume from the sample located in the folder ‚Äú4 - All Media Controls‚Äù. Before starting this new chapter, I wanted to congratulate you on all the progress you‚Äôve made! Now that we‚Äôre well advanced on the visual side, we can develop the core of the application and make it a little more functional. And if there‚Äôs one feature to think about first, it‚Äôs playing music! The MediaElement In the mobile world, media handling is completely different from a system to another. Fortunately, Microsoft has made life easier for us with its Community Toolkit, which precisely offers the right thing for playing audio files from any platform: the MediaElement! According to the documentation, this component is supplied in a dedicated NuGet package. To install this dependency, open the NuGet package manager and search for the library named CommunityToolkit.Maui.MediaElement. Once you found it, add it to the project and accept all associated licenses: ‚Äé A ReadMe.txt file opens automatically in Visual Studio. It provides additional instructions that we will apply when using the MediaElement. Now that the library has been added to the project, one last step remains. The MediaElement component must be initialized at application startup in the MauiProgram.cs file. Open this file and modify the CreateMauiApp() method as follows: Filename:MauiProgram.cs public static MauiApp CreateMauiApp() { Console.WriteLine(\"[NightClub] MauiProgram - CreateMauiApp\"); var builder = MauiApp.CreateBuilder() .UseMauiCommunityToolkit() .UseMauiCommunityToolkitMarkup() // You must add the line below: .UseMauiCommunityToolkitMediaElement() .UseMauiApp\u003cApp\u003e(); return builder.Build(); } ‚Äé üêí‚Äé ‚Äé But what exactly is this UseMauiCommunityToolkitMediaElement() method doing? Good reflex! When manipulating new snippets of code, it‚Äôs always best to understand what happens behind. And in this case, the code is open-source and can be viewed here. Unsurprisingly, the sole purpose of the UseMauiCommunityToolkitMediaElement() method is to make the MediaElement available to our application. In a nutshell, this consists of specifying which classes implement its behavior, for each of the targeted platforms. ‚Äé For more information, please consult the documentation on custom controls. And now we can listen to music! Make some noise! Let‚Äôs now look at how to define an instance of the MediaElement in the MusicPlayerView. ‚Äé üêí‚Äé ‚Äé But shouldn‚Äôt we treat the MediaElement as a service and add it to the ViewModel? Excellent point! Indeed, in the chapter on MVVM, we presented the View as the layer corresponding to the user interface. So, logically, you might think that media playback only takes place in the ViewModel! But once you‚Äôve read the documentation, you‚Äôll see that the MediaElement provides the basic visual controls for manipulating media according to the target platform. And even though we won‚Äôt use them (since we‚Äôre creating our own controls), the MediaElement is indeed an element of the user interface! And to respect the MVVM breakdown, I prefer to define an instance of the MediaElement in the MusicPlayerView. ‚Äé It‚Äôs also possible to accomplish the same thing by placing the MediaElement in the ViewModel instead of the View, but this is likely to make your project maintenance more complex. Open the MusicPlayerView.cs file, then define a new MediaElement property in the controls area, and a method InitMusicPlayer() to initialize it: Filename:MusicPlayerView.cs #region Controls ... #region MusicPlayer // Why not another region! MediaElement MusicPlayer = new MediaElement(); void InitMusicPlayer() { MusicPlayer.ShouldAutoPlay = true; string trackURL = \"https://prod-1.storage.jamendo.com/?trackid=1890762\u0026format=mp31\u0026from=b5bSbOTAT1kXawaT8EV9IA%3D%3D%7CGcDX%2BeejT3P%2F0CfPwtSyYA%3D%3D\"; MusicPlayer.Source = MediaSource.FromUri(trackURL)","date":"18/09/2023","objectID":"/en/posts/tutos/my-first-app/10-play-music/:0:0","tags":["MediaElement",".NET Community Toolkit","MVVM","Data Binding","ImageButton"],"title":"Play music","uri":"/en/posts/tutos/my-first-app/10-play-music/"},{"categories":null,"content":"To validate new features in your application, it is best to test them in an isolated environment. This will prevent any risk of data loss from your users. In this document, you will learn how to set up different environments for your mobile application.","date":"08/06/2023","objectID":"/en/posts/tips/multi-environments-project-configuration/","tags":["Visual Studio","Setup"],"title":"Target multiple environments in .NET MAUI","uri":"/en/posts/tips/multi-environments-project-configuration/"},{"categories":null,"content":"Whether you‚Äôre developing mobile applications, software or websites, it‚Äôs common practice to set up multiple environments for a project. This makes it easy to test new features without risking the data of our users. In this article, I will show you how a .NET MAUI application can target different environments through multiple project configurations. ‚Äé To simplify the reading of this article, we will only focus on iOS \u0026 Android. However, the process is similar for other platforms. Identify all the configurations required for the project First, you need to determine how many different configurations you need based on the number of environments created for your project. However, if you are just starting your project, you may only have one development environment. So here are a few ideas for you: Are you the only one developing this application? Are there any testers in your team? Is your project subject to security or performance criteria? Do you have to present it to the client before its publication? ‚Äé By default, it is important to isolate the production environment from your development environment. For our demonstration, we will refer to the following 3 environments: a ‚ÄúDEV‚Äù configuration for working in a completely isolated manner on one‚Äôs own machine (i.e. ‚Äúlocally‚Äù) and not impacting the activity from other developers in your team, a ‚ÄúTEST‚Äù configuration to validate all developments before publication, and a ‚ÄúPROD‚Äù configuration that represents the final state of the app, once available on the app stores. Alright, it‚Äôs time to get practical! In the next section, we will create these 3 configurations to run our mobile application in 3 distinct environments. ‚Äé I invite you to skip the following part if you have already defined all the necessary configurations for your project in Visual Studio. Create all project configurations in Visual Studio Now that we‚Äôve identified all the targeted environments, let‚Äôs see how to create the different configurations for our application. Start by opening the project configuration file in Visual Studio. How to access the project configuration file? You can access the configuration file by right-clicking on the project in Visual Studio. The project configuration file ends with the extension .csproj and can be edited by any text editor (e.g. Visual Studio Code). It can be found via the file explorer at the root of the project. Once the .csproj file is open, add the following code to the end of the file: Filename:MultiEnvMauiApp.csproj \u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e ... \u003cPropertyGroup\u003e \u003cConfigurations\u003eDEV;TEST;PROD\u003c/Configurations\u003e \u003c/PropertyGroup\u003e \u003c/Project\u003e We‚Äôve just added a parameter which, as its name suggests, defines the 3 new possible project configurations: ‚ÄúDEV‚Äù, ‚ÄúTEST‚Äù and ‚ÄúPROD‚Äù. We can now customize the project configuration for each of the targeted environments. To do this, add the following code to the end of the .csproj file: Filename:MultiEnvMauiApp.csproj \u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e ... \u003cPropertyGroup Condition=\" '$(Configuration)' == 'DEV' \"\u003e \u003c/PropertyGroup\u003e \u003cPropertyGroup Condition=\" '$(Configuration)' == 'TEST' \"\u003e \u003c/PropertyGroup\u003e \u003cPropertyGroup Condition=\" '$(Configuration)' == 'PROD' \"\u003e \u003c/PropertyGroup\u003e \u003c/Project\u003e As you may have noticed, we‚Äôve added a runtime condition to each of these new property groups. This way, Visual Studio is able to apply the right configuration according to the targeted environment. Let‚Äôs take a look at the content itself (to be adapted to your needs): Filename:MultiEnvMauiApp.csproj \u003cPropertyGroup Condition=\" '$(Configuration)' == 'DEV' \"\u003e \u003cDebugSymbols\u003etrue\u003c/DebugSymbols\u003e \u003cOptimize\u003efalse\u003c/Optimize\u003e \u003cMtouchDebug\u003etrue\u003c/MtouchDebug\u003e \u003c/PropertyGroup\u003e \u003cPropertyGroup Condition=\" '$(Configuration)' == 'TEST' \"\u003e \u003cDebugSymbols\u003efalse\u003c/DebugSymbols\u003e \u003cOptimize\u003etrue\u003c/Optimize\u003e \u003c/PropertyGroup\u003e \u003cPropertyGroup Condition=\" '$(Configuration)' == 'PROD' \"\u003e \u003cDebugSymbols\u003efalse\u003c/DebugSymbols\u003e \u003cOptimize\u003etrue\u003c/Optimize\u003e \u003c/PropertyGroup\u003e In our case, we w","date":"08/06/2023","objectID":"/en/posts/tips/multi-environments-project-configuration/:0:0","tags":["Visual Studio","Setup"],"title":"Target multiple environments in .NET MAUI","uri":"/en/posts/tips/multi-environments-project-configuration/"},{"categories":null,"content":"Since the official release of .NET MAUI, it is not possible to create a new project where Visual Studio does not add a default Shell. Fortunately, there is a very simple way to get rid of it!","date":"10/04/2023","objectID":"/en/posts/tips/maui-app-with-no-shell/","tags":["New Project","Visual Studio","Shell"],"title":"Create a .NET MAUI App without Shell","uri":"/en/posts/tips/maui-app-with-no-shell/"},{"categories":null,"content":"Since the official release of .NET MAUI, it is not possible to create a new project where Visual Studio does not add a default Shell. Fortunately, there is a very simple way to get rid of it! ","date":"10/04/2023","objectID":"/en/posts/tips/maui-app-with-no-shell/:0:0","tags":["New Project","Visual Studio","Shell"],"title":"Create a .NET MAUI App without Shell","uri":"/en/posts/tips/maui-app-with-no-shell/"},{"categories":null,"content":"Shell or not Shell? It‚Äôs up to you! When creating a new app in .NET MAUI, Visual Studio does not offer many configuration options: Of course, there is .NET MAUI Blazor, but it is a completely different framework. But every new .NET MAUI application created with Visual Studio comes with a Shell by default. And while the Shell can reduce the complexity to develop an application, it is also a tool that any beginner must learn to master in additional to the rest. Here is a small comparative table of the pros and cons of the Shell: Pros Cons Brings a standard application structure with a side menu or tabs, as well as a navigation system with URLs. A bit complex at first for a beginner, may slow down the opening of the app, and is not necessary for basic cases. Finally, the use of Shell in a .NET MAUI project remains a personal choice and should not be enforced by Visual Studio. But then, how would you get an app without a Shell, like in the tuto My First App? Let‚Äôs have a look, it‚Äôs very simple. ","date":"10/04/2023","objectID":"/en/posts/tips/maui-app-with-no-shell/:0:1","tags":["New Project","Visual Studio","Shell"],"title":"Create a .NET MAUI App without Shell","uri":"/en/posts/tips/maui-app-with-no-shell/"},{"categories":null,"content":"Go without Shell First of all, you need a .NET MAUI project. You can create a new one with Visual Studio, or reuse an existing project. Once your project is open in Visual Studio, delete the AppShell class by deleting the two files AppShell.xaml and AppShell.xaml.cs. Select both files at once, then right click and delete them. Visual Studio will probably ask you for a confirmation. Check that the selected files are the right ones and confirm the deletion: Never safe from mishandling! That‚Äôs it! All that remains is reconfiguring the application‚Äôs start page. To do this, open the App.xaml.cs file and identify the following line of code in the class constructor: Filename:App.xaml.cs MainPage = new AppShell(); Now that AppShell class does not refer to anything, it must be replaced. You just have to replace it by the class associated with the page that appears first when opening the app! For example, for all new projects, this will result into: Filename:App.xaml.cs MainPage = new MainPage(); Now, when the application is opened, the MainPage will be loaded first. There you go, you don‚Äôt have to develop your application around a Shell anymore! Now, what if you learn how to navigate from page to page without Shell? ","date":"10/04/2023","objectID":"/en/posts/tips/maui-app-with-no-shell/:0:2","tags":["New Project","Visual Studio","Shell"],"title":"Create a .NET MAUI App without Shell","uri":"/en/posts/tips/maui-app-with-no-shell/"},{"categories":null,"content":"We are almost done with the first big implementation phase of our main page. We'll now move on to the volume control!","date":"20/03/2023","objectID":"/en/posts/tutos/my-first-app/9-volume-tracker/","tags":["Image","ImageButton","DataTrigger","Slider","MultiTrigger",".NET Community Toolkit","C# markup"],"title":"Volume display","uri":"/en/posts/tutos/my-first-app/9-volume-tracker/"},{"categories":null,"content":" ‚Äé To ease your read, please resume from this chapter where we started setting up the music player controls. In the last chapter, we worked on setting up the media playback controls. We discovered in particular a new type of button: the ImageButton component. Today we‚Äôre going to further develop our user interface with the integration of volume controls. This is the final stretch before we start implementing the core of our music player, so hang on! The art of reproduction Let‚Äôs go back to the mock-up, here is what we will have to reproduce in the app: It should be quick this time, there are only two controls! As you can see, it‚Äôs nothing more than a mute button and a volume control bar. It shouldn‚Äôt take long, just start by downloading the different images used to display the volume status. Volume_Tracker_-_Images.zip ./files/Volume_Tracker_-_Images.zip After you unzipped this file, you will see 4 new images: Here, we have an image for each volume level: when it is very loud, medium or very low. Moreover, there is even one for when the sound will be muted. Now that you have the images, all you have to do is including them in the Resources/Images folder, just like last time! ‚Äé In case of any doubts, you can refer to the previous chapter . On your marks, get set! Code! All set? Let‚Äôs go to the code! For this, we need an ImageButton to mute the sound and a Slider to control the sound volume precisely. ‚Äé üêí‚Äé ‚Äé Ah, but I already know those ones! That‚Äôs right! Technically, it‚Äôs all d√©j√† vu, so try to reproduce these controls yourself before looking at the following code: Filename:MusicPlayerView.cs ImageButton MuteButton = new ImageButton { HeightRequest = 25, WidthRequest = 25, Source = \"volume_medium.png\" }; Slider VolumeTracker = new Slider { Minimum = 0, MinimumTrackColor = Colors.Black, Maximum = 100, MaximumTrackColor = Colors.Gray, Value = 60 }; So we have defined an ImageButton with a default image, and a Slider to control the volume from 0% to 100%. As you may have noticed, the Slider is composed of a black bar representing the current volume, and a gray bar for the upper volume available. Now, all you have to do is adding the controls to the BottomLayout: Filename:MusicPlayerView.cs MuteButton.Row(2).Column(1), VolumeTracker.Row(2).Column(2).ColumnSpan(3), So, did you remember to apply a ColumnSpan? üòõ We need it to display the volume bar across three columns in our Grid. Come on, it‚Äôs time to relaunch the app! Let‚Äôs see what it looks like: The way it looks now, it almost seems like the mobile app is complete‚Ä¶ # Switching images when the sound is muted It's getting easier with all this training, are you starting to get the hang of it? üôÇ Well, this time there were only two components to define, so we‚Äôll go a little further. Remember the different images we have for our volume? It‚Äôs time make use for them! The idea is that our MuteButton changes its appearance according to the requested volume level. We will therefore have a direct reference to the VolumeTracker in order to find the right image to associate with the MuteButton. To do this, we will use a DataTrigger which allows us to modify the property of an object when a target value is detected. Let‚Äôs take the simplest case where the detected volume is 0 : Filename:MusicPlayerView.cs DataTrigger VolumeOffTrigger =\u003e new DataTrigger(typeof(ImageButton)) { Binding = new Binding(nameof(Slider.Value), source: VolumeTracker), Value = 0d, Setters = { new Setter { Property = ImageButton.SourceProperty, Value = \"volume_off.png\" } } }; First of all, we specify the type of object to which we want to apply the changes. In our case, it will be an ImageButton since we want to change the image of the MuteButton: Filename:MusicPlayerView.cs DataTrigger VolumeOffTrigger =\u003e new DataTrigger(typeof(ImageButton)) Then, with the help of a Setter, we ask the VolumeOffTrigger to change the image source of the MuteButton with the corresponding icon for the volume being turned off: Filename:MusicPl","date":"20/03/2023","objectID":"/en/posts/tutos/my-first-app/9-volume-tracker/:0:0","tags":["Image","ImageButton","DataTrigger","Slider","MultiTrigger",".NET Community Toolkit","C# markup"],"title":"Volume display","uri":"/en/posts/tutos/my-first-app/9-volume-tracker/"},{"categories":null,"content":"More and more buttons! In this chapter, we will integrate the controls for manipulating the media.","date":"27/02/2023","objectID":"/en/posts/tutos/my-first-app/8-media-control/","tags":["Image","ImageButton","Visual Studio","Round Button","ColumnSpan"],"title":"Media playback controls","uri":"/en/posts/tutos/my-first-app/8-media-control/"},{"categories":null,"content":" ‚Äé To ease your read, please resume from this chapter where we started setting up the music player controls. In the last chapter, we worked on setting up the first visual elements of the music player. Two components were discovered: the Label and the Slider. Today, we‚Äôre going to continue our good work and reproduce a whole series of buttons to control the media. War of the Buttons To listen to music, our user needs key functions like: play a song, skip to the next track, etc. If you remember about the mock-up, we had a main row of 5 buttons: 5 buttons well aligned in the same row, but they are not all the same size. The difference with the ‚ÄúENTER‚Äù button on the home page is that here, our 5 buttons represent a clickable image. To reproduce them in the app, we will use the ImageButton component. But first, you will need to add these images to the project. So start by downloading them to your computer: Media_Control_-_Images.zip ./files/Media_Control_-_Images.zip Then unzip the downloaded file. You should have the following 6 images: ‚Äé üêí‚Äé ‚Äé 6 images‚Ä¶ but didn‚Äôt we say 5 buttons? Indeed, there will be 5 buttons on this row. But nothing prevents us from replacing the image of the button by another one! Going back to the mock-up, there will be from left to right : a button to replay the track (only once) ‚áí it‚Äôs the image repeat_once.png another to return to the previous song ‚áí skip_previous.png there will also be a big central button to play or pause the music. The image of this button will automatically change accordingly to the following cases: either the track is not playing ‚áí it will be the image play.png or it is already being played ‚áí then pause.png will be displayed then we will have a button to go to the next song ‚áí skip_next.png and a last one to download the song ‚áí download.png Yes I know, this last function ‚Äúdownload‚Äù was not planned in the program! It was originally supposed to be for shuffle playback, but I changed my mind. üòÑ So it‚Äôs important to make the mock-up as reliable as possible! Add images to the project Now that you have downloaded all the images, you need to import them into the project so that they can be used by the application. To do this, open the project in Visual Studio and right click on the Images folder: Remember, the Resources folder is where we store all the media (icons, images, audio and video tracks, ...) In the pop-up menu that appears, in the Add section, click on the option to add files from a folder: Then, select the folder where you have unzipped the 6 images and validate your choice. A window will appear for you to choose the files to be included in the project. In our case, we want to import all the images in the folder. So select all the available files and click on OK : ‚Äé Visual Studio may ask you which strategy to use to import the files into the Resources/Images folder. I suggest you choose to copy them, or move them. That‚Äôs it, make sure that you have the 6 new images imported into the folder! Discovering ImageButton Now that the images are ready to use, let‚Äôs get to the code! Let‚Äôs first define the two smallest buttons (those at the ends): Filename:MusicPlayerView.cs ImageButton RepeatOnceButton =\u003e new ImageButton { CornerRadius = 5, HeightRequest = 25, WidthRequest = 25, Source = \"repeat_once.png\", BackgroundColor = Colors.Black }; ImageButton DownloadButton =\u003e new ImageButton { CornerRadius = 5, HeightRequest = 25, WidthRequest = 25, Source = \"download.png\", BackgroundColor = Colors.Black }; As you can see, they were given a small square size (25 high by 25 wide), with a black background and slightly rounded corners (via the CornerRadius property). Then they each had their own image assigned via the Source property, with the corresponding file name. ‚Äé If you don‚Äôt plan to target Windows platform, then it is not mandatory to specify the \".png\" extension in the filename. All that remains is defining the 3 buttons to control the playback of the song, always using the ImageButton : ","date":"27/02/2023","objectID":"/en/posts/tutos/my-first-app/8-media-control/:0:0","tags":["Image","ImageButton","Visual Studio","Round Button","ColumnSpan"],"title":"Media playback controls","uri":"/en/posts/tutos/my-first-app/8-media-control/"},{"categories":null,"content":"Now that the foundations of the main page are ready, we can start laying out all the controls. Let's start with the timing!","date":"06/02/2023","objectID":"/en/posts/tutos/my-first-app/7-time-tracker/","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Timing display","uri":"/en/posts/tutos/my-first-app/7-time-tracker/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied so far in this tutorial. To do so, refer to the project setup guide and resume from the sample located in the folder ‚Äú3 - Page Scaffolding‚Äù. In the previous article, we set up a matrix to display all the controls of our music player. So we can now add concrete elements for the user! Timing display Let‚Äôs start with the part dedicated to the timing of the song. According to the mock-up, we will have a text on the left for the current listening time, and on the right, for the total duration of the track: The application shows that the song has been playing for 36 seconds and is 2 minutes and 57 seconds long. To reproduce it in the application, we will use the Label component which allows to display some text on the screen: Filename:MusicPlayerView.cs Label ElapsedTime =\u003e new Label { FontSize = 14, Text = \"0:36\", TextColor = Colors.White }.TextCenter(); Label TotalTime =\u003e new Label { FontSize = 14, Text = \"2:57\", TextColor = Colors.White }.TextCenter(); These two new elements are set to display static text in white and with a relatively small font size. However, the font size will automatically be adjusted to the level of text enlargement set by the user in the phone‚Äôs accessibility settings. ‚Äé Going further with accessibility for mobile applications. Adjusting the playback head The middle element has two functions: displaying and controlling the playback position in the song. Indeed, the user can move forward or backward in the song by sliding his finger horizontally. In addition, this component has a pink part that represents the elapsed time, and a black part for the remaining time. To reproduce this navigation bar, we will use the Slider component: Filename:MusicPlayerView.cs Slider TimeTracker =\u003e new Slider { Minimum = 0, MinimumTrackColor = Colors.LightSalmon, Maximum = 100, MaximumTrackColor = Colors.Black, Value = 20 }; A Slider is a control with a cursor that allows the user to select a specific value from a range of possible values. In our case, it‚Äôs like having a ruler which is graduated from 0 to 100 with a cursor positioned on 20. ‚Äé üêí‚Äé ‚Äé Oh yes, I see, we are actually at 20% of the song! So we will have a pink bar from 0 to 20, and a black bar from 20 to 100. That‚Äôs it! Well, actually here, all the configuration values are static, but the final idea is allowing the user to advance or rewind the track to the nearest second. Now, we‚Äôre done with the first row of elements of the music player. To check that the display is correct, I would like you delete all the child elements of the BottomLayout before assigning all the components that we have defined in this chapter. To do this, you may be tempted to write something like : Filename:MusicPlayerView.cs Grid BottomLayout =\u003e new Grid { ... Children = { ElapsedTime.Row(0).Column(1), TimeTracker.Row(0).Column(2), TotalTime.Row(0).Column(5) } }; At first glance, it looks pretty good! However, if you start the application, you will notice that there is a slight problem with the display: Positioned this way, the Slider does not look good. Don‚Äôt panic! We will see right away how to readjust it. Better use of the Grid If you remember, we initially divided the BottomLayout into 7 columns. However, even if our Slider is well positioned from box n¬∞3 of the first row, it does not clearly say where to stop! We could then simply tell the Slider to spread out over the next columns, like this: The Slider overlaps with boxes n¬∞3, n¬∞4 and n¬∞5. To do this, we use the ColumnSpan() method to ask the Slider to expand up to 3 columns from the cell n¬∞3: Filename:MusicPlayerView.cs TimeTracker.Row(0).Column(2).ColumnSpan(3) Now we‚Äôre really done! Let‚Äôs run the application again to see what it looks like: Well, that‚Äôs true, it‚Äôs nice but it doesn‚Äôt do much! But we‚Äôll finish the visual part first before moving on to a more functional part of the application. Besides, we still have a lot of buttons to put i","date":"06/02/2023","objectID":"/en/posts/tutos/my-first-app/7-time-tracker/:0:0","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Timing display","uri":"/en/posts/tutos/my-first-app/7-time-tracker/"},{"categories":null,"content":"Before developing a new page, it is best to think about the layout of the various elements. And you'll see, it's a real architect's job!","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-scaffolding/","tags":["C# markup","Grid"],"title":"Scaffolding","uri":"/en/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied so far in this tutorial. To do so, refer to the project setup guide and resume from the sample located in the folder named ‚Äú2 - Navigation‚Äù. With this new chapter, we begin a series of articles focused on the visual aspect of the app, and there is a good chance that you will like it! Indeed, developing a visual interface requires numerous tests of the rendering on the screen, and there is nothing better for learning. And it‚Äôs through regular practice that you‚Äôll naturally understand and retain a lot of things üôÇ Now it‚Äôs time to set up the foundations of the main page! The design But before any visual development, it is best to think about the layout of the various elements that we want to display. Precisely, .NET MAUI provides several simple solutions for structuring our pages. And you‚Äôll see, it‚Äôs a real architect‚Äôs job! ‚Äé üêí‚Äé ‚Äé But what should our page actually look like? This is a very good question! In general, when imagining a new page for our application, it is recommended to work out the design with a pencil on a paper. Because phone screens are quite small, it is not easy to arrange all the desired elements. Then, when we are satisfied with the rendering on paper, we prepare a digital mock-up for a more realistic rendering: this greatly facilitates the integration of the page into the application. For our course, the main page should look like the following layout: Structuring the page On this model, you can see the elements are arranged in a fairly regular way. One could even imagine lines to relatively align the elements on each other: Arranging the elements along imaginary lines is a bit special at first, but it becomes a habit over time. These lines might make you think of a grid‚Ä¶ and if so, good for you! This is the whole principle of the Grid component, which as its name indicates, allows you to arrange elements on a grid. We will use it several times for this page. Introduction to the Grid To comply with the layout, the first thing to do is dividing the page in two: The top part which displays nothing but a black background, and the bottom part to control our music player. You will notice that the top part is slightly larger than the bottom part. You could even say that the black part spreads vertically over 60% of the page, leaving 40% of the page for the rest. This is very useful to know! Let‚Äôs apply these values to define the content of our MusicPlayerView page with a Grid : Filename:MusicPlayerView.cs using CommunityToolkit.Maui.Markup; using static CommunityToolkit.Maui.Markup.GridRowsColumns; ... public MusicPlayerView() { ... Content = new Grid { RowDefinitions = Rows.Define( Stars(60), Stars(40)), RowSpacing = 0, Children = { TopLayout.Row(0), BottomLayout.Row(1), } }; } With the RowDefinitions parameter, we configure a grid of 2 lines: the first one will be able to extend up to 60% of the page vertically against 40% for the second one, as per design! When initializing the Grid, we also define two other parameters: the RowSpacing set to 0 for having no space between the lines of our grid, and Children which will contain all the elements of our grid, to be distributed over two lines. And if you wonder where these TopLayout and BottomLayout come from, they‚Äôre actually two element containers to define outside the page constructor. Indeed, we again use a Grid for each of these two controls to help us with positioning the remaining elements. The first Grid (the TopLayout) corresponds to the top part of our page and therefore has a black background. As for the other Grid (the BottomLayout), we define a dark grey background to represent the lower part. Copy the following code and paste it into the region dedicated to controls in the file MusicPlayerView.cs: Filename:MusicPlayerView.cs #region Controls Grid TopLayout =\u003e new Grid { BackgroundColor = Colors.Black }; Grid BottomLayout =\u003e new Grid { BackgroundColor = Colors","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-scaffolding/:0:0","tags":["C# markup","Grid"],"title":"Scaffolding","uri":"/en/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":"We are now starting to create the main page of the application. But new page also means, enable the user going to that page! So let's see how to implement the navigation from one page to another.","date":"23/01/2023","objectID":"/en/posts/tutos/my-first-app/5-how-to-navigate/","tags":["Navigation"],"title":"How to navigate","uri":"/en/posts/tutos/my-first-app/5-how-to-navigate/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied so far in this tutorial. To do so, refer to the project setup guide and resume from the sample located in the folder ‚Äú1 - MVVM‚Äù. Hey, you‚Äôre back! We‚Äôre now done with MVVM and believe me, you did take a big step forward! Today it will be much simpler, we start the creation of the application main page. But new page also means, enable the user going to that page! So let‚Äôs see how to implement the navigation from one page to another. Navigate to a new page Let‚Äôs start by adding our new page. To do this, right click on the Views folder to add a new file, then choose the template ‚Äú.NET MAUI ContentPage (C#)‚Äù as below. We‚Äôll name this file: MusicPlayerView.cs. As you will have noticed, the template used to create the page provides us with a default content. So all we have to do now is navigating to this new page! To do so, go to the file HomeViewModel.cs and modify the method Enter() as follows: Filename:HomeViewModel.cs using NightClub.Views; // Reminder: without this line, it would not compile! ... [RelayCommand] async Task Enter() { await Application.Current.MainPage.Navigation.PushAsync( new MusicPlayerView()); } All that is done here is accessing the navigation service provided by the application in order to display a new page MusicPlayerView. Actually, when the method PushAsync() is called, the page MusicPlayerView is then added to the very top of the stack of existing pages, exactly as shown in the diagram below: As with a deck of playing cards, only the top one is visible. ‚Äé üêí‚Äé ‚Äé Ha! That‚Äôs it, can I test it then? We‚Äôre almost there! For the navigation to work, we need the first page displayed at startup to be included in a NavigationPage. If you go back to the App.cs file, there is a method called OnStart() that is automatically executed each time the app is initialized. So modify this method to set HomeView as the application root page, in a NavigationPage: Filename:App.cs protected override void OnStart() { base.OnStart(); Console.WriteLine(\"[NightClub] App - OnStart\"); MainPage = new NavigationPage(new HomeView()); } That‚Äôs it, restart the application and click on the Enter button! Remove the navigation bar As you will surely have understood, our home page is now contained in a page specially configured for navigation. It therefore contains a navigation bar by default: From a design point of view, this is not necessarily what you want. So let‚Äôs take a quick look at how to remove this header for the home page. Go to the file HomeView.cs and invoke the method SetHasNavigationBar() in the page constructor, like this: Filename:HomeView.cs public HomeView() { ... BindingContext = new HomeViewModel(); NavigationPage.SetHasNavigationBar(this, false); BackgroundColor = Colors.Black; ... } And now restarting the app, it‚Äôs a lot nicer! The application is slowly coming alive, and even more so with the next chapter! See you soon for the construction of our main page. More articles in the series: Introduction Setup the project First run of the project MVVM is the key to succeed How to navigate Scaffolding Timing display Media playback controls Volume display Play music Control the playback position ","date":"23/01/2023","objectID":"/en/posts/tutos/my-first-app/5-how-to-navigate/:0:0","tags":["Navigation"],"title":"How to navigate","uri":"/en/posts/tutos/my-first-app/5-how-to-navigate/"},{"categories":null,"content":"In this chapter, we will discover a major design pattern for mobile application development, the Model-View-ViewModel (MVVM)!","date":"12/01/2023","objectID":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM is the key to succeed","uri":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied so far in this tutorial. To do so, refer to the project setup guide and resume from the sample located in the folder ‚Äú0 - Get Started‚Äù. In this chapter, we will discover a major design pattern for mobile application development, the Model-View-ViewModel! (usually referred as ‚ÄúMVVM‚Äù) Model-View-ViewModel MVVM is a design pattern which provides the developer with a logical separation of the code into 3 layers: The View, which refers to the user interface, i.e. everything that will be displayed on the screen (e.g. the HomeView page), The Model, which refers to the kind of data to be displayed in this View, And finally, the ViewModel which is the link between the View and the Model. For example, to retrieve data from the Cloud or react to user interactions. ‚Äé üêí‚Äé ‚Äé Indeed, I can see the separation, but why is it recommended? One of the main advantages of MVVM is isolating the view (i.e. the user interface) from the business logic. In the context of our first page, we finally obtain two files: HomeView.cs which defines exactly how our page will be displayed (i.e. a background colour, an image at the top, a bottom button), And HomeViewModel.cs which contains all the logic to run our page (in this case, the behaviour of the button when the user presses it). By following this principle, the breakdown of your code is clear and you reduce the number of lines of code per file. You wouldn‚Äôt want a file with more than 10,000 lines! üòÑ Besides, there is no risk of affecting the logic of your app if you only change the colour of a button. ‚Äé üêí‚Äé ‚Äé It‚Äôs all clear! But there‚Äôs one thing I don‚Äôt understand, there‚Äôs no Model for the HomeView page. Good catch! Indeed, some pages are so simple that they do not require a Model. In such cases, only the View and ViewModel are required. Data Binding We now understand how to split our code into several layers. For example, defining a button in a View and declaring its action in a ViewModel. But can you tell how they will work together? ‚Äé üêí‚Äé ‚Äé Hmm‚Ä¶ maybe tell the button in this View about what has been declared in this ViewModel? Indeed, that‚Äôs almost it! It takes place in two steps: First, a ViewModel is associated to its View (usually with the View‚Äôs BindingContext), Then we define the behaviour of each element of the View into the ViewModel, using the principle of Data Binding. Data Binding is a technique for linking two objects so that when one is changed, the other is also changed. It may sound a bit vague, but you‚Äôll understand its role better in the next section. For now, let‚Äôs move on! Apply MVVM Now that you know the basics of MVVM, I can show you how to apply it concretely in the application. Let‚Äôs start by creating a file to be the ViewModel for our HomeView. To do this, first create a new folder called ViewModels in the project, then add a new file to it. This will be an empty class named HomeViewModel.cs : Then, replace its content with the following one: Filename:HomeViewModel.cs using System; namespace NightClub.ViewModels; public class HomeViewModel { public HomeViewModel() { } async Task Enter() { await Application.Current.MainPage.DisplayAlert( \"Well Done !\", \"You have successfully reached the end of this chapter.\", \"Next !\"); } } Well, there‚Äôs nothing special here. It‚Äôs just a C# object class with an *Enter() *method that prints some text on the screen right after the user clicks the ‚ÄúENTER‚Äù button. ‚Äé üêí‚Äé ‚Äé Still, we just defined the action of the home page button! And you‚Äôre right, but as it is, it remains unusable! Remember, there‚Äôs absolutely no link between the HomeView and the HomeViewModel. Fortunately, there is a library provided by Microsoft that will greatly simplify our lives: the MVVM Toolkit. This library has already been added to the project and you can easily verify this by opening the NuGet packages management window. Just right click on the project‚Äôs dependencies: And here is the ","date":"12/01/2023","objectID":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/:0:0","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM is the key to succeed","uri":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":"It's now time to get the app running. We'll also take the opportunity to look at the source code üôÇ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/","tags":["Visual Studio","C# markup"],"title":"First run of the project","uri":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied so far in this tutorial. To do so, refer to the project setup guide and resume from the sample located in the folder ‚Äú0 - Get Started‚Äù. It‚Äôs now time to get the app running. We‚Äôll also take the opportunity to look at the source code üôÇ But for our application to work, we still have two points to address: the app initialization and above all, managing its execution state. App initialization For each targeted platform (iOS, Android, ‚Ä¶), a .NET MAUI application is initialized from a single entry point via the method CreateMauiApp() which is located in the file MauiProgram.cs. This is where you configure everything the app needs to work the way you want it to: web services, external dependencies, or specific fonts. App state management But we also need something to define the current state of our application (which page to display, what if the application stops, ‚Ä¶). And for that, we have an Application class declared in the file App.cs. Executing the app Come on, it‚Äôs time to get the application running! So choose the platform you want to target, then click on the red boxed button to start the project: First, you will see your project compiling with the chosen configuration (this is the build stage): The current status of the project can easily be viewed at the bottom left of Visual Studio for Mac. Then your application will automatically be deployed to the chosen platform (here, a simulated iPhone 13, iOS 15.5). And here‚Äôs the result! ‚Äé üêí‚Äé ‚Äé Heeeey, but nothing happens when I click on the button! This is just the beginning of our app, the biggest part is ahead ! The home page The screen you just saw is the home page for which the content is specified in the file HomeView.cs. It‚Äôs a ContentPage (basically a page with content) which is the most common type of page. And as you can see, what it is composed about is very simple: Filename:HomeView.cs public HomeView() { BackgroundColor = Colors.Black; Content = new VerticalStackLayout { Children = { NightClubImage, EnterButton } }.CenterVertical(); } It‚Äôs a black background page whose content is defined by an image and a button that are stacked vertically in a VerticalStackLayout. And if you want to know how these two components are defined, just look a little further down in the code on the page: Filename:HomeView.cs #region Controls Image NightClubImage =\u003e new Image { // .NET MAUI converts SVG files to PNG files. Source = \"night_club.png\" }; Button EnterButton =\u003e new Button { Text = \"ENTER\", TextColor = Colors.White, BackgroundColor = Colors.Magenta, CornerRadius = 10 } .Bold() .Paddings(50, 2, 50, 2) .CenterHorizontal(); #endregion Nothing very complex at this stage: We set the image of the component NightClubImage with the ‚ÄúSource‚Äù property, And for the button, we set several base properties such as the text, the color, ‚Ä¶ but you might have noticed that we also apply some functions to the component EnterButton: Bold() to set the text of the button in bold, Paddings() to add a bit of space all around this text, especially to the left and to the right of the text, And then, CenterHorizontal() to align the text at the center of the button. ‚Äé These methods follow a particular programmation technique named ‚ÄúDeclarative UI‚Äù or ‚ÄúFluent UI‚Äù. Finally, this page is coded in C#, as for the rest of the app! ‚Äé üêí‚Äé ‚Äé Alright! And shouldn‚Äôt we declare an action to this button? Correct! And we‚Äôll see how to trigger code execution by clicking on this button, but not in any way. Indeed, we will apply this wonderful design pattern called Model-View-ViewModel (MVVM). More articles in the series: Introduction Setup the project First run of the project MVVM is the key to succeed How to navigate Scaffolding Timing display Media playback controls Volume display Play music Control the playback position ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/:0:0","tags":["Visual Studio","C# markup"],"title":"First run of the project","uri":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"Today we'll start building our first application! Let‚Äôs first set up your working environment, and then you‚Äôll have something concrete soon. Let's get started!","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/2-setup-the-project/","tags":["Visual Studio","Setup","New Project"],"title":"Setup the project","uri":"/en/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Today we‚Äôll start building our first application! Let‚Äôs first set up your working environment, and then you‚Äôll have something concrete soon. Let‚Äôs get started! Which tools for development ? Let‚Äôs first see the tools you will need to develop your app. ‚Äé üêí‚Äé ‚Äé By the way, do I need to be on Windows, MacOS or Linux? Actually, there is no particular pre-requisite to develop an app with .NET MAUI, unless you own a very old fashion computer and you never did update anything‚Ä¶ ü§î¬†Otherwise, it‚Äôs mostly a matter of preference! Personally, I develop on macOS because it‚Äôs an operating system I like, and the built in iPhone simulator is very powerful and quickly gives me a realistic render of what I‚Äôm programming. But you can also develop under Windows or Linux! More concretely: for Windows or MacOS, it‚Äôs easy, Microsoft offers a very powerful integrated development environment: Visual Studio for Windows, and Visual Studio for Mac for‚Ä¶ well for MacOS üòÑ and if you‚Äôre on Linux, you‚Äôll have to be a bit more resourceful (and that‚Äôs why you‚Äôre on Linux, isn‚Äôt it? üòõ). In that case, I suggest you use the excellent source code editor Visual Studio Code. ‚Äé For the purposes of this blog, I will only focus on mobile application development using Visual Studio. It is much more intuitive to use and that is what appeals to any true novice. Install your environment Let‚Äôs move on to the installation of the working environment: First, download Visual Studio from the official Microsoft website, choosing the appropriate version for your operating system (Windows or MacOS), Then comes the time to install Visual Studio and its development environment for .NET MAUI. In order to improve the reading of this blog, I suggest you directly follow the installation steps on the official website: follow the installation steps for Windows, follow the installation steps for MacOS, Finally, download my class from GitHub. To do this, go to the blog‚Äôs code repository, click on the ‚ÄúCode‚Äù button and download the ZIP version. ‚Äé Before you go further, if you are on MacOS, make sure you have downloaded the latest version of Xcode which is required for the iPhone simulator. This is usually long to install, so I suggest you do it while reading. Opening the project Once you have unzipped the downloaded file, go to the Samples folder associated with our course (Samples/NightClub). The folders under it each correspond to a different part of the course: For now, open the first folder (*0 - Get Started)* and double click on `NightClub.sln` to open the NightClub project in Visual Studio. The NightClub project structure from Visual Studio. ‚Äé üêí‚Äé ‚Äé Ok! Opening the project‚Ä¶ loading‚Ä¶ But there are already many things in this project, can‚Äôt we start from scratch? Actually, it already is! The project you just opened is brand new, but it includes several base files that are necessary for the proper functioning of a .NET MAUI application: All the libraries that are required for the proper functioning of the project are grouped in the Dependencies folder, In Platforms, you will find all the files needed to run the application, for each target platform, As for the Properties folder, it generally contains configuration files (and besides, there is one created by default for Windows), And then, you will be able to configure an icon and a loading screen for each application! For this, we usually use the Resources folder to store all our media (icons, images, audio and video tracks, ‚Ä¶), Finally, we have to display something when the app opens! And for that, we have the Views folder which at the moment contains our first page, the famous home page‚Ä¶ ‚Äé Going further with the basic structure of a Visual Studio project And that‚Äôs it, how about if we launch that app ? üôÇ More articles in the series: Introduction Setup the project First run of the project MVVM is the key to succeed How to navigate Scaffolding Timing display Media playback controls Volume display Play music Control the playback position ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/2-setup-the-project/:0:0","tags":["Visual Studio","Setup","New Project"],"title":"Setup the project","uri":"/en/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Hi Dev-s! ü§ì I'm J-E and my goal with this blog is to help any beginner developer willing to get started with his mobile application through very simple lessons. No long theoretical courses, here you will quickly have fun and produce cool apps! And I'll guide you from the development stage until your application is available on the stores.","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/1-introduction/","tags":["New Project"],"title":"Introduction","uri":"/en/posts/tutos/my-first-app/1-introduction/"},{"categories":null,"content":"Hi Devs ! ü§ì My name is J-E, or Jean-Emmanuel if you prefer, and I‚Äôm glad to know you reading my notes! Indeed, I really want to share my passion about developing cross-platforms mobile applications, and especially with .NET MAUI (to pronounce ‚Äúdot-net-mah-wee‚Äù). With this blog, I wish I could help any beginner developer willing to get started with his mobile application project via short and simple lessons. No long theoretical courses, here you will quickly have fun and produce cool apps! And I‚Äôll guide you from the development stage until your application is available on the stores. ‚Äé üêí‚Äé ‚Äé But, what is .NET MAUI? Can you tell me more? It‚Äôs a framework maintained by Microsoft for developing mobile applications, but not only! In fact, MAUI stands for ‚ÄúMulti-platform App User Interface‚Äù. .NET MAUI was officially released during 2022 and is based on the excellent Xamarin.Forms framework which covers iOS and Android only. And if you had never heard of it, don‚Äôt panic! Even I only learned about it at the end of 2019, and then I deployed my very first app on the stores: MyVanity. ‚Äé üêí‚Äé ‚Äé And how did you get your first application published? Did it take long? And that‚Äôs the magic of .NET MAUI, you only have to code one program and it will run on Android, iOS, macOS and Windows! And it just needs a single programming language. And so no, it didn‚Äôt take that long, but mostly it will depend: your development experience, the complexity of your application, and how much time you can dedicate to it. In my case, it took exactly one year from the moment I imagined the application to the day I published it on the stores. ‚Äé üêí‚Äé ‚Äé Okay, so what do I need to know before I start my application? First of all, congratulations, it‚Äôs a very good decision! So to start your application, you will need to: Find an idea, Design a mock-up, Know C# language. First point is easy, you usually already have the idea to get this far. üòõ The second one is just to have a better idea of what the application will look like, and for that you should give a try to Adobe XD which is free! Finally, you will need to know C# language to program your application, and for that I suggest you to take the learning path developed by Microsoft. That being said, you can start right away if you have a bit of experience in coding, even without knowing C#! You will learn very quickly as you develop your application. For this first lesson, I propose you develop an application to play music in a ‚Äúnightclub‚Äù atmosphere. üíÉüèæüï∫üèªü™© You‚Äôll probably make a few mistakes, but failing is the best way to learn, so make sure you follow through with your idea! ‚Äé üêí‚Äé ‚Äé I have the idea in mind, my design is ready, and I‚Äôm fine coding with C#, let‚Äôs start ! Here we go, see you at next article ! More articles in the series: Introduction Setup the project First run of the project MVVM is the key to succeed How to navigate Scaffolding Timing display Media playback controls Volume display Play music Control the playback position ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/1-introduction/:0:0","tags":["New Project"],"title":"Introduction","uri":"/en/posts/tutos/my-first-app/1-introduction/"}]