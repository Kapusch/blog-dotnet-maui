[{"categories":null,"content":"Allez c’est bientôt la fin du premier gros de notre page principale. On passe désormais au contrôle du volume !","date":"12/02/2023","objectID":"/posts/tutos/my-first-app/9-volume-tracker/","tags":["Image","ImageButton","DataTrigger","Slider","MultiTrigger",".NET Community Toolkit","C# markup"],"title":"Ajuster le volume","uri":"/posts/tutos/my-first-app/9-volume-tracker/"},{"categories":null,"content":" Et enfin, la dernière ligne de notre lecteur musical ! Allez, pour commencer, télécharge les différentes images utilisées pour afficher l’état du volume. Volume_Tracker_-_Images.zip ./files/Volume_Tracker_-_Images.zip En décompressant ce fichier, tu verras 4 nouvelles images: Il y en aura une pour chaque niveau de volume identifié, et même quand le son sera coupé. Maintenant, inclus ces nouvelles images dans le dossier Resources/Images, exactement comme la dernière fois ! Une fois que c’est fait, tu peux définir les composants de cette dernière ligne, à savoir un ImageButton pour couper le son et un Slider pour contrôler le volume du son de manière précise. Essaye par toi-même si tu veux avant de regarder le code qui suit ! ImageButton MuteButton = new ImageButton { HeightRequest = 25, WidthRequest = 25, Source = \"volume_medium\" }; Slider VolumeTracker = new Slider { Minimum = 0, MinimumTrackColor = Colors.Black, Maximum = 100, MaximumTrackColor = Colors.Gray, Value = 60 }; On rajoute ensuite les contrôles dans le BottomLayout: MuteButton.Row(2).Column(1), VolumeTracker.Row(2).Column(2).ColumnSpan(3), Et voilà ! Ça devient plus facile avec tout cet entraînement, est-ce que tu commences à prendre le coup de main ? Bon, il n’y avait que deux composants à définir cette fois, alors on va aller un petit plus loin. Tu te rappelles des différentes images pour notre volume ? Il est temps de leur trouver une utilité ! L’idée c’est que notre MuteButton change d’apparence en fonction du niveau de volume demandé. On aura donc une référence directe au VolumeTracker afin de pouvoir trouver la bonne image à associer au MuteButton. Pour cela, on utilisera un DataTrigger qui permet de modifier la propriété d’un objet lorsqu’une valeur est détectée. Prenons le cas le plus simple, celui où l’on détecte un volume sonore à 0: DataTrigger VolumeOffTrigger =\u003e new(typeof(ImageButton)) { Binding = new Binding(nameof(Slider.Value), source: VolumeTracker), Value = 0d, Setters = { new Setter { Property = ImageButton.SourceProperty, Value = \"volume_off\" } } }; Dans un premier temps, on précise sur quel type d’objet appliquer la modification, en l’occurence un ImageButton qui caractérise MuteButton: DataTrigger VolumeOffTrigger =\u003e new(typeof(ImageButton)) Cette modification est d’ailleurs définie par un Setter pour changer la source d’image du MuteButton et appliquer l’icône correspondant au volume éteint: new Setter { Property = ImageButton.SourceProperty, Value = \"volume_off\" } Quant au moment où la modification est déclenchée, il est prévu quand la valeur du VolumeTracker atteindra 0: Value = 0d Ceci est rendu possible par la technique du Binding, qui va créer un lien vers ce composant pour suivre l’évolution de la propriété Value: Binding = new Binding(nameof(Slider.Value), source: VolumeTracker) Et le changement d’icône du bouton s’opérera une fois la valeur cible atteinte. ‎ 🐒‎ ‎ Donc là on a un déclencheur pour modifier l’icône au moment où l’utilisateur abaissera la valeur du Slider à zéro. Mais pourquoi mettre un “d” après le “0” ? Bien vu, ce n’était pas une erreur typographique 😄 En fait, la documentation du Slider précise que la propriété Value est de type double, pour représenter un nombre avec des décimales. Cela donne à l’utilisateur un peu plus de contrôle quand il manipule un Slider. Or, si tu tentes de supprimer le “d” et que tu passes ta souris au-dessus du “0” tu pourras constater qu’il n’est pas considéré comme un double, mais un int ! Et comme la propriété Value de notre DataTrigger accepte potentiellement n’importe quel type de valeur (puisqu’il est de type object), on doit explicitement lui indiquer comment considérer ce “0”: comme un double ! Et pour cela, on doit rajouter le “d” juste après: Ne reste plus qu’à rajouter ce trigger à notre composant MuteButton en utilisant une méthode dédiée InitMuteButton et ce afin de garder notre code clair: public MusicPlayerView() { ... InitMuteButton(); Content = new Grid { ... }; } void Init","date":"12/02/2023","objectID":"/posts/tutos/my-first-app/9-volume-tracker/:0:0","tags":["Image","ImageButton","DataTrigger","Slider","MultiTrigger",".NET Community Toolkit","C# markup"],"title":"Ajuster le volume","uri":"/posts/tutos/my-first-app/9-volume-tracker/"},{"categories":null,"content":"Dans ce chapitre, nous allons nous attaquer à la seconde rangée de boutons, et permettre à l’utilisateur de contrôler le média !","date":"05/02/2023","objectID":"/posts/tutos/my-first-app/8-media-control/","tags":["Image","ImageButton","Visual Studio","Round Button","ColumnSpan"],"title":"Jouer des chansons","uri":"/posts/tutos/my-first-app/8-media-control/"},{"categories":null,"content":" Passons ensuite à la seconde rangée de boutons: On a ici 5 boutons qui représentent une image cliquable, on fera donc appel au composant ImageButton. Mais avant de pouvoir les coder, tu vas devoir dans un premier temps importer ces images dans le projet. Commence par télécharger l’ensemble des images: Media_Control_-_Images.zip ./files/Media_Control_-_Images.zip Décompresse le fichier pour obtenir les 6 images suivantes: ‎ 🐒‎ ‎ 6 images… mais on n’avait pas dit 5 boutons seulement ? Oui en effet, on aura bien 5 boutons pour contrôler le média. De gauche à droite ça donne: Répéter la chanson une fois (repeat_once.png) Revenir à la chanson précédente (skip_previous.png) Jouer la chanson (play.png) quand elle n’est pas déjà en cours de lecture, ou la mettre en pause (pause.png) quand elle est en train d’être jouée ! Passer à la chanson suivante (skip_next.png) Télécharger le morceau (download.png) Oui je sais, initialement j’avais pensé à un mode aléatoire de lecture, mais j’ai changé d’avis ! 😄 Comme quoi, c’est important de concevoir une maquette ! Maintenant que tu as obtenu les images, tu vas devoir les importer dans le projet afin de les rendre disponibles dans l’app. Pour cela, déplie le dossier Resources et fais un clic droit sur le dossier Images: Dans le menu contextuel qui s’affiche, sous Ajouter, clique pour ajouter des fichiers depuis un dossier: Sélectionne alors le dossier décompressé qui contient les 6 images, et valide. Une fenêtre apparaît pour sélectionner les fichiers à inclure dans le projet: Dans notre cas, on veut importer toutes les images du dossier. Sélectionne-les toutes et valide. A ce moment-là, il y a de grandes chances pour que Visual Studio te demande comment il doit les importer dans le dossier Resources/Images. Je te conseille de choisir de les copier, ou de les déplacer (pense à cocher la case pour appliquer ton choix à tous les fichiers !): Voilà c’est terminé, vérifie que tu as bien tes 6 nouvelles images importées dans le dossier ! Allez c’est parti, on passe au code ! On définit d’abord les boutons aux extrémité, qui sont les plus simples: ImageButton RepeatOnceButton =\u003e new ImageButton { CornerRadius = 5, HeightRequest = 25, WidthRequest = 25, Source = \"repeat_once\", BackgroundColor = Colors.Black }; ImageButton DownloadButton =\u003e new ImageButton { CornerRadius = 5, HeightRequest = 25, WidthRequest = 25, Source = \"download\", BackgroundColor = Colors.Black }; On y définit la source de l’image par le nom du fichier associé, sans nécessairement préciser l’extension “.png”. Mais aussi, une forme carrée (25 de hauteur sur 25 de largeur) à fond noir et aux bords légèrement arrondis. Ensuite, il reste à définir les 3 boutons pour contrôler le lecteur : ImageButton SkipPreviousButton =\u003e new ImageButton { HeightRequest = 75, WidthRequest = 75, Source = \"skip_previous\" }; ImageButton PlayButton =\u003e new ImageButton { CornerRadius = 50, HeightRequest = 100, WidthRequest = 100, Source = \"play\", BackgroundColor = Colors.Black }; ImageButton SkipNextButton =\u003e new ImageButton { HeightRequest = 75, WidthRequest = 75, Source = \"skip_next\" }; Rien de bien différent ici comparé aux deux premiers, si ce n’est que ceux-là sont plus grands, et que les boutons SkipPrevious et SkipNext n’ont de couleur définie en fond, contrairement au bouton Jouer. Ce dernier d’ailleurs a des bords très arrondis… tellement arrondis que le carré devient en fait un cercle parfait ! ‎ 🐒‎ ‎ Un cercle parfait ? Comment as-tu fait ? Il y a une technique très simple: la valeur assignée aux bords arrondis doit être égale à la moitié de la taille du composant. Ainsi, si tu veux un bouton de forme ronde d’une hauteur de 200, il faudra lui donner une valeur de 100 aux bords arrondis. Allez il est désormais temps pour toi d’assigner ces nouveaux boutons sur la deuxième ligne de notre BottomLayout ! Comme on a 5 boutons pour 7 colonnes, ton intuition t’orientera peut-être à écrire le code suivant: RepeatOnceButton.Row(1).Column(1), SkipPreviousB","date":"05/02/2023","objectID":"/posts/tutos/my-first-app/8-media-control/:0:0","tags":["Image","ImageButton","Visual Studio","Round Button","ColumnSpan"],"title":"Jouer des chansons","uri":"/posts/tutos/my-first-app/8-media-control/"},{"categories":null,"content":"Maintenant que les fondations de la page principale sont prêtes, on va pouvoir commencer à disposer tous les éléments de contrôle. Commençons avec le minutage !","date":"29/01/2023","objectID":"/posts/tutos/my-first-app/7-time-tracker/","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Le minutage","uri":"/posts/tutos/my-first-app/7-time-tracker/"},{"categories":null,"content":" Maintenant que les fondations de ta page sont prêtes, tu vas pouvoir commencer à disposer tous les éléments de contrôle. Voyons déjà pour la première ligne: On utilisera le composant Label pour afficher les minutages correspondant à la position actuelle dans la piste en cours de lecture, ainsi que le temps d’écoute restant: Label ElapsedTime =\u003e new Label { FontSize = 14, Text = \"0:36\", TextColor = Colors.White }.TextCenter(); Label RemainingTime =\u003e new Label { FontSize = 14, Text = \"2:57\", TextColor = Colors.White }.TextCenter(); La taille de police définie pour ces deux labels est relativement petite. Cependant, elle s’adaptera automatiquement au niveau d’agrandissement du texte défini par l’utilisateur dans les réglages d’accessibilité de son téléphone. ‎ Aller plus loin avec l’accessibilité Et pour ce qui est de la barre de navigation, on utilisera le Slider: Slider TimeTracker =\u003e new Slider { Minimum = 0, MinimumTrackColor = Colors.LightSalmon, Maximum = 100, MaximumTrackColor = Colors.Black, Value = 20 }; Bon évidemment ici encore, les valeurs de configuration sont factices. L’idée est surtout de rapidement se rendre compte du rendu final ! Pour le moment, on demande au Slider de considérer toutes les valeurs allant de 0 à 100 et de positionner son curseur à la position n°20. Pour vérifier l’affichage de cette première partie du lecteur musical, je te propose d’effacer tous les éléments enfants de notre BottomLayout et de lui assigner les premiers éléments que l’on vient de définir. Pour cela, tu seras sûrement tenté d’écrire quelque chose comme: Grid BottomLayout =\u003e new Grid { ... Children = { ElapsedTime.Row(0).Column(1), TimeTracker.Row(0).Column(2), RemainingTime.Row(0).Column(5) } }; C’est un bon début ! Cependant, si tu démarres l’application, tu constateras qu’il y un léger problème d’affichage: Pas de panique ! Si tu te rappelles, on a initialement divisé le BottomLayout en 7 colonnes. Or, si notre code positionne bien notre Slider à partir de la case n°3 de la première ligne, il ne lui dit pas clairement où s’arrêter ! On pourrait alors simplement dire au Slider de s’étaler sur les colonnes suivantes, comme ceci: Pour cela, on utilise la commande ColumnSpan pour indiquer au Slider de s’étendre jusqu’à 3 colonnes à partir de la case n°3 : TimeTracker.Row(0).Column(2).ColumnSpan(3) Et voilà on en a fini avec la première ligne de notre grille ! Voyons ce que ça donne à l’image: ","date":"29/01/2023","objectID":"/posts/tutos/my-first-app/7-time-tracker/:0:0","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Le minutage","uri":"/posts/tutos/my-first-app/7-time-tracker/"},{"categories":null,"content":"Quand on développe une nouvelle page, le plus important c’est de réfléchir à l’organisation des éléments sur la page. Comme tu vas le voir, c’est un vrai travail d’architecte !","date":"22/01/2023","objectID":"/posts/tutos/my-first-app/6-scaffolding/","tags":["C# markup","Grid"],"title":"Les fondations","uri":"/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":" ‎ Pour assurer le bon déroulement de cet article, je t’invite à repartir du projet reprenant les différentes étapes appliquées dans les articles précédents. Pour cela, télécharge le projet si ce n’est pas déjà fait, et ouvre le projet NightClub situé dans le dossier “2 - Navigation”. Quand on développe une nouvelle page, le plus important c’est de réfléchir à l’organisation des éléments sur la page, et .NET MAUI nous offre une palette de possibilités pour structurer notre page. Tu vas voir, c’est un vrai travail d’architecte ! ‎ 🐒‎ ‎ Mais au fait, à quoi doit ressembler notre page ? Très bonne question ! Si tu veux un conseil, commence toujours par élaborer le design de ta page au crayon sur une feuille. En effet, les écrans de téléphone sont petits et il n’est donc pas toujours facile de disposer tous les éléments souhaités. Et quand on est suffisamment satisfait du design sur papier, on crée une maquette sur ordinateur pour un rendu réaliste qui facilitera l’intégration de la page. Dans notre cas, on visera le résultat suivant : Ici on remarque que les éléments sont disposés de façon assez régulière. On peut facilement imaginer des lignes pour délimiter les espaces et aligner nos éléments les uns par rapport aux autres. C’est un exercice un peu spécial mais tu verras qu’avec le temps, ça deviendra de plus en plus facile: Ces lignes te feront peut-être penser à une grille… et si c’est le cas, bien vu ! En effet, on utilisera ici majoritairement le composant Grid pour disposer nos éléments sur une grille, littéralement. La première chose à faire ici, c’est de supprimer l’en-tête de navigation pour que notre page remplisse tout l’écran, comme on l’avait fait pour la page d’accueil. Commence par supprimer le contenu généré par défaut et remplace-le par ce qui suit: public MusicPlayerView() { Console.WriteLine(\"[NightClub] MusicPlayerView - Constructor\"); NavigationPage.SetHasNavigationBar(this, false); } Puis on va diviser la page en deux: La partie du haut qui n’affiche rien d’autre pour le moment qu’un fond noir, Et celle du bas qui représente notre lecteur de musique. Si tu as l’oeil, tu remarqueras que la partie supérieure est légèrement plus grande que la partie inférieure. On peut même dire que la partie noire s’étale verticalement sur 60% de la page, ce qui laisse 40% d’espace pour le lecteur. Ce sont des données utiles pour notre première utilisation de la Grid: public MusicPlayerView() { ... Content = new Grid { RowDefinitions = Rows.Define( Stars(60), Stars(40)), RowSpacing = 0, Children = { TopLayout.Row(0), BottomLayout.Row(1), } }; } Ici tu peux voir qu’on définit le contenu de notre page dans le constructeur de MusicPlayerView, avec comme base un Grid. Et avec le paramètre RowDefinitions, on décompose cette grille en 2 lignes, la première pouvant s’étendre jusqu’à 60% de la page verticalement contre 40% pour la deuxième, comme sur notre design ! A l’initialisation du Grid, on définit deux autres paramètres : RowSpacing à 0 pour n’avoir aucun espace entre nos deux lignes, Children pour contenir les éléments de notre grille sur la première ligne et la deuxième ligne. Et si tu te demandes d’où sortent ces fameux TopLayout et BottomLayout, ce sont deux nouveaux conteneurs d’éléments que j’ai définis en dehors du constructeur de notre vue. En effet, pour ces deux contrôles, on utilise encore deux Grid pour nous aider dans le placement des éléments. L’un est défini avec un fond noir et l’autre avec un fond gris foncé: #region Controls Grid TopLayout =\u003e new Grid { BackgroundColor = Colors.Black }; Grid BottomLayout =\u003e new Grid { BackgroundColor = Colors.DimGray }; #endregion Concentrons-nous dans un premier temps sur le contenu du BottomLayout. En regardant d’un peu plus près le design, on perçoit: de haut en bas, 3 lignes de taille identique, de gauche à droite, 7 colonnes (2 petites, 3 grandes et 2 petites à nouveau) Et pour cela, nous allons définir les lignes et colonnes qui composent notre Grid: Grid BottomLayout =\u003e","date":"22/01/2023","objectID":"/posts/tutos/my-first-app/6-scaffolding/:0:0","tags":["C# markup","Grid"],"title":"Les fondations","uri":"/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":"On attaque désormais la création de la page principale de l’application. Mais qui dit nouvelle page dit aussi: permettre à l’utilisateur de se rendre sur cette page ! Voyons donc comment implémenter la navigation d’une page à une autre.","date":"15/01/2023","objectID":"/posts/tutos/my-first-app/5-how-to-navigate/","tags":["Navigation"],"title":"D’une page à l’autre","uri":"/posts/tutos/my-first-app/5-how-to-navigate/"},{"categories":null,"content":" ‎ Pour assurer le bon déroulement de cet article, je t’invite à repartir du projet reprenant les différentes étapes appliquées dans les articles précédents. Pour cela, télécharge le projet si ce n’est pas déjà fait, et ouvre le projet NightClub situé dans le dossier “1 - MVVM”. Commençons déjà par ajouter notre nouvelle page. Pour cela, clic droit sur le dossier Views pour ajouter un nouveau fichier, puis choisir le template “.NET MAUI ContentPage (C#)” depuis la catégorie “.NET MAUI”. On va nommer ce fichier : MusicPlayerView.cs. Comme tu l’auras remarqué, le template utilisé crée la page avec un contenu par défaut. On n’a donc plus qu’à naviguer vers notre nouvelle page ! Dans le fichier HomeViewModel.cs, modifie la méthode Enter() de la façon suivante : [RelayCommand] async Task Enter() { await Application.Current.MainPage.Navigation.PushAsync( new MusicPlayerView()); } ‎ 🐒‎ ‎ Ah! Et c’est tout, je peux tester alors ? On y est presque ! En effet, on doit simplement initialiser la navigation dans l’app en lui informant quelle en sera la page racine. Pour cela, on fait appel à une NavigationPage pour contenir notre HomeView en modifiant la méthode OnStart() du fichier App.cs de cette façon: protected override void OnStart() { base.OnStart(); Console.WriteLine(\"[NightClub] App - OnStart\"); MainPage = new NavigationPage(new HomeView()); } Voilà c’est bon, relance l’application et clique sur le bouton Enter ! Comme tu l’auras sûrement remarqué, notre page d’accueil est désormais contenue dans une page configurée pour la navigation, elle contiendra donc une en-tête de navigation : Ce n’est pas nécessairement ce que l’on souhaite alors on va vite voir comment supprimer cette en-tête. Rends-toi dans le fichier HomeView.cs et fais appel à la méthode* SetHasNavigationBar() *dans le constructeur de la HomeView comme ceci: public HomeView() { ... BindingContext = new HomeViewModel(); NavigationPage.SetHasNavigationBar(this, false); BackgroundColor = Colors.Black; ... } Voilà, et si tu relances l’app, c’est quand même plus joli ! Allez il est temps de passer à un nouveau chapitre, l’élaboration de notre page principale ! ","date":"15/01/2023","objectID":"/posts/tutos/my-first-app/5-how-to-navigate/:0:0","tags":["Navigation"],"title":"D’une page à l’autre","uri":"/posts/tutos/my-first-app/5-how-to-navigate/"},{"categories":null,"content":"Allez, il est temps de faire tourner l’application. On en profitera aussi pour jeter un œil au code source ! 🙂","date":"01/01/2023","objectID":"/posts/tutos/my-first-app/3-first-run-of-the-project/","tags":["Visual Studio","C# markup"],"title":"Première exécution du projet","uri":"/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":" ‎ Pour assurer le bon déroulement de cet article, je t’invite à repartir du projet reprenant les différentes étapes appliquées dans les articles précédents. Pour cela, télécharge le projet si ce n’est pas déjà fait, et ouvre le projet NightClub situé dans le dossier “0 - Get Started”. Pour que notre application puisse fonctionner, il nous reste deux points à aborder : l’initialisation de l’app et surtout, gérer son état d’exécution. ","date":"01/01/2023","objectID":"/posts/tutos/my-first-app/3-first-run-of-the-project/:0:0","tags":["Visual Studio","C# markup"],"title":"Première exécution du projet","uri":"/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"Initialisation de l’app Pour chaque plateforme ciblée (iOS, Android, …), chaque application .NET MAUI sera initialisée depuis un seul point d’entrée via la méthode CreateMauiApp() située dans le fichier MauiProgram.cs. C’est ici que l’on configurera tout ce dont a besoin l’app pour fonctionner comme on le souhaite : les services Web, les dépendances externes, ou bien encore les polices de caractères spécifiques. ","date":"01/01/2023","objectID":"/posts/tutos/my-first-app/3-first-run-of-the-project/:0:1","tags":["Visual Studio","C# markup"],"title":"Première exécution du projet","uri":"/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"Gestion de l’état de l’app Mais on aura aussi besoin de quoi définir l’état actuel de notre application (quelle page afficher, que faire si l’application est arrêtée, …). Et pour ça on a justement une classe Application déclarée dans le fichier App.cs. ","date":"01/01/2023","objectID":"/posts/tutos/my-first-app/3-first-run-of-the-project/:0:2","tags":["Visual Studio","C# markup"],"title":"Première exécution du projet","uri":"/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"Lancement de l’app Allez, il est temps de faire tourner l’application ! Choisis donc la plateforme que tu souhaites cibler, puis clique sur le bouton encadré en rouge pour démarrer le projet: Dans un premier temps, tu verras ton projet être compilé avec la configuration choisie (c’est l’étape du build): Sous Visual Studio for Mac, le statut actuel du projet peut facilement être consulté en bas à gauche de la fenêtre. Puis tu verras ton application se déployer automatiquement vers la plateforme choisie (ici, une simulation de l’iPhone 13, iOS 15.5). Et voilà le résultat ! ‎ 🐒‎ ‎ Héééé mais il ne se passe rien quand je clique sur le bouton ! Ce n’est évidemment que le début de notre app, le plus gros reste à faire ! ","date":"01/01/2023","objectID":"/posts/tutos/my-first-app/3-first-run-of-the-project/:0:3","tags":["Visual Studio","C# markup"],"title":"Première exécution du projet","uri":"/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"La page d’accueil Ce que tu vois pour le moment, c’est la page d’accueil dont le contenu est spécifié dans le fichier HomeView.cs. Il s’agit là d’une ContentPage (littéralement une page avec du contenu) qui est le type de page le plus courant. Et comme tu peux le voir, ce qu’elle définit est très simple: public HomeView() { BackgroundColor = Colors.Black; Content = new VerticalStackLayout { Children = { NightClubImage, EnterButton } }.CenterVertical(); } C’est une page avec un arrière-plan noir et dont le contenu est défini par une image et un bouton qui sont empilés verticalement dans un VerticalStackLayout. Et si tu veux savoir comment sont définis ces deux composants, il te suffit de regarder un peu plus bas dans le code de la page : #region Controls Image NightClubImage =\u003e new Image { // .NET MAUI converts SVG files to PNG files. Source = \"night_club.png\" }; Button EnterButton =\u003e new Button { Text = \"ENTER\", TextColor = Colors.White, BackgroundColor = Colors.Magenta, CornerRadius = 10 } .Bold() .Paddings(50, 2, 50, 2) .CenterHorizontal(); #endregion ‎ 🐒‎ ‎ D’accord ! Et il ne faudrait pas lui déclarer une action à ce bouton ? Tout juste ! Et on va voir comment déclencher l’exécution de code en cliquant sur ce bouton, mais pas n’importe comment. On va en effet appliquer ce merveilleux patron de conception qu’est le Model-View-ViewModel (MVVM). ","date":"01/01/2023","objectID":"/posts/tutos/my-first-app/3-first-run-of-the-project/:0:4","tags":["Visual Studio","C# markup"],"title":"Première exécution du projet","uri":"/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"Aujourd'hui on attaque la création de notre première application ! Juste le temps d'installer ton environnement de travail et on aura rapidement quelque chose de concret. Allez c'est parti !","date":"01/01/2023","objectID":"/posts/tutos/my-first-app/2-setup-the-project/","tags":["Visual Studio","Setup","New Project"],"title":"Installer le projet","uri":"/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":" Salut les Dev•e•s ! 🤓 Tu vas bientôt pouvoir créer ta première application mobile ! Juste le temps d’installer ton environnement de travail et on aura rapidement quelque chose de concret. Allez c’est parti ! ‎ 🐒‎ ‎ Mais au fait, il faut être sous Windows, MacOS ou Linux ? En fait, il n’y a pas de pré-requis particulier pour développer une app avec .NET MAUI, à moins que tu ne traînes un ordinateur de l’avant-guerre et que tu ne mettes rien à jour… 🤔 Sinon, c’est surtout une question de préférence ! Personnellement, je développe sous MacOS car c’est un système que j’affectionne, et le simulateur d’iPhone qui y est intégré est très performant et me permet d’avoir rapidement un rendu de ce que je programme. Mais tu peux tout aussi bien développer sous Windows ou Linux ! Plus concrètement : sous Windows ou MacOS, c’est facile, Microsoft propose un environnement de développement intégré très performant: Visual Studio pour Windows, et Visual Studio for Mac pour… eh bien pour MacOS 😄 et si tu es sous Linux, il te faudra recourir à un peu plus d’ingéniosité (et c’est bien pour cela que tu es sous Linux, n’est-ce pas ? 😛). Dans ce cas-là, je te conseille d’utiliser l’excellent éditeur de code source Visual Studio Code. ‎ Dans le cadre de ce blog, je me concentrerais uniquement sur le développement d’application mobile à l’aide de Visual Studio. En effet, son utilisation est bien plus intuitive et c’est justement cela qui plaît à tout vrai néophyte. Passons maintenant à l’installation de l’environnement de travail: Dans un premier temps, télécharge Visual Studio depuis le site officiel de Microsoft, en choisissant la version appropriée à ton système (Windows ou MacOS), Puis vient le moment d’installer Visual Studio et son environnement de développement .NET MAUI. Pour améliorer la lecture de ce blog, je te propose de directement suivre les étapes d’installation sur le site officiel: suivre les étapes d’installation sous Windows suivre les étapes d’installation sous MacOS Enfin, télécharge le projet depuis GitHub. Pour cela, rends-toi sur le dépôt de code du blog, clique sur le bouton “Code” et télécharge le tout au format .ZIP ‎ Avant d’aller plus loin, si tu es sous MacOS, il te faudra t’assurer d’avoir téléchargé la dernière version d’Xcode qui est requise pour le simulateur d’iPhone. Son installation peut être très longue, aussi, je te conseille de le faire en parallèle de ta lecture. Une fois le fichier téléchargé décompressé, rends-toi dans le dossier des exemples associés à notre cours (Samples/NightClub). Les dossiers qui y sont entreposés correspondent chacun à une partie différente du cours: Pour le moment, ouvre le premier dossier (0 - Get Started) et double-clique sur NightClub.sln pour ouvrir le projet NightClub dans Visual Studio. La structure du projet NightClub après ouverture dans Visual Studio. ‎ 🐒‎ ‎ Ok ! J’ouvre le projet, ça charge… Mais il y a déjà plein de choses dans ce projet, on ne peut pas partir de zéro ? En fait, c’est déjà le cas ! Le projet que tu as sous les yeux est tout neuf, mais il embarque plusieurs fichiers de base nécessaires au bon fonctionnement d’une application .NET MAUI: Toutes les librairies nécessaires au bon fonctionnement du projet sont regroupées dans le dossier Dependencies, Dans Platforms, tu retrouveras tous les fichiers nécessaires à l’exécution de l’application, et ce pour chaque plateforme cible, Quant au dossier Properties, on y retrouve généralement des fichiers de configuration (il y en a d’ailleurs une créée par défaut pour Windows), Et puis, tu auras la possibilité pour chaque application de lui configurer une icône et un écran de chargement ! Pour cela, on recoure généralement au dossier Resources pour stocker tous nos médias (icônes, images, pistes audio et vidéo, …), Enfin, il faudra bien pouvoir afficher quelque chose à l’ouverture de l’app ! Et pour ça, on a le dossier Views qui contient pour le moment notre première page, la fameuse page d’accueil… Et voilà c’est tout, et","date":"01/01/2023","objectID":"/posts/tutos/my-first-app/2-setup-the-project/:0:0","tags":["Visual Studio","Setup","New Project"],"title":"Installer le projet","uri":"/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Salut les Dev•e•s ! 🤓 Moi c'est J-E et mon but avec ce blog est d’aider tout développeur débutant à se lancer dans son projet d’application mobile au travers de cours très simples. Pas de cours théoriques à rallonge, ici tu vas vite t’amuser et produire des apps sympas ! Et je t’accompagnerai du développement jusqu’à la mise en ligne de ton application sur les stores.","date":"01/01/2023","objectID":"/posts/tutos/my-first-app/1-introduction/","tags":["New Project"],"title":"Introduction","uri":"/posts/tutos/my-first-app/1-introduction/"},{"categories":null,"content":" Salut les Dev•e•s ! 🤓 Moi c’est J-E, ou Jean-Emmanuel si tu préfères, et je suis ravi de te savoir en train de me lire ! 😊 En effet, j’ai à cœur de partager ma passion pour le développement d’applications mobiles cross-platforms, et tout particulièrement avec .NET MAUI (à prononcer “dote-net maoui”). Avec ce blog, je veux pouvoir aider tout développeur débutant à se lancer dans son projet d’application mobile au travers de cours très simples. Pas de cours théoriques à rallonge, ici tu vas vite t’amuser et produire des apps sympas ! Et je t’accompagnerai du développement jusqu’à la mise en ligne de ton application sur les stores. ‎ 🐒‎ ‎ Mais au fait, c’est quoi .NET MAUI ? Tu peux m’en dire plus ? Il s’agit du framework maintenu par Microsoft pour développer des applications mobiles, mais pas que ! En fait, MAUI signifie : “Multi-platform App User Interface”, ce qui veut littéralement dire “application dotée d’une interface utilisateur et qui peut s’exécuter sur plusieurs plateformes”. .NET MAUI a été officiellement publié courant 2022 et se base sur l’excellent framework Xamarin.Forms qui couvre iOS et Android uniquement. Et si tu n’en avais jamais entendu parler, pas de panique ! Moi-même j’en ai appris l’existence seulement fin 2019, et c’est grâce à lui que j’ai déployé ma toute première application sur les stores: MyVanity. ‎ 🐒‎ ‎ Et comment as-tu fait pour publier ta première application ? Ça t’a pris longtemps ? Et c’est là toute la magie de .NET MAUI, tu n’as qu’à coder un seul programme pour qu’il fonctionne sur Android, iOS, macOS et Windows ! Et tout ça bien-sûr avec un seul langage de programmation. Et donc non, cela ne m’a pas pris très longtemps, mais cela dépendra surtout: de tes connaissances en développement, de la complexité de ton application, et du temps que tu peux lui accorder. Dans mon cas, cela m’a pris exactement un an entre le moment où j’ai imaginé l’application et le jour où je l’ai publiée sur les stores. ‎ 🐒‎ ‎ D’accord, alors qu’est-ce que je dois savoir avant de débuter mon application ? Tout d’abord bravo, tu as raison de te lancer ! Alors pour démarrer ton application, il te faudra : Pour le premier point, c’est facile, tu l’as normalement déjà fait pour arriver jusqu’ici. 😛 Le deuxième, c’est simplement pour avoir une idée précise de ce à quoi ton application ressemblera, et pour ça, tu peux utiliser le très bon Adobe XD qui est gratuit ! Enfin pour finir, il te faudra connaître le langage C# pour programmer ton application, et pour cela je te propose le parcours d’apprentissage élaboré par Microsoft. Cela dit, si tu as déjà codé dans ta vie, alors tu peux te lancer même sans connaître le C# ! Tu apprendras très vite en voulant développer ton application. Pour ce premier cours, je te propose de développer une application pour lire des titres musicaux dans une ambiance “boîte de nuit”. 💃🏾🕺🏻🪩 Tu feras sûrement quelques erreurs, mais se tromper est justement la meilleure façon d’apprendre, alors surtout: va jusqu’au bout de ton idée ! ‎ 🐒‎ ‎ J’ai l’idée en tête, mon design est prêt, et coder en C# ne me fait pas peur, on attaque ? Allez c’est parti, rendez-vous au prochain article ! ","date":"01/01/2023","objectID":"/posts/tutos/my-first-app/1-introduction/:0:0","tags":["New Project"],"title":"Introduction","uri":"/posts/tutos/my-first-app/1-introduction/"}]