[{"categories":null,"content":"Now that the foundations of the main page are ready, we can start laying out all the controls. Let's start with the timing!","date":"06/02/2023","objectID":"/en/posts/tutos/my-first-app/7-time-tracker/","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Timing","uri":"/en/posts/tutos/my-first-app/7-time-tracker/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied in the previous articles. To do so, download my class from GitHub if not already done, and open the NightClub project located in the folder named ‚Äú3 - Page Scaffolding‚Äù. In the previous article, we set up a matrix to display all the controls of our music player. So we can now add concrete elements for the user! ","date":"06/02/2023","objectID":"/en/posts/tutos/my-first-app/7-time-tracker/:0:0","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Timing","uri":"/en/posts/tutos/my-first-app/7-time-tracker/"},{"categories":null,"content":"Timing display Let‚Äôs start with the part dedicated to the timing of the song. According to the mock-up, we will have a text on the left for the current listening time, and on the right, for the total duration of the track: The application shows that the song has been playing for 36 seconds and is 2 minutes and 57 seconds long. To reproduce it in the application, we will use the Label component which allows to display some text on the screen: Filename:MusicPlayerView.cs Label ElapsedTime =\u003e new Label { FontSize = 14, Text = \"0:36\", TextColor = Colors.White }.TextCenter(); Label TotalTime =\u003e new Label { FontSize = 14, Text = \"2:57\", TextColor = Colors.White }.TextCenter(); These two new elements are set to display static text in white and with a relatively small font size. However, the font size will automatically be adjusted to the level of text enlargement set by the user in the phone‚Äôs accessibility settings. ‚Äé Going further with accessibility for mobile applications. ","date":"06/02/2023","objectID":"/en/posts/tutos/my-first-app/7-time-tracker/:0:1","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Timing","uri":"/en/posts/tutos/my-first-app/7-time-tracker/"},{"categories":null,"content":"Adjusting the playback head The middle element has two functions: displaying and controlling the playback position in the song. Indeed, the user can move forward or backward in the song by sliding his finger horizontally. In addition, this component has a pink part that represents the elapsed time, and a black part for the remaining time. To reproduce this navigation bar, we will use the Slider component: Filename:MusicPlayerView.cs Slider TimeTracker =\u003e new Slider { Minimum = 0, MinimumTrackColor = Colors.LightSalmon, Maximum = 100, MaximumTrackColor = Colors.Black, Value = 20 }; A Slider is a control with a cursor that allows the user to select a specific value from a range of possible values. In our case, it‚Äôs like having a ruler which is graduated from 0 to 100 with a cursor positioned on 20. ‚Äé üêí‚Äé ‚Äé Oh yes, I see, we are actually at 20% of the song! So we will have a pink bar from 0 to 20, and a black bar from 20 to 100. That‚Äôs it! Well, actually here, all the configuration values are static, but the final idea is allowing the user to advance or rewind the track to the nearest second. Now, we‚Äôre done with the first row of elements of the music player. To check that the display is correct, I would like you delete all the child elements of the BottomLayout before assigning all the components that we have defined in this chapter. To do this, you may be tempted to write something like : Filename:MusicPlayerView.cs Grid BottomLayout =\u003e new Grid { ... Children = { ElapsedTime.Row(0).Column(1), TimeTracker.Row(0).Column(2), RemainingTime.Row(0).Column(5) } }; At first glance, it looks pretty good! However, if you start the application, you will notice that there is a slight problem with the display: Positioned this way, the Slider does not look good. Don‚Äôt panic! We will see right away how to readjust it. ","date":"06/02/2023","objectID":"/en/posts/tutos/my-first-app/7-time-tracker/:0:2","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Timing","uri":"/en/posts/tutos/my-first-app/7-time-tracker/"},{"categories":null,"content":"Better use of the Grid If you remember, we initially divided the BottomLayout into 7 columns. However, even if our Slider is well positioned from box n¬∞3 of the first row, it does not clearly say where to stop! We could then simply tell the Slider to spread out over the next columns, like this: The Slider overlaps with boxes n¬∞3, n¬∞4 and n¬∞5. To do this, we use the ColumnSpan() method to ask the Slider to expand up to 3 columns from the cell n¬∞3: Filename:MusicPlayerView.cs TimeTracker.Row(0).Column(2).ColumnSpan(3) Now we‚Äôre really done! Let‚Äôs run the application again to see what it looks like: Well, that‚Äôs true, it‚Äôs nice but it doesn‚Äôt do much! But we‚Äôll finish the visual part first before moving on to a more functional part of the application. Besides, we still have a lot of buttons to put in place! Our goal for the next chapter is to control the playback of the media. More articles in the series: Introduction Setup the project First run of the project MVVM is the key to succeed How to navigate Scaffolding Timing ","date":"06/02/2023","objectID":"/en/posts/tutos/my-first-app/7-time-tracker/:0:3","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Timing","uri":"/en/posts/tutos/my-first-app/7-time-tracker/"},{"categories":null,"content":"Before developing a new page, it is best to think about the layout of the various elements. And you'll see, it's a real architect's job!","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-scaffolding/","tags":["C# markup","Grid"],"title":"Scaffolding","uri":"/en/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied in the previous articles. To do so, download my class from GitHub if not already done, and open the NightClub project located in the folder named ‚Äú2 - Navigation‚Äù. With this new chapter, we begin a series of articles focused on the visual aspect of the app, and there is a good chance that you will like it! Indeed, developing a visual interface requires numerous tests of the rendering on the screen, and there is nothing better for learning. And it‚Äôs through regular practice that you‚Äôll naturally understand and retain a lot of things üôÇ Now it‚Äôs time to set up the foundations of the main page! ","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-scaffolding/:0:0","tags":["C# markup","Grid"],"title":"Scaffolding","uri":"/en/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":"The design But before any visual development, it is best to think about the layout of the various elements that we want to display. Precisely, .NET MAUI provides several simple solutions for structuring our pages. And you‚Äôll see, it‚Äôs a real architect‚Äôs job! ‚Äé üêí‚Äé ‚Äé But what should our page actually look like? This is a very good question! In general, when imagining a new page for our application, it is recommended to work out the design with a pencil on a paper. Because phone screens are quite small, it is not easy to arrange all the desired elements. Then, when we are satisfied with the rendering on paper, we prepare a digital mock-up for a more realistic rendering: this greatly facilitates the integration of the page into the application. For our course, the main page should look like the following layout: ","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-scaffolding/:0:1","tags":["C# markup","Grid"],"title":"Scaffolding","uri":"/en/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":"Structuring the page On this model, you can see the elements are arranged in a fairly regular way. One could even imagine lines to relatively align the elements on each other: Arranging the elements along imaginary lines is a bit special at first, but it becomes a habit over time. These lines might make you think of a grid‚Ä¶ and if so, good for you! This is the whole principle of the Grid component, which as its name indicates, allows you to arrange elements on a grid. We will use it several times for this page. ","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-scaffolding/:0:2","tags":["C# markup","Grid"],"title":"Scaffolding","uri":"/en/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":"Introduction to the Grid To comply with the layout, the first thing to do is dividing the page in two: The top part which displays nothing but a black background, and the bottom part to control our music player. You will notice that the top part is slightly larger than the bottom part. You could even say that the black part spreads vertically over 60% of the page, leaving 40% of the page for the rest. This is very useful to know! Let‚Äôs apply these values to define the content of our MusicPlayerView page with a Grid : Filename:MusicPlayerView.cs using CommunityToolkit.Maui.Markup; using static CommunityToolkit.Maui.Markup.GridRowsColumns; ... public MusicPlayerView() { ... Content = new Grid { RowDefinitions = Rows.Define( Stars(60), Stars(40)), RowSpacing = 0, Children = { TopLayout.Row(0), BottomLayout.Row(1), } }; } With the RowDefinitions parameter, we configure a grid of 2 lines: the first one will be able to extend up to 60% of the page vertically against 40% for the second one, as per design! When initializing the Grid, we also define two other parameters: the RowSpacing set to 0 for having no space between the lines of our grid, and Children which will contain all the elements of our grid, to be distributed over two lines. And if you wonder where these TopLayout and BottomLayout come from, they‚Äôre actually two element containers to define outside the page constructor. Indeed, we again use a Grid for each of these two controls to help us with positioning the remaining elements. The first Grid (the TopLayout) corresponds to the top part of our page and therefore has a black background. As for the other Grid (the BottomLayout), we define a dark grey background to represent the lower part. Copy the following code and paste it into the region dedicated to controls in the file MusicPlayerView.cs: Filename:MusicPlayerView.cs #region Controls Grid TopLayout =\u003e new Grid { BackgroundColor = Colors.Black }; Grid BottomLayout =\u003e new Grid { BackgroundColor = Colors.DimGray }; #endregion ","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-scaffolding/:0:3","tags":["C# markup","Grid"],"title":"Scaffolding","uri":"/en/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":"The main foundations Let‚Äôs focus first on the content of the BottomLayout. If we take a closer look at the design, we can see new rows, but also columns. More exactly: there are 3 rows from top to bottom, all the same size, and there are 7 columns from left to right (2 small, 3 large and then 2 small again). By squaring the lower area of the page, you can see that each visual element has its own cell. Now let‚Äôs define the rows and columns composing our BottomLayout to comply with the alignment of the visual elements, as on the mock-up: Filename:MusicPlayerView.cs Grid BottomLayout =\u003e new Grid { BackgroundColor = Colors.DimGray, RowDefinitions = Rows.Define( Stars(1), Stars(1), Stars(1)), RowSpacing = 0, ColumnDefinitions = Columns.Define( Stars(10), Stars(10), Stars(20), Stars(20), Stars(20), Stars(10), Stars(10)), ColumnSpacing = 0 }; As you can see, the code above proposes a split into 3 rows of the same size and 7 columns with different sizes. ‚Äé üêí‚Äé ‚Äé Well, if I add up the sizes of each column, I get a total of 100%! But when it comes to rows, there‚Äôs a problem, right? Good point! Actually, I started with a 100% size scale because it‚Äôs often easier to understand. So, when you write‚Ä¶ Filename:MusicPlayerView.cs RowDefinitions = Rows.Define( Stars(60), Stars(40)) ‚Ä¶ the application understands that the first line will have a weight of 60 compared to the second line, which will only have a weight of 40. This is a dynamic way of assigning a height to our lines depending on the size of the screen, as it changes from one mobile phone to another. Finally, you can see this weight as a multiplier. For example, this same piece of code can be rewritten in this way: Filename:MusicPlayerView.cs RowDefinitions = Rows.Define( Stars(1.5), // 1.5 x 40 = 60 Stars(1)) // 1 x 40 = 40 Choose what makes more sense to you! ","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-scaffolding/:0:4","tags":["C# markup","Grid"],"title":"Scaffolding","uri":"/en/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":"Validating the rendering on screen Now that our bottom grid is in place, let‚Äôs check the settings are correct. With a Grid of 3 rows and 7 columns, that‚Äôs a lot of cells to validate! But I have a trick to quickly test if the slicing is what you expected or if some adjustments are required. To do this, you can draw a geometric shape in each cell of the grid, each with its own colour. With the BoxView, this is very easy: Filename:MusicPlayerView.cs Grid BottomLayout =\u003e new Grid { ... Children = { new BoxView { Color = Color.FromArgb(\"#ffffff\") }.Row(0).Column(0), new BoxView { Color = Color.FromArgb(\"#d0d0d0\") }.Row(0).Column(1), new BoxView { Color = Color.FromArgb(\"#a2a3a3\") }.Row(0).Column(2), new BoxView { Color = Color.FromArgb(\"#777879\") }.Row(0).Column(3), new BoxView { Color = Color.FromArgb(\"#4e5051\") }.Row(0).Column(4), new BoxView { Color = Color.FromArgb(\"#292b2c\") }.Row(0).Column(5), new BoxView { Color = Color.FromArgb(\"#000405\") }.Row(0).Column(6), new BoxView { Color = Color.FromArgb(\"#f3f337\") }.Row(1).Column(0), new BoxView { Color = Color.FromArgb(\"#a2eb5b\") }.Row(1).Column(1), new BoxView { Color = Color.FromArgb(\"#4edb80\") }.Row(1).Column(2), new BoxView { Color = Color.FromArgb(\"#00c89f\") }.Row(1).Column(3), new BoxView { Color = Color.FromArgb(\"#00b1b1\") }.Row(1).Column(4), new BoxView { Color = Color.FromArgb(\"#0098b2\") }.Row(1).Column(5), new BoxView { Color = Color.FromArgb(\"#177ea2\") }.Row(1).Column(6), new BoxView { Color = Color.FromArgb(\"#bf7aef\") }.Row(2).Column(0), new BoxView { Color = Color.FromArgb(\"#ea6cd4\") }.Row(2).Column(1), new BoxView { Color = Color.FromArgb(\"#ff63b3\") }.Row(2).Column(2), new BoxView { Color = Color.FromArgb(\"#ff6590\") }.Row(2).Column(3), new BoxView { Color = Color.FromArgb(\"#ff716e\") }.Row(2).Column(4), new BoxView { Color = Color.FromArgb(\"#ff844e\") }.Row(2).Column(5), new BoxView { Color = Color.FromArgb(\"#f89832\") }.Row(2).Column(6), } }; And if you run the app, you will see that our use of the Grid is indeed correct: It's a bit similar to the old colour televisions. Well, there is nothing functional for the user, but now that our foundations are ready, it will greatly simplify our lives! We will finally be able to have fun arranging all the control elements from the next chapter, starting with the timing management. More articles in the series: Introduction Setup the project First run of the project MVVM is the key to succeed How to navigate Scaffolding Timing ","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-scaffolding/:0:5","tags":["C# markup","Grid"],"title":"Scaffolding","uri":"/en/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":"We are now starting to create the main page of the application. But new page also means, enable the user going to that page! So let's see how to implement the navigation from one page to another.","date":"23/01/2023","objectID":"/en/posts/tutos/my-first-app/5-how-to-navigate/","tags":["Navigation"],"title":"How to navigate","uri":"/en/posts/tutos/my-first-app/5-how-to-navigate/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied in the previous articles. To do so, download my class from GitHub if not already done, and open the NightClub project located in the folder named ‚Äú1 - MVVM‚Äù. Hey, you‚Äôre back! We‚Äôre now done with MVVM and believe me, you did take a big step forward! Today it will be much simpler, we start the creation of the application main page. But new page also means, enable the user going to that page! So let‚Äôs see how to implement the navigation from one page to another. ","date":"23/01/2023","objectID":"/en/posts/tutos/my-first-app/5-how-to-navigate/:0:0","tags":["Navigation"],"title":"How to navigate","uri":"/en/posts/tutos/my-first-app/5-how-to-navigate/"},{"categories":null,"content":"Navigate to a new page Let‚Äôs start by adding our new page. To do this, right click on the Views folder to add a new file, then choose the template ‚Äú.NET MAUI ContentPage (C#)‚Äù as below. We‚Äôll name this file: MusicPlayerView.cs. As you will have noticed, the template used to create the page provides us with a default content. So all we have to do now is navigating to this new page! To do so, go to the file HomeViewModel.cs and modify the method Enter() as follows: Filename:HomeViewModel.cs using NightClub.Views; // Reminder: without this line, it would not compile! ... [RelayCommand] async Task Enter() { await Application.Current.MainPage.Navigation.PushAsync( new MusicPlayerView()); } All that is done here is accessing the navigation service provided by the application in order to display a new page MusicPlayerView. Actually, when the method PushAsync() is called, the page MusicPlayerView is then added to the very top of the stack of existing pages, exactly as shown in the diagram below: As with a deck of playing cards, only the top one is visible. ‚Äé üêí‚Äé ‚Äé Ha! That‚Äôs it, can I test it then? We‚Äôre almost there! For the navigation to work, we need the first page displayed at startup to be included in a NavigationPage. If you go back to the App.cs file, there is a method called OnStart() that is automatically executed each time the app is initialized. So modify this method to set HomeView as the application root page, in a NavigationPage: Filename:App.cs protected override void OnStart() { base.OnStart(); Console.WriteLine(\"[NightClub] App - OnStart\"); MainPage = new NavigationPage(new HomeView()); } That‚Äôs it, restart the application and click on the Enter button! ","date":"23/01/2023","objectID":"/en/posts/tutos/my-first-app/5-how-to-navigate/:0:1","tags":["Navigation"],"title":"How to navigate","uri":"/en/posts/tutos/my-first-app/5-how-to-navigate/"},{"categories":null,"content":"Remove the navigation bar As you will surely have understood, our home page is now contained in a page specially configured for navigation. It therefore contains a navigation bar by default: From a design point of view, this is not necessarily what you want. So let‚Äôs take a quick look at how to remove this header for the home page. Go to the file HomeView.cs and invoke the method SetHasNavigationBar() in the page constructor, like this: Filename:HomeView.cs public HomeView() { ... BindingContext = new HomeViewModel(); NavigationPage.SetHasNavigationBar(this, false); BackgroundColor = Colors.Black; ... } And now restarting the app, it‚Äôs a lot nicer! The application is slowly coming alive, and even more so with the next chapter! See you soon for the construction of our main page. More articles in the series: Introduction Setup the project First run of the project MVVM is the key to succeed How to navigate Scaffolding Timing ","date":"23/01/2023","objectID":"/en/posts/tutos/my-first-app/5-how-to-navigate/:0:2","tags":["Navigation"],"title":"How to navigate","uri":"/en/posts/tutos/my-first-app/5-how-to-navigate/"},{"categories":null,"content":"In this chapter, we will discover a major design pattern for mobile application development, the Model-View-ViewModel (MVVM)!","date":"12/01/2023","objectID":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM is the key to succeed","uri":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied in the previous articles. To do so, download my class from GitHub if not already done, and open the NightClub project located in the folder named ‚Äú0 - Get Started‚Äù. In this chapter, we will discover a major design pattern for mobile application development, the Model-View-ViewModel! (usually referred as ‚ÄúMVVM‚Äù) ","date":"12/01/2023","objectID":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/:0:0","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM is the key to succeed","uri":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":"Model-View-ViewModel MVVM is a design pattern which provides the developer with a logical separation of the code into 3 layers: The View, which refers to the user interface, i.e. everything that will be displayed on the screen (e.g. the HomeView page), The Model, which refers to the kind of data to be displayed in this View, And finally, the ViewModel which is the link between the View and the Model. For example, to retrieve data from the Cloud or react to user interactions. ‚Äé üêí‚Äé ‚Äé Indeed, I can see the separation, but why is it recommended? One of the main advantages of MVVM is isolating the view (i.e. the user interface) from the business logic. In the context of our first page, we finally obtain two files: HomeView.cs which defines exactly how our page will be displayed (i.e. a background colour, an image at the top, a bottom button), And HomeViewModel.cs which contains all the logic to run our page (in this case, the behaviour of the button when the user presses it). By following this principle, the breakdown of your code is clear and you reduce the number of lines of code per file. You wouldn‚Äôt want a file with more than 10,000 lines! üòÑ Besides, there is no risk of affecting the logic of your app if you only change the colour of a button. ‚Äé üêí‚Äé ‚Äé It‚Äôs all clear! But there‚Äôs one thing I don‚Äôt understand, there‚Äôs no Model for the HomeView page. Good catch! Indeed, some pages are so simple that they do not require a Model. In such cases, only the View and ViewModel are required. ","date":"12/01/2023","objectID":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/:0:1","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM is the key to succeed","uri":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":"Data Binding We now understand how to split our code into several layers. For example, defining a button in a View and declaring its action in a ViewModel. But can you tell how they will work together? ‚Äé üêí‚Äé ‚Äé Hmm‚Ä¶ maybe tell the button in this View about what has been declared in this ViewModel? Indeed, that‚Äôs almost it! It takes place in two steps: First, a ViewModel is associated to its View (usually with the View‚Äôs BindingContext), Then we define the behaviour of each element of the View into the ViewModel, using the principle of Data Binding. Data Binding is a technique for linking two objects so that when one is changed, the other is also changed. It may sound a bit vague, but you‚Äôll understand its role better in the next section. For now, let‚Äôs move on! ","date":"12/01/2023","objectID":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/:0:2","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM is the key to succeed","uri":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":"Apply MVVM Now that you know the basics of MVVM, I can show you how to apply it concretely in the application. Let‚Äôs start by creating a file to be the ViewModel for our HomeView. To do this, first create a new folder called ViewModels in the project, then add a new file to it. This will be an empty class named HomeViewModel.cs : Then, replace its content with the following one: Filename:HomeViewModel.cs using System; namespace NightClub.ViewModels; public class HomeViewModel { public HomeViewModel() { } async Task Enter() { await Application.Current.MainPage.DisplayAlert( \"Well Done !\", \"You have successfully reached the end of this chapter.\", \"Next !\"); } } Well, there‚Äôs nothing special here. It‚Äôs just a C# object class with an *Enter() *method that prints some text on the screen right after the user clicks the ‚ÄúENTER‚Äù button. ‚Äé üêí‚Äé ‚Äé Still, we just defined the action of the home page button! And you‚Äôre right, but as it is, it remains unusable! Remember, there‚Äôs absolutely no link between the HomeView and the HomeViewModel. Fortunately, there is a library provided by Microsoft that will greatly simplify our lives: the MVVM Toolkit. This library has already been added to the project and you can easily verify this by opening the NuGet packages management window. Just right click on the project‚Äôs dependencies: And here is the library! It is called CommunityToolkit.Mvvm: ‚Äé Going further with NuGet packages Now let‚Äôs see how to prepare our class HomeViewModel to act as a real ViewModel: First, make it inherit from the class ObservableObject, then, define it as a partial class. You should have the following: Filename:HomeViewModel.cs using System; using CommunityToolkit.Mvvm.ComponentModel; namespace NightClub.ViewModels; public partial class HomeViewModel : ObservableObject ... ‚Äé By making HomeViewModel inherit from the ObservableObject class, Visual Studio automatically adds the necessary using for being compiled. Indeed, a reference to CommunityToolkit.Mvvm.ComponentModel is required for ObservableObject to become truly understandable by the application. These two steps are necessary for MVVM Toolkit to generate source code with just specific keywords. In short, you write a single word and it automatically generates dozens of lines of code, isn‚Äôt that great? ü§ò For example, we will define our Enter() method as a command by adding a simple [RelayCommand] attribute. Here‚Äôs how: Filename:HomeViewModel.cs [RelayCommand] async Task Enter() { await Application.Current.MainPage.DisplayAlert( \"Well Done !\", \"You have successfully reached the end of this chapter.\", \"Next !\"); } With just one word, we now have an Enter() command which supports the Data Binding technique! And this is only possible thanks to the MVVM Toolkit library that takes care of generating all the necessary source code. ‚Äé Going further with MVVM source code generators ","date":"12/01/2023","objectID":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/:0:3","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM is the key to succeed","uri":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":"Demo is coming soon! Almost there! Only remaining is to activate the Enter() command when the ‚ÄúENTER‚Äù button is clicked. Let‚Äôs first reopen the file HomeView.cs to link the view to the HomeViewModel via the BindingContext: Filename:HomeView.cs public HomeView() { BindingContext = new HomeViewModel(); BackgroundColor = Colors.Black; Content = ... } Then define the action for EnterButton with BindCommand to trigger the Enter() command that is specified in the HomeViewModel: Filename:HomeView.cs Button EnterButton =\u003e new Button { Text = \"ENTER\", TextColor = Colors.White, BackgroundColor = Colors.Magenta, CornerRadius = 10 } .Bold() .Paddings(50, 2, 50, 2) .CenterHorizontal() .BindCommand(\"EnterCommand\"); // Note: we need to add \"Command\" after \"Enter\" And there you have it! ‚Äé üêí‚Äé ‚Äé Okay, so if I got it properly, it‚Äôs almost the same on every page of the app, not that complicated! Well, yes in theory! But our app still lacks several key features: an authentication system, a database, etc‚Ä¶ For example, once we will have created the main page of the application, we‚Äôll need to configure its access from the home page! And this is what we will see in the next chapter. More articles in the series: Introduction Setup the project First run of the project MVVM is the key to succeed How to navigate Scaffolding Timing ","date":"12/01/2023","objectID":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/:0:4","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM is the key to succeed","uri":"/en/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":"It's now time to get the app running. We'll also take the opportunity to look at the source code üôÇ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/","tags":["Visual Studio","C# markup"],"title":"First run of the project","uri":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied in the previous articles. To do so, download my class from GitHub if not already done, and open the NightClub project located in the folder named ‚Äú0 - Get Started‚Äù. It‚Äôs now time to get the app running. We‚Äôll also take the opportunity to look at the source code üôÇ But for our application to work, we still have two points to address: the app initialization and above all, managing its execution state. ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/:0:0","tags":["Visual Studio","C# markup"],"title":"First run of the project","uri":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"App initialization For each targeted platform (iOS, Android, ‚Ä¶), a .NET MAUI application is initialized from a single entry point via the method CreateMauiApp() which is located in the file MauiProgram.cs. This is where you configure everything the app needs to work the way you want it to: web services, external dependencies, or specific fonts. ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/:0:1","tags":["Visual Studio","C# markup"],"title":"First run of the project","uri":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"App state management But we also need something to define the current state of our application (which page to display, what if the application stops, ‚Ä¶). And for that, we have an Application class declared in the file App.cs. ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/:0:2","tags":["Visual Studio","C# markup"],"title":"First run of the project","uri":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"Executing the app Come on, it‚Äôs time to get the application running! So choose the platform you want to target, then click on the red boxed button to start the project: First, you will see your project compiling with the chosen configuration (this is the build stage): The current status of the project can easily be viewed at the bottom left of Visual Studio for Mac. Then your application will automatically be deployed to the chosen platform (here, a simulated iPhone 13, iOS 15.5). And here‚Äôs the result! ‚Äé üêí‚Äé ‚Äé Heeeey, but nothing happens when I click on the button! This is just the beginning of our app, the biggest part is ahead ! ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/:0:3","tags":["Visual Studio","C# markup"],"title":"First run of the project","uri":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"The home page The screen you just saw is the home page for which the content is specified in the file HomeView.cs. It‚Äôs a ContentPage (basically a page with content) which is the most common type of page. And as you can see, what it is composed about is very simple: Filename:HomeView.cs public HomeView() { BackgroundColor = Colors.Black; Content = new VerticalStackLayout { Children = { NightClubImage, EnterButton } }.CenterVertical(); } It‚Äôs a black background page whose content is defined by an image and a button that are stacked vertically in a VerticalStackLayout. And if you want to know how these two components are defined, just look a little further down in the code on the page: Filename:HomeView.cs #region Controls Image NightClubImage =\u003e new Image { // .NET MAUI converts SVG files to PNG files. Source = \"night_club.png\" }; Button EnterButton =\u003e new Button { Text = \"ENTER\", TextColor = Colors.White, BackgroundColor = Colors.Magenta, CornerRadius = 10 } .Bold() .Paddings(50, 2, 50, 2) .CenterHorizontal(); #endregion Nothing very complex at this stage: We set the image of the component NightClubImage with the ‚ÄúSource‚Äù property, And for the button, we set several base properties such as the text, the color, ‚Ä¶ but you might have noticed that we also apply some functions to the component EnterButton: Bold() to set the text of the button in bold, Paddings() to add a bit of space all around this text, especially to the left and to the right of the text, And then, CenterHorizontal() to align the text at the center of the button. ‚Äé These methods follow a particular programmation technique named ‚ÄúDeclarative UI‚Äù or ‚ÄúFluent UI‚Äù. Finally, this page is coded in C#, as for the rest of the app! ‚Äé üêí‚Äé ‚Äé Alright! And shouldn‚Äôt we declare an action to this button? Correct! And we‚Äôll see how to trigger code execution by clicking on this button, but not in any way. Indeed, we will apply this wonderful design pattern called Model-View-ViewModel (MVVM). More articles in the series: Introduction Setup the project First run of the project MVVM is the key to succeed How to navigate Scaffolding Timing ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/:0:4","tags":["Visual Studio","C# markup"],"title":"First run of the project","uri":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"Today we'll start building our first application! Let‚Äôs first set up your working environment, and then you‚Äôll have something concrete soon. Let's get started!","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/2-setup-the-project/","tags":["Visual Studio","Setup","New Project"],"title":"Setup the project","uri":"/en/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":" Today we‚Äôll start building our first application! Let‚Äôs first set up your working environment, and then you‚Äôll have something concrete soon. Let‚Äôs get started! ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/2-setup-the-project/:0:0","tags":["Visual Studio","Setup","New Project"],"title":"Setup the project","uri":"/en/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Which tools for development ? Let‚Äôs first see the tools you will need to develop your app. ‚Äé üêí‚Äé ‚Äé By the way, do I need to be on Windows, MacOS or Linux? Actually, there is no particular pre-requisite to develop an app with .NET MAUI, unless you own a very old fashion computer and you never did update anything‚Ä¶ ü§î¬†Otherwise, it‚Äôs mostly a matter of preference! Personally, I develop on macOS because it‚Äôs an operating system I like, and the built in iPhone simulator is very powerful and quickly gives me a realistic render of what I‚Äôm programming. But you can also develop under Windows or Linux! More concretely: for Windows or MacOS, it‚Äôs easy, Microsoft offers a very powerful integrated development environment: Visual Studio for Windows, and Visual Studio for Mac for‚Ä¶ well for MacOS üòÑ and if you‚Äôre on Linux, you‚Äôll have to be a bit more resourceful (and that‚Äôs why you‚Äôre on Linux, isn‚Äôt it? üòõ). In that case, I suggest you use the excellent source code editor Visual Studio Code. ‚Äé For the purposes of this blog, I will only focus on mobile application development using Visual Studio. It is much more intuitive to use and that is what appeals to any true novice. ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/2-setup-the-project/:0:1","tags":["Visual Studio","Setup","New Project"],"title":"Setup the project","uri":"/en/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Install your environment Let‚Äôs move on to the installation of the working environment: First, download Visual Studio from the official Microsoft website, choosing the appropriate version for your operating system (Windows or MacOS), Then comes the time to install Visual Studio and its development environment for .NET MAUI. In order to improve the reading of this blog, I suggest you directly follow the installation steps on the official website: follow the installation steps for Windows, follow the installation steps for MacOS, Finally, download my class from GitHub. To do this, go to the blog‚Äôs code repository, click on the ‚ÄúCode‚Äù button and download the ZIP version. ‚Äé Before you go further, if you are on MacOS, make sure you have downloaded the latest version of Xcode which is required for the iPhone simulator. This is usually long to install, so I suggest you do it while reading. ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/2-setup-the-project/:0:2","tags":["Visual Studio","Setup","New Project"],"title":"Setup the project","uri":"/en/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Opening the project Once you have unzipped the downloaded file, go to the Samples folder associated with our course (Samples/NightClub). The folders under it each correspond to a different part of the course: For now, open the first folder (0 - Get Started) and double click on NightClub.sln to open the NightClub project in Visual Studio. The NightClub project structure from Visual Studio. ‚Äé üêí‚Äé ‚Äé Ok! Opening the project‚Ä¶ loading‚Ä¶ But there are already many things in this project, can‚Äôt we start from scratch? Actually, it already is! The project you just opened is brand new, but it includes several base files that are necessary for the proper functioning of a .NET MAUI application: All the libraries that are required for the proper functioning of the project are grouped in the Dependencies folder, In Platforms, you will find all the files needed to run the application, for each target platform, As for the Properties folder, it generally contains configuration files (and besides, there is one created by default for Windows), And then, you will be able to configure an icon and a loading screen for each application! For this, we usually use the Resources folder to store all our media (icons, images, audio and video tracks, ‚Ä¶), Finally, we have to display something when the app opens! And for that, we have the Views folder which at the moment contains our first page, the famous home page‚Ä¶ ‚Äé Going further with the basic structure of a Visual Studio project And that‚Äôs it, how about if we launch that app ? üôÇ More articles in the series: Introduction Setup the project First run of the project MVVM is the key to succeed How to navigate Scaffolding Timing ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/2-setup-the-project/:0:3","tags":["Visual Studio","Setup","New Project"],"title":"Setup the project","uri":"/en/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Hi Dev-s! ü§ì I'm J-E and my goal with this blog is to help any beginner developer willing to get started with his mobile application through very simple lessons. No long theoretical courses, here you will quickly have fun and produce cool apps! And I'll guide you from the development stage until your application is available on the stores.","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/1-introduction/","tags":["New Project"],"title":"Introduction","uri":"/en/posts/tutos/my-first-app/1-introduction/"},{"categories":null,"content":" Hi Devs ! ü§ì My name is J-E, or Jean-Emmanuel if you prefer, and I‚Äôm glad to know you reading my notes! Indeed, I really want to share my passion about developing cross-platforms mobile applications, and especially with .NET MAUI (to pronounce ‚Äúdot-net-mah-wee‚Äù). With this blog, I wish I could help any beginner developer willing to get started with his mobile application project via short and simple lessons. No long theoretical courses, here you will quickly have fun and produce cool apps! And I‚Äôll guide you from the development stage until your application is available on the stores. ‚Äé üêí‚Äé ‚Äé But, what is .NET MAUI? Can you tell me more? It‚Äôs a framework maintained by Microsoft for developing mobile applications, but not only! In fact, MAUI stands for ‚ÄúMulti-platform App User Interface‚Äù. .NET MAUI was officially released during 2022 and is based on the excellent Xamarin.Forms framework which covers iOS and Android only. And if you had never heard of it, don‚Äôt panic! Even I only learned about it at the end of 2019, and then I deployed my very first app on the stores: MyVanity. ‚Äé üêí‚Äé ‚Äé And how did you get your first application published? Did it take long? And that‚Äôs the magic of .NET MAUI, you only have to code one program and it will run on Android, iOS, macOS and Windows! And it just needs a single programming language. And so no, it didn‚Äôt take that long, but mostly it will depend: your development experience, the complexity of your application, and how much time you can dedicate to it. In my case, it took exactly one year from the moment I imagined the application to the day I published it on the stores. ‚Äé üêí‚Äé ‚Äé Okay, so what do I need to know before I start my application? First of all, congratulations, it‚Äôs a very good decision! So to start your application, you will need to: Find an idea, Design a mock-up, Know C# language. First point is easy, you usually already have the idea to get this far. üòõ The second one is just to have a better idea of what the application will look like, and for that you should give a try to Adobe XD which is free! Finally, you will need to know C# language to program your application, and for that I suggest you to take the learning path developed by Microsoft. That being said, you can start right away if you have a bit of experience in coding, even without knowing C#! You will learn very quickly as you develop your application. For this first lesson, I propose you develop an application to play music in a ‚Äúnightclub‚Äù atmosphere. üíÉüèæüï∫üèªü™© You‚Äôll probably make a few mistakes, but failing is the best way to learn, so make sure you follow through with your idea! ‚Äé üêí‚Äé ‚Äé I have the idea in mind, my design is ready, and I‚Äôm fine coding with C#, let‚Äôs start ! Here we go, see you at next article ! More articles in the series: Introduction Setup the project First run of the project MVVM is the key to succeed How to navigate Scaffolding Timing ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/1-introduction/:0:0","tags":["New Project"],"title":"Introduction","uri":"/en/posts/tutos/my-first-app/1-introduction/"}]