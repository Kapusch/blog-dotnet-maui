[{"categories":null,"content":"In this final episode, we'll be creating animations with .NET MAUI to set the mood for a crazy night. Put on your sunglasses, because there will be flashes everywhere!","date":"16/01/2024","objectID":"/en/posts/tutos/my-first-app/15-add-animations-to-an-app/","tags":["Animation","AbsoluteLayout","Round Effect","Brush"],"title":"Create animations in .NET MAUI for a disco atmosphere","uri":"/en/posts/tutos/my-first-app/15-add-animations-to-an-app/"},{"categories":null,"content":" ‚Äé This post is part of a series (‚ÄùMy First App‚Äù). To ease your read, please start from the project containing all the different steps applied so far in this tutorial. To do so, refer to the project setup guide and resume from the sample located in the folder ‚Äú5 - Music Player‚Äù. Welcome to the final episode of this series! ‚úåÔ∏è If you‚Äôve followed the series so far, then you should have an app you can use to listen to a few music tracks. But the mood remains a little dull, and I promised you a disco atmosphere at the very beginning of this course! So today we‚Äôre going to learn how to use .NET MAUI animations to set the dance floor on fire. Now it‚Äôs time to put on your sunglasses, because there will be flashes everywhere! ü™© ","date":"16/01/2024","objectID":"/en/posts/tutos/my-first-app/15-add-animations-to-an-app/:0:0","tags":["Animation","AbsoluteLayout","Round Effect","Brush"],"title":"Create animations in .NET MAUI for a disco atmosphere","uri":"/en/posts/tutos/my-first-app/15-add-animations-to-an-app/"},{"categories":null,"content":"Setting up the spotlights As you can see, I want it to look like we‚Äôre in a nightclub. So to start with, we‚Äôre going to add a few spotlights to the upper part of the screen, which is represented by our Grid TopLayout. Ideally, you‚Äôd want to place spotlights all over the place, in different sizes and colors‚Ä¶ And this is clearly about parameters of an object! So we‚Äôre going to define a new dedicated class: Spotlight. Start by creating a new Components folder in the project. Then add a new Spotlight.cs file in this folder with the following content: Filename:Spotlight.cs using Microsoft.Maui.Layouts; namespace NightClub.Views.Components; public class Spotlight : BoxView { public Spotlight(Color color, double size, double positionX, double positionY) { this.Color = color; CornerRadius = size / 2; AbsoluteLayout.SetLayoutBounds(this, new Rect(positionX, positionY, size, size)); AbsoluteLayout.SetLayoutFlags(this, AbsoluteLayoutFlags.PositionProportional); } } As you can see, this class takes the following 4 properties as parameters: the spotlight color (color), its size (size), and then, its horizontal (positionX) and vertical position (positionY). By the way, did you notice that Spotlight inherits from BoxView? Remember, we already have used this object to verify the components arrangement of the MusicPlayerView. ‚Äé üêí‚Äé ‚Äé Clear, but a BoxView isn‚Äôt round at all! I can guarantee you that our projectors won‚Äôt be rectangular. We‚Äôre going to round them off using the CornerRadius property, just as we did with the play button! To do this, the CornerRadius value must be half the requested size (size). Precisely, let‚Äôs see how the size and position of the Spotlight have been defined: Filename:Spotlight.cs AbsoluteLayout.SetLayoutBounds(this, new Rect(positionX, positionY, size, size)); With the SetLayoutBounds() method, we apply the requested position and size to our Spotlight (this), passing it a Rect object. This is a structure representing the coordinates of our component, as well as its dimensions. Finally, the SetLayoutFlags() method is used to take this position into account proportionally: AbsoluteLayout.SetLayoutFlags(this, AbsoluteLayoutFlags.PositionProportional); In short, the Spotlight‚Äôs size will be set in absolute values, but its coordinates will be passed in proportional values. However, these methods can only work on elements contained in an AbsoluteLayout. ‚Äé üêí‚Äé ‚Äé Are we not using Grid after all? Yes, it is! But our Grid TopLayout acts as the main container, while the projectors are added to an intermediate AbsoluteLayout component. Indeed, this component also lets you align elements, but in a much freer way. That‚Äôs why you need coordinates! So you can easily place the objects wherever you like. ‚Äé Moreover, it is possible to align elements outside the limits of the zone established by AbsoluteLayout. That‚Äôs it for the Spotlight class! Now all we need to do is define an AbsoluteLayout, add a few Spotlight to it, and attach the whole thing to the TopLayout. To do this, we declare a new InitDanceFloor() method in the MusicPlayerView: Filename:MusicPlayerView.cs // Do not forget to add \"using NightClub.Views.Components;\" ! #region Dance Floor void InitDanceFloor() { // We define an intermediate container of type AbsoluteLayout... AbsoluteLayout spotlights = new AbsoluteLayout() { Children = { // ... to which we add a few Spotlight... new Spotlight(Colors.Blue, 200, 0, 0), new Spotlight(Colors.Orange, 150, 0.8, 0.9), new Spotlight(Colors.Pink, 100, 0.9, 0.2), new Spotlight(Colors.Yellow, 120, 0.3, 0.6), } }; // ... and it's all added to the main container! TopLayout.Add(spotlights); } #endregion Then call this method from the View constructor: Filename:MusicPlayerView.cs public MusicPlayerView() { ... InitDanceFloor(); ... } And finally, for this to work, we need to modify the declaration of TopLayout so that it is no longer immutable: Filename:MusicPlayerView.cs Grid TopLayout = new Grid // The ‚Äú=\u003e‚Äù sign has been replaced with ‚Äú","date":"16/01/2024","objectID":"/en/posts/tutos/my-first-app/15-add-animations-to-an-app/:1:0","tags":["Animation","AbsoluteLayout","Round Effect","Brush"],"title":"Create animations in .NET MAUI for a disco atmosphere","uri":"/en/posts/tutos/my-first-app/15-add-animations-to-an-app/"},{"categories":null,"content":"Enhance visuals for greater realism Until now, all we had to do to paint our visual elements was define a color and the magic would happen in the background. Now, however, there are different coloring techniques that can help us achieve a better visual effect: these are called Brushes. For example, we‚Äôll use RadialGradientBrush to apply a nice radial gradient: Filename:Spotlight.cs public Spotlight(Color color, double size, double positionX, double positionY) { // You can now remove the following line: // this.Color = color; Background = new RadialGradientBrush() { GradientStops = new GradientStopCollection { new GradientStop(color, 0), new GradientStop(Colors.Transparent, 1) } }; ... } In concrete terms, we defined a color gradient from the center of the Spotlight to its edges, using two GradientStops: With the instruction GradientStop(color, 0), the center of the Spotlight (0) is first painted with the requested color (color), Next, GradientStop(Colors.Transparent, 1) is used to gradient towards total transparency (Colors.Transparent) at the Spotlight circumference (1). And thanks to the transparency effect, the black background of the TopLayout will appear. ‚Äé No need for the Color property when using the Background property. Next, we‚Äôre going to use Shadow to give a shiny effect: Filename:Spotlight.cs public Spotlight(Color color, double size, double positionX, double positionY) { ... Shadow = new Shadow() { Radius = (float)(size / 2), Brush = new SolidColorBrush(color) }; ... } This code adds a shadow to the Spotlight that is both colored and blurred: It‚Äôs the Radius property that gives this blurred effect, accentuated according to the object‚Äôs size (size / 2), And the shadow is painted with a full color, thanks to the use of SolidColorBrush. Let‚Äôs see again how it looks like: The spotlights are much more realistic! Better there, isn‚Äôt it? üôÇ But these new adjustments contrast a little bit with the BottomLayout, and the Grid should be made less opaque. ‚Äé üêí‚Äé ‚Äé Can‚Äôt you play with the Opacity property? Not really‚Ä¶ otherwise the entire content of the BottomLayout would become transparent! This means we wouldn‚Äôt be able to see our controls, and that wouldn‚Äôt be practical. Instead, we‚Äôll change its color by adding a little transparency, like this: Filename:MusicPlayerView.cs Grid BottomLayout =\u003e new Grid { BackgroundColor = Colors.DimGray.WithAlpha(0.4f), ... }; See, it‚Äôs still the same color! But it now contains 40% transparency, thanks to the WithAlpha() method. And here‚Äôs the result! Transparency makes it more modern! Well, it‚Äôs all very nice, but still very static. What we need is a little madness, some animation! Just in time, we‚Äôll be discovering animations in .NET MAUI right after this. ","date":"16/01/2024","objectID":"/en/posts/tutos/my-first-app/15-add-animations-to-an-app/:2:0","tags":["Animation","AbsoluteLayout","Round Effect","Brush"],"title":"Create animations in .NET MAUI for a disco atmosphere","uri":"/en/posts/tutos/my-first-app/15-add-animations-to-an-app/"},{"categories":null,"content":"It‚Äôs the time to Disco In this part, we‚Äôll look at how to bring a little dynamism to our spotlights. After all, what we want is a real nightclub atmosphere üôÇ To do this, we‚Äôre going to modify the Spotlight class to make our projectors blink, a bit like flashbulbs, you know? We‚Äôll use a fade animation to gradually make our spotlights appear and disappear on the screen. Let‚Äôs get to work! Start by applying the following modifications: Filename:Spotlight.cs public class Spotlight : BoxView { // We've added 3 new properties... const string AnimationName = \"fadeInAndOut\"; uint AnimationLength { get; set; } Animation SpotlightAnimation { get; set; } // ... and one more parameter to the constructor! public Spotlight(Color color, double size, double positionX, double positionY, uint animationLength = 0) { ... // Finally, the animation time is persisted. this.AnimationLength = animationLength; SetAnimation(); } } First of all, we‚Äôve added a new parameter: animationLength. This defines the length of time (in milliseconds) over which the animation will repeat in a loop. We‚Äôve also taken the opportunity to add a few properties that we‚Äôll be using a little later. Among them is SpotlightAnimation, which contains the definition of the Spotlight animation. Precisely, let‚Äôs add a new method to the Spotlight class to define this animation: Filename:Spotlight.cs void SetAnimation() { if (AnimationLength \u003c= 0) return; var fadeInAnimation = new Animation(v =\u003e Opacity = v, start: 0, end: 1, Easing.CubicOut); var fadeOutAnimation = new Animation(v =\u003e Opacity = v, start: 1, end: 0, Easing.CubicOut); SpotlightAnimation = new Animation { { 0, 0.5, fadeInAnimation }, // In action from 0 to 50% of the execution { 0.5, 1, fadeOutAnimation } // In action from 50 to 100% of the execution }; StartAnimation(); } It‚Äôs a bit technical, but not complicated. I‚Äôll explain! ü§ì The SpotlightAnimation property is a custom animation composed of two underlying animations: A fade-in that gradually changes the Spotlight‚Äôs opacity from 0 to 1, throughout the first half of the animation: { 0, 0.5, fadeInAnimation }, And an outgoing fade, which does exactly the opposite throughout the second half of the animation: { 0.5, 1, fadeOutAnimation }. As for the Easing.CubicOut option, it‚Äôs just a stylish effect to make the animation slow down quickly after it has started. ‚Äé Going further with the various types of animation rendering. That‚Äôs it for the SetAnimation() method‚Ä¶ well, almost! ‚Äé üêí‚Äé ‚Äé Hey, hey, hey! What did we miss? üôà At the end of the method, you‚Äôll see the StartAnimation(); instruction. This will trigger execution of the freshly initialized animation. Here‚Äôs its definition: Filename:Spotlight.cs public void StartAnimation() { if (AnimationLength \u003c= 0) return; SpotlightAnimation.Commit(this, AnimationName, length: AnimationLength, repeat: () =\u003e true); } As you can see, it‚Äôs the Commit() method that launches the animation defined above. Breaking down the parameters passed to Commit, we have: An animation name (AnimationName), set arbitrarily by a constant, An execution length (AnimationLength), passed as a parameter to the Spotlight class constructor, And a repeat mode (repeat: () =\u003e true), to loop the animation indefinitely. Take a moment to assimilate all these new changes! ‚Äé In some cases, animations can be disabled by the system. For example, for accessibility or energy-saving reasons. And when you‚Äôre ready, return to the MusicPlayerView code to modify the InitDanceFloor() method and adapt the Spotlight initialization, like this: Filename:MusicPlayerView.cs AbsoluteLayout spotlights = new AbsoluteLayout() { Children = { // An animation length is defined for each Spotlight new Spotlight(Colors.Blue, 200, 0, 0, 2000), new Spotlight(Colors.Orange, 150, 0.8, 0.9, 1000), new Spotlight(Colors.Pink, 100, 0.9, 0.2, 500), new Spotlight(Colors.Yellow, 120, 0.3, 0.6, 1500), } }; We simply defined a different animation time to make each of our spotlights unique. Quickly rebuild ","date":"16/01/2024","objectID":"/en/posts/tutos/my-first-app/15-add-animations-to-an-app/:3:0","tags":["Animation","AbsoluteLayout","Round Effect","Brush"],"title":"Create animations in .NET MAUI for a disco atmosphere","uri":"/en/posts/tutos/my-first-app/15-add-animations-to-an-app/"},{"categories":null,"content":"The final touch Hang in there! We‚Äôre going to tackle a few more small improvements and that‚Äôll be the end of this tutorial. Let‚Äôs start by looking at how to stop a running animation. To do this, go back to the Spotlight class and add the new following method: Filename:Spotlight.cs public void StopAnimation() { this.AbortAnimation(AnimationName); this.Opacity = 0; } All we need to do is call the AbortAnimation() method to cancel a running animation, using its name (AnimationName). Remember, this is one of the parameters we passed to the Commit() method! ‚Äé You can‚Äôt predict the state in which animation will stop. So we set the Spotlight opacity to 0 to hide it completely when the music stops playing. Next, let‚Äôs see how to play the animation depending on whether the music is playing or not. To do this, we need to establish a connection between the Spotlight and the MediaElement. Let‚Äôs begin by modifying the Spotlight class: Filename:Spotlight.cs // Please note that 3 new using are required! using CommunityToolkit.Maui.Core.Primitives; using CommunityToolkit.Maui.Markup; using CommunityToolkit.Maui.Views; ... public class Spotlight : BoxView { ... // A new parameter is added to the constructor... public Spotlight(Color color, double size, double positionX, double positionY, uint animationLength = 0, MediaElement bindableMediaElement = null) { ... // ... for animation setup purposes. SetAnimation(bindableMediaElement); } ... } To avoid code repetition, we‚Äôve added a new bindableMediaElement parameter of type MediaElement. In fact, we‚Äôre going to pass our MusicPlayer component to the initialization of each Spotlight for animation setup purposes. We‚Äôll now modify the SetAnimation() method to apply the new animation execution conditions: Filename:Spotlight.cs void SetAnimation(MediaElement mediaElement = null) { ... if(mediaElement != null) { this.Bind( source: mediaElement, path: nameof(mediaElement.CurrentState), convert: (MediaElementState currentState) =\u003e { if (currentState != MediaElementState.Playing) StopAnimation(); else StartAnimation(); return true; }); } } Now that we have access to our MediaElement, we‚Äôve applied the Data Binding technique to the CurrentState property so that the animation is : Started when music is playing, Or stopped if it‚Äôs paused. And as always, don‚Äôt forget to adapt Spotlight initialization in the InitDanceFloor() method, like this: Filename:MusicPlayerView.cs AbsoluteLayout spotlights = new AbsoluteLayout() { Children = { // We now pass the MusicPlayer to each Spotlight new Spotlight(Colors.Blue, 200, 0, 0, 2000, MusicPlayer), new Spotlight(Colors.Orange, 150, 0.8, 0.9, 1000, MusicPlayer), new Spotlight(Colors.Pink, 100, 0.9, 0.2, 500, MusicPlayer), new Spotlight(Colors.Yellow, 120, 0.3, 0.6, 1500, MusicPlayer), } }; Here, we‚Äôve simply switched the MusicPlayer to Spotlight initialization, so that each projector can be switched on and off as the music plays. I trust you‚Äôll check that it‚Äôs working properly before we add the final touches. Yes, our dance floor is still short of passionate dancers! Start by downloading the following two new images in .svg format: The first shows large speakers (speakers.svg), And the other, our famous dancers (joyful_dancers.svg). Dance_Floor_-_Images.zip ./files/Dance_Floor_-_Images.zip Once you‚Äôve unpacked the .zip file, add the images to the Resources/Images folder. ‚Äé If any doubts about how to do this, you can refer to this chapter. Finally, add them to the TopLayout as follows: void InitDanceFloor() { ... TopLayout.Add(spotlights); // .NET MAUI converts SVG files to PNG format. TopLayout.Add(new Image() { Source = \"speakers.png\" }.Bottom()); TopLayout.Add(new Image() { Source = \"joyful_dancers.png\" }.Bottom()); } With the Add() method, we add all our objects one after the other to the single cell that makes up the Grid TopLayout. ‚Äé üêí‚Äé ‚Äé A single slot for 3 objects? But how is that possible? Indeed, if you recall the documentation, the Grid has only one row and one ","date":"16/01/2024","objectID":"/en/posts/tutos/my-first-app/15-add-animations-to-an-app/:3:1","tags":["Animation","AbsoluteLayout","Round Effect","Brush"],"title":"Create animations in .NET MAUI for a disco atmosphere","uri":"/en/posts/tutos/my-first-app/15-add-animations-to-an-app/"},{"categories":null,"content":"Conclusion This post brings us to the end of this course, a total of 2h30 of reading which I hope you‚Äôve enjoyed and will inspire you with lots of ideas. And thank you for your loyalty if you‚Äôve taken the whole course! If you have a moment, drop me a comment or send me an e-mail to let me know what you thought about it. By the way, if you want to have fun going further (and I heartily encourage you to! üôÇ ), you can try generating the projectors completely randomly. You can always compare your solution with mine by looking directly at the final project code! ‚Äé To get the project containing all the steps applied so far in this tutorial, refer to the project setup guide and start from the example in the ‚ÄúFull Solution‚Äù folder. And if you want even more, here are a few other ideas for improvement: Align the brightness of the spotlights with the volume of the music, Adjust their animation speed to the tempo of the songs, Regenerate all the spotlights when you change songs, etc. I‚Äôd love to see your creativity at work, so if you can, share a link to your GitHub repo with me in the comments! And that‚Äôs all for today. See you soon for new tutorials! üëã More articles in the series: My very first app with .NET MAUI Setup the project .NET MAUI First run of the app .NET MAUI MVVM, for a successful application Navigate to a new page in .NET MAUI Arrange elements on a .NET MAUI page Music player display - Time tracker Music player display - Media playback Music player display - Volume Play music in .NET MAUI with MediaElement Control the playback position with MediaElement Control the volume with MediaElement Download an audio file in .NET MAUI Listen to a playlist with MediaElement Create animations in .NET MAUI for a disco atmosphere ","date":"16/01/2024","objectID":"/en/posts/tutos/my-first-app/15-add-animations-to-an-app/:4:0","tags":["Animation","AbsoluteLayout","Round Effect","Brush"],"title":"Create animations in .NET MAUI for a disco atmosphere","uri":"/en/posts/tutos/my-first-app/15-add-animations-to-an-app/"},{"categories":null,"content":"The application is great, but it would be nicer if you could change the song. Well that‚Äôs ideal because today we're integrating a music playlist!","date":"26/12/2023","objectID":"/en/posts/tutos/my-first-app/14-skip-next-or-previous-with-mediaelement/","tags":["MediaElement","MVVM","ImageButton","Data Binding"],"title":"Listen to a playlist with MediaElement","uri":"/en/posts/tutos/my-first-app/14-skip-next-or-previous-with-mediaelement/"},{"categories":null,"content":" ‚Äé To ease your read, please resume from this chapter where we have set up the MediaElement. Last time, we looked at how to download music directly from the app. But it‚Äôs been the same music from the start! Wouldn‚Äôt the app be much nicer if you could listen to more songs? Well that‚Äôs ideal because today we‚Äôre integrating a music playlist! ","date":"26/12/2023","objectID":"/en/posts/tutos/my-first-app/14-skip-next-or-previous-with-mediaelement/:0:0","tags":["MediaElement","MVVM","ImageButton","Data Binding"],"title":"Listen to a playlist with MediaElement","uri":"/en/posts/tutos/my-first-app/14-skip-next-or-previous-with-mediaelement/"},{"categories":null,"content":"Playlist creation To do this, let‚Äôs define the list of songs available in the application as follows: Filename:MusicPlayerViewModel.cs static readonly MusicTrack[] playlist = new MusicTrack[] { new MusicTrack() { AudioURL = \"https://prod-1.storage.jamendo.com/?trackid=1890762\u0026format=mp31\u0026from=b5bSbOTAT1kXawaT8EV9IA%3D%3D%7CGcDX%2BeejT3P%2F0CfPwtSyYA%3D%3D\", AudioDownloadURL = \"https://prod-1.storage.jamendo.com/download/track/1890762/mp32/\", Author = \"Alfonso Lugo\", Title = \"Baila\", }, new MusicTrack() { AudioURL = \"https://prod-1.storage.jamendo.com/?trackid=619144\u0026format=mp31\u0026from=%2BJv5PkdWd%2BvsByBkyrboJA%3D%3D%7Co%2FKvdc5gcd6iQLjnqacjYA%3D%3D\", AudioDownloadURL = \"https://prod-1.storage.jamendo.com/download/track/619144/mp32/\", Author = \"Pablo G√≥mez\", Title = \"Devastation (remastered)\", }, new MusicTrack() { AudioURL = \"https://prod-1.storage.jamendo.com/?trackid=1399476\u0026format=mp31\u0026from=LQFaB9%2FDVAE6QaK%2BsXtl%2FA%3D%3D%7CouuozaATpW3zoEvVwprgRw%3D%3D\", AudioDownloadURL = \"https://prod-1.storage.jamendo.com/download/track/1399476/mp32/\", Author = \"Singularity\", Title = \"How many times\", }, new MusicTrack() { AudioURL = \"https://prod-1.storage.jamendo.com/?trackid=946449\u0026format=mp31\u0026from=blTB635bS8UiDVL%2FzZC2Xw%3D%3D%7CQO1Fj6AWgTrjIu7LELLCLA%3D%3D\", AudioDownloadURL = \"https://prod-1.storage.jamendo.com/download/track/946449/mp32/\", Author = \"Julien Gathy\", Title = \"Octave (HQ)\", }, new MusicTrack() { AudioURL = \"https://prod-1.storage.jamendo.com/?trackid=1026396\u0026format=mp31\u0026from=nWYOo%2FxFcd1oJBINLSQAXg%3D%3D%7CI8xQbXqZfz2bfgmtqxmqyA%3D%3D\", AudioDownloadURL = \"https://prod-1.storage.jamendo.com/download/track/1026396/mp32/\", Author = \"dj alike\", Title = \"dj alike (new trance edition)\", } }; There‚Äôs nothing extraordinary here, apart from the usefulness of our Model! ‚Äé üêí‚Äé ‚Äé Ow yeah, 5 songs, this is groove!! üôä Yeah, laugh at me! üòÇ The number of songs is limited to 5 for the purposes of this course, but imagine if we allowed the user to explore titles from all over the world! ‚Äé I might think about a sequel to this series, perhaps in video! But let‚Äôs get back to business. The logic we‚Äôre going to implement consists in moving from one track to another in our playlist. It‚Äôs a bit like a pointer sliding over the cells of an array of MusicTrack elements to define the next piece of music to be played. To do this, we‚Äôll enhance the logic around the CurrentTrack property introduced in the previous chapter with the following code: Filename:MusicPlayerViewModel.cs #region Properties ... // A new property to define the new \"pointer\" position [ObservableProperty] [NotifyPropertyChangedFor(nameof(CurrentTrack))] int currentTrackPosition = 0; // Be careful to rename property with \"C\" uppercase public MusicTrack CurrentTrack =\u003e playlist[CurrentTrackPosition]; #endregion public MusicPlayerViewModel() { // We don't need this code anymore, remove this part! // CurrentTrack = new MusicTrack() // { // ... // }; } We‚Äôve added a new property called currentTrackPosition, which corresponds in some way to our pointer mentioned above. It will define the position of the song to be played in the playlist, thanks to this new attribute: NotifyPropertyChangedFor(). In concrete terms, each time the value of the currentTrackPosition property changes, this attribute will trigger a notification to the View informing that the CurrentTrack property has just been updated. Indeed, the CurrentTrack property has been adapted to return a music track from the playlist at the requested position (playlist[CurrentTrackPosition]). ‚Äé By the way, we no longer need to initialize CurrentTrack from the MusicPlayerViewModel constructor! So you can delete this bit of code. Time to relaunch the app! ‚Äé üêí‚Äé ‚Äé But I haven‚Äôt seen any changes, is that normal? Yes, it‚Äôs the same music again! And that‚Äôs perfectly normal. Have you noticed the initial value of the currentTrackPosition property? It‚Äôs equal to 0, which corresponds to the first position in the playlist array, which is no","date":"26/12/2023","objectID":"/en/posts/tutos/my-first-app/14-skip-next-or-previous-with-mediaelement/:1:0","tags":["MediaElement","MVVM","ImageButton","Data Binding"],"title":"Listen to a playlist with MediaElement","uri":"/en/posts/tutos/my-first-app/14-skip-next-or-previous-with-mediaelement/"},{"categories":null,"content":"Binding components Spoiler alert: we‚Äôre now going to tackle the final dummy components of the app! If you remember the chapter on displaying playback controls, we still have 3 ImageButton components to implement: SkipNextButton to skip to the next song, SkipPreviousButton to skip to the previous song, et RepeatOnceButton to replay the music track (once only). Moving on to the next song is easy. Start by adding the following command to the ViewModel: Filename:MusicPlayerViewModel.cs #region Commands [RelayCommand] void GoToNextTrack() { if (CurrentTrackPosition + 1 \u003c playlist.Length) CurrentTrackPosition++; else CurrentTrackPosition = 0; } ... #endregion Then associate the new command with the SkipNextButton from the View : Filename:MusicPlayerView.cs #region Media Control Panel ... ImageButton SkipNextButton = new ImageButton // The ‚Äú=\u003e‚Äù sign has been replaced with ‚Äú=‚Äù { HeightRequest = 75, WidthRequest = 75, Source = \"skip_next.png\" } .BindCommand(\"GoToNextTrackCommand\"); // and here the associated command ... #endregion The behavior defined in the GoToNextTrack() method consists of simply moving the pointer‚Äôs position one step forward on the array. Of course, when last item of the array is reached, we return to the beginning of the playlist. Let‚Äôs try it out! Great, we can finally listen to some more songs! ‚Äé üêí‚Äé ‚Äé That was fast! And to go back in the playlist, we just do the reverse? Almost! To get back to the previous song, we‚Äôre going to implement a similar logic, albeit with one condition. First, I‚Äôd like the song to restart before switching to the previous song. I‚Äôll explain how. For now, add the following command to the ViewModel: Filename:MusicPlayerViewModel.cs #region Commands [RelayCommand] void GoToPreviousTrack(double elapsedTimeForCurrentTrack) { if (elapsedTimeForCurrentTrack \u003c 2) { // Move one step backward in the playlist if (CurrentTrackPosition - 1 \u003e= 0) CurrentTrackPosition--; else CurrentTrackPosition = playlist.Length - 1; } else { // Or reset the current track by forcing notification to the View OnPropertyChanged(\"CurrentTrack\"); } } ... #endregion The behavior defined in the GoToPreviousTrack() method consists of simply moving the pointer‚Äôs position one step backward on the array. Of course, when the first cell of the array is reached, we switch to the last song in the playlist. But did you notice the if condition? You can only return to the previous song if the current song has been playing for less than 2 seconds. ‚Äé üêí‚Äé ‚Äé But how do we get this information? Up to now, we‚Äôve only seen commands without parameters. But this time, we‚Äôre going to share the TimeTracker.Value as a parameter to the command to be associated with the SkipPreviousButton. To do this, apply the following changes to the View: Filename:MusicPlayerView.cs #region Media Control Panel ... ImageButton SkipPreviousButton = new ImageButton // The ‚Äú=\u003e‚Äù sign has been replaced with ‚Äú=‚Äù { HeightRequest = 75, WidthRequest = 75, Source = \"skip_previous.png\" } .BindCommand(\"GoToPreviousTrackCommand\", // and here is the associated command, with parameter! parameterPath: nameof(TimeTracker.Value), parameterSource: TimeTracker); ... #endregion We still use BindCommand(), but we use two additional parameters for the purposes of our GoToPreviousTrack() method: The information to be passed as a parameter (parameterPath) is the TimeTracker.Value corresponding to the elapsed playback time, And the source of this property (parameterSource) is, of course, the TimeTracker. Finally, if you need to restart the song, you can use the OnPropertyChanged() method. This will trigger a notification to the View informing that the CurrentTrack property has just been updated (even though its value hasn‚Äôt changed at all!). And that‚Äôs it! Let‚Äôs see what it looks like: The first click restarts the song. Subsequent clicks return to previous songs. Well, that‚Äôs it! Now we just need to implement a button to repeat the song currently playing. ","date":"26/12/2023","objectID":"/en/posts/tutos/my-first-app/14-skip-next-or-previous-with-mediaelement/:2:0","tags":["MediaElement","MVVM","ImageButton","Data Binding"],"title":"Listen to a playlist with MediaElement","uri":"/en/posts/tutos/my-first-app/14-skip-next-or-previous-with-mediaelement/"},{"categories":null,"content":"Replay music once again This is the home stretch of the series, so hang in there! To enable a song to be repeated, we must first add the following property to the ViewModel: Filename:MusicPlayerViewModel.cs #region Properties ... [ObservableProperty] bool mustRepeatCurrentTrackOnce; #endregion This is a classic boolean whose state will be modified via its dedicated command : Filename:MusicPlayerViewModel.cs #region Commands [RelayCommand] void ToggleRepeatOnce() { MustRepeatCurrentTrackOnce = !MustRepeatCurrentTrackOnce; } ... #endregion The idea is that each time the user clicks, we invert the state of the boolean to enable or disable repetition. All that remains is to associate this command with the RepeatOnceButton from the View: Filename:MusicPlayerView.cs #region Media Control Panel ... ImageButton RepeatOnceButton = new ImageButton // The ‚Äú=\u003e‚Äù sign has been replaced with ‚Äú=‚Äù { CornerRadius = 5, HeightRequest = 25, WidthRequest = 25, Source = \"repeat_once.png\", BackgroundColor = Colors.Black, BorderColor = Colors.GreenYellow // We add a colored border to the button } .BindCommand(\"ToggleRepeatOnceCommand\"); // And here is the associated command ... #endregion As you may have noticed, I‚Äôve defined a color for the outline of the RepeatOnceButton with the BorderColor property. This is to improve the visual rendering when the repeat is activated! To do this, we‚Äôll use the MustRepeatCurrentTrackOnce property. Modify the InitMediaControlPanel() method to apply the following changes: Filename:MusicPlayerView.cs void InitMediaControlPanel() { ... RepeatOnceButton.Bind( targetProperty: ImageButton.BorderWidthProperty, path: nameof(MusicPlayerViewModel.MustRepeatCurrentTrackOnce), convert: (bool isEnabled) =\u003e isEnabled ? 2 : 0); } With this code, we play with the thickness of the borders (BorderWidth) of the RepeatOnceButton, depending on whether the repeat option is activated or not. Indeed, by default, the border thickness is negative! There's no risk of seeing a contour with negative thickness! In other words, we won‚Äôt see any borders unless we change the BorderWidth value ourselves. This is why, in the convert, we define a positive value to show a colored contour when MustRepeatCurrentTrackOnce is equal to True. It's easy to see when repetition is active. But tastes and colors are another matter! ‚Äé üêí‚Äé ‚Äé Fine, but it‚Äôs not going to help us get the job done, is it? That‚Äôs right! In fact, we‚Äôll use the MustRepeatCurrentTrackOnce parameter to determine whether to restart the song when it‚Äôs over, or move on to the next song. And this logic will be defined in the ViewModel with this new public method: Filename:MusicPlayerViewModel.cs public void AssessRepeatOrSkip() // Method must be public { if (MustRepeatCurrentTrackOnce) { // Either reset the current track by forcing notification to the View OnPropertyChanged(\"CurrentTrack\"); MustRepeatCurrentTrackOnce = false; } else { // Or move one step forward in the playlist GoToNextTrack(); } } Depending on whether MustRepeatCurrentTrackOnce is set to True or False, we either use again the OnPropertyChanged() technique we saw earlier, or move on to the next song with the GoToNextTrack() method. By the way, we only want to repeat the song once! So don‚Äôt forget to disable repetition by setting the MustRepeatCurrentTrackOnce property to False. Finally, to detect when the song ends, we‚Äôll rely on the MediaEnded event exposed by the MediaElement, as follows: Filename:MusicPlayerView.cs void InitMusicPlayer() { ... MusicPlayer.MediaEnded += MusicPlayer_MediaEnded; } And it‚Äôs when the event is triggered that you‚Äôll ask to repeat the current song or move on to the next one: Filename:MusicPlayerView.cs #region Events ... void MusicPlayer_MediaEnded(object sender, EventArgs e) { (BindingContext as MusicPlayerViewModel).AssessRepeatOrSkip(); } #endregion To do this, we use the MusicPlayerView‚Äôs BindingContext to call the AssessRepeatOrSkip() method we‚Äôve just defined in the MusicPlayerViewModel. It‚Äôs d","date":"26/12/2023","objectID":"/en/posts/tutos/my-first-app/14-skip-next-or-previous-with-mediaelement/:3:0","tags":["MediaElement","MVVM","ImageButton","Data Binding"],"title":"Listen to a playlist with MediaElement","uri":"/en/posts/tutos/my-first-app/14-skip-next-or-previous-with-mediaelement/"},{"categories":null,"content":"Conclusion Well then, do you like the result? You can now enjoy the app and listen to a few songs in a row, at the desired volume, listen to a few passages again, and even download the tracks! üòé ‚Äé To retrieve the project containing all the different steps applied so far in this series, please refer to the project setup guide and resume from the sample located in the folder ‚Äú5 - Music Player‚Äù. But it lacks a bit of animation for a ‚Äúnightclub‚Äù atmosphere‚Ä¶ Yet that was the promise of the beginning! We‚Äôll remedy that in the next post, and it‚Äôll be the last in this series!!! More articles in the series: My very first app with .NET MAUI Setup the project .NET MAUI First run of the app .NET MAUI MVVM, for a successful application Navigate to a new page in .NET MAUI Arrange elements on a .NET MAUI page Music player display - Time tracker Music player display - Media playback Music player display - Volume Play music in .NET MAUI with MediaElement Control the playback position with MediaElement Control the volume with MediaElement Download an audio file in .NET MAUI Listen to a playlist with MediaElement Create animations in .NET MAUI for a disco atmosphere ","date":"26/12/2023","objectID":"/en/posts/tutos/my-first-app/14-skip-next-or-previous-with-mediaelement/:4:0","tags":["MediaElement","MVVM","ImageButton","Data Binding"],"title":"Listen to a playlist with MediaElement","uri":"/en/posts/tutos/my-first-app/14-skip-next-or-previous-with-mediaelement/"},{"categories":null,"content":"Today, we will have a look at how to enable the user to download the music that is currently playing. We have been listening to the same song over and over, I'm sure you have been dreaming of being able to download it from the app! üòÑ","date":"19/12/2023","objectID":"/en/posts/tutos/my-first-app/13-download-audio-file/","tags":["Data Binding","MediaElement","MVVM",".NET Community Toolkit"],"title":"Download an audio file in .NET MAUI","uri":"/en/posts/tutos/my-first-app/13-download-audio-file/"},{"categories":null,"content":" ‚Äé To ease your read, please resume from this chapter where we have set up the MediaElement. Here we go again for a new chapter! It‚Äôs already episode 13 of this series, so I hope it‚Äôs still relatively easy to follow! But you may have questions or comments. If you do, ask me in the comments at the bottom of the article, or e-mail me directly (jeanemmanuel.baillat@gmail.com)! Today, we will have a look at how to enable the user to download the music that is currently playing. We have been listening to the same song over and over, I‚Äôm sure you have been dreaming of being able to download it from the app! üòÑ ","date":"19/12/2023","objectID":"/en/posts/tutos/my-first-app/13-download-audio-file/:0:0","tags":["Data Binding","MediaElement","MVVM",".NET Community Toolkit"],"title":"Download an audio file in .NET MAUI","uri":"/en/posts/tutos/my-first-app/13-download-audio-file/"},{"categories":null,"content":"Adding a new ViewModel First of all, we need to set up a new ViewModel for the MusicPlayerView. To do this, add a new class named MusicPlayerViewModel to the ViewModels folder, and define it with the following code: Filename:MusicPlayerViewModel.cs using CommunityToolkit.Mvvm.ComponentModel; using CommunityToolkit.Mvvm.Input; namespace NightClub.ViewModels; public partial class MusicPlayerViewModel : ObservableObject { #region Properties #endregion public MusicPlayerViewModel() { } #region Commands #endregion } ‚Äé If figuring out this bit of code is difficult for you, then don‚Äôt get discouraged and take some time to read again the chapter on MVVM. Of course, this ViewModel doesn‚Äôt do anything at the moment, but it‚Äôs ready to be associated with its View. So open the file MusicPlayerView.cs and modify it as follows: Filename:MusicPlayerView.cs ... // This using is mandatory to resolve the definition of MusicPlayerViewModel using NightClub.ViewModels; namespace NightClub.Views; public class MusicPlayerView : ContentPage { public MusicPlayerView() { Console.WriteLine(\"[NightClub] MusicPlayerView - Constructor\"); // Here is where the association is happening BindingContext = new MusicPlayerViewModel(); NavigationPage.SetHasNavigationBar(this, false); BackgroundColor = Colors.DimGray; ... } ... } As with the HomeViewModel associated with the HomeView, here we have modified the MusicPlayerView‚Äôs BindingContext to associate it with the new MusicPlayerViewModel. Well, that was quick. Now let‚Äôs see how to structure application data by defining the Model of music tracks! ","date":"19/12/2023","objectID":"/en/posts/tutos/my-first-app/13-download-audio-file/:1:0","tags":["Data Binding","MediaElement","MVVM",".NET Community Toolkit"],"title":"Download an audio file in .NET MAUI","uri":"/en/posts/tutos/my-first-app/13-download-audio-file/"},{"categories":null,"content":"A new class for music tracks Each music track played in the application is defined by a panel of information that we‚Äôll group together in a class called MusicTrack. As you‚Äôll have guessed, this new object is part of our application‚Äôs Model. Start by creating a new folder called Models, then add a new class defined by the following code: Filename:MusicTrack.cs namespace NightClub.Models; public class MusicTrack { public string AudioURL { get; set; } public string AudioDownloadURL { get; set; } public string Title { get; set; } public string Author { get; set; } } For the purposes of this course, 4 string properties are required to contain the following information: The link for streaming audio (AudioURL), The link for downloading audio (AudioDownloadURL), The music track name (Title), And the name of his author (Author). Since it is now possible to manipulate music tracks, we will add a MusicTrack property to the MusicPlayerViewModel to define the song currently playing: Filename:MusicPlayerViewModel.cs ... using NightClub.Models; // This is required to resolve MusicTrack object! namespace NightClub.ViewModels; public partial class MusicPlayerViewModel : ObservableObject { #region Properties [ObservableProperty] MusicTrack currentTrack; #endregion ... } This perfectly fits in with the Model-View-ViewModel (MVVM) breakdown, since we‚Äôve declared it as an [ObservableProperty], which is an annotation provided by the MVVM Toolkit library. This annotation will then generate all the code required to trigger events (generally towards the View) in case of a value change. Indeed, we want to match the information displayed in the View to its associated ViewModel. ‚Äé üêí‚Äé ‚Äé Got it! But how are we going to define this song? For the moment, it‚Äôs easy because our application only supports the playback of a single song. So we‚Äôll simply initialize it from the MusicPlayerViewModel constructor, as follows: Filename:MusicPlayerViewModel.cs public MusicPlayerViewModel() { CurrentTrack = new MusicTrack() { AudioURL = \"https://prod-1.storage.jamendo.com/?trackid=1890762\u0026format=mp31\u0026from=b5bSbOTAT1kXawaT8EV9IA%3D%3D%7CGcDX%2BeejT3P%2F0CfPwtSyYA%3D%3D\", AudioDownloadURL = \"https://prod-1.storage.jamendo.com/download/track/1890762/mp32/\", Author = \"Alfonso Lugo\", Title = \"Baila\", }; } ‚Äé All the information is provided by Jamendo, a website for free \u0026 independent music. But since we‚Äôve defined the music track inside the MusicPlayerViewModel, we now need to rework the MusicPlayerView to reconfigure the MusicPlayer. To do this, we need to modify the InitMusicPlayer() method inside the MusicPlayerView, and apply the Data Binding to the Source property of the MediaElement: Filename:MusicPlayerView.cs ... using NightClub.Models; // This is required to resolve MusicTrack object! namespace NightClub.Views; public class MusicPlayerView : ContentPage { ... #region MusicPlayer MediaElement MusicPlayer = new MediaElement(); // And here's the new definition for that method... void InitMusicPlayer() { MusicPlayer.ShouldAutoPlay = true; // ... with the binding logic on the MusicPlayer. MusicPlayer.Bind( MediaElement.SourceProperty, nameof(MusicPlayerViewModel.CurrentTrack), convert: (MusicTrack musicTrack) =\u003e MediaSource.FromUri(musicTrack.AudioURL) ); } #endregion ... } Remember, the MediaElement‚Äôs Source property is used to define the source of the media to play. And now, the MusicPlayer.Source property is dynamically linked to the CurrentTrack property defined inside the MusicPlayerViewModel. Also in the convert, we must not forget to transform the audio streaming link (musicTrack.AudioURL) with the MediaSource.FromUri() method, to conform to the type of the MediaElement‚Äôs Source property. That‚Äôs it! Relaunch the project and check that everything is working as before. I wouldn‚Äôt want you to be lost in the middle! üòõ Is everything OK? Then let‚Äôs move on quickly to the most interesting part of this chapter: downloading! ","date":"19/12/2023","objectID":"/en/posts/tutos/my-first-app/13-download-audio-file/:2:0","tags":["Data Binding","MediaElement","MVVM",".NET Community Toolkit"],"title":"Download an audio file in .NET MAUI","uri":"/en/posts/tutos/my-first-app/13-download-audio-file/"},{"categories":null,"content":"Download a song track Let‚Äôs continue our journey by implementing the download button. To do this, we‚Äôre going to associate an action triggered by clicking on the DownloadButton‚Ä¶ Filename:MusicPlayerView.cs #region Media Control Panel ... // The ‚Äú=\u003e‚Äù sign has been replaced with ‚Äú=‚Äù ImageButton DownloadButton = new ImageButton { CornerRadius = 5, HeightRequest = 25, WidthRequest = 25, Source = \"download.png\", BackgroundColor = Colors.Black } .BindCommand(\"DownloadCurrentTrackCommand\"); // And here's the command to associate #endregion ‚Ä¶ and whose behavior will be defined inside MusicPlayerViewModel: Filename:MusicPlayerViewModel.cs ... using CommunityToolkit.Maui.Alerts; // This \"using\" is new... using CommunityToolkit.Maui.Storage; // ... and this one as well ! namespace NightClub.ViewModels; public partial class MusicPlayerViewModel : ObservableObject { ... #region Commands [RelayCommand] async Task DownloadCurrentTrack(CancellationToken cancellationToken) { await Toast .Make($\"[TEST] You have successfully downloaded \\\"{CurrentTrack.Title} - {CurrentTrack.Author}\\\"!\") .Show(cancellationToken); } #endregion } Remember the [RelayCommand] annotation? We already used it in the MVVM chapter. It allows our method DownloadCurrentTrack() to be called from the View! And let me stop you right there, the Toast() method has nothing to do with your breakfast üòÑ This method is provided by the .NET MAUI Community Toolkit library, and it can be used as an in-app notification to temporarily display a message on the screen. At this stage, we can already test that our button is working properly: Actually, this message is pretty useful! ‚Äé üêí‚Äé ‚Äé Are you cheating on me? It doesn‚Äôt download anything at all! üòÑ I‚Äôll share the final code with you right after‚Ä¶ patience! ü§ì Just before, I‚Äôd like to bring your attention to the parameter that is required by our new command, the cancellationToken. This is an object of type CancellationToken that keeps a link with the code that initiated the call to the method DownloadCurrentTrack() in the event of a request to cancel its execution. This is powerful for operations that take a little longer, for example if our user decides to cancel the download due to bad network. We‚Äôre not going to implement this feature today, but it would be a great improvement! ‚Äé Going further with management of transaction cancellation requests. Let‚Äôs now move on to the download operation itself, with the full implementation below: Filename:MusicPlayerViewModel.cs #region Commands [RelayCommand] async Task DownloadCurrentTrack(CancellationToken cancellationToken) { // We raise an exception when cancellation is requested cancellationToken.ThrowIfCancellationRequested(); try { // We need an HTTP client to send our request through the network HttpClient client = new HttpClient(); client.MaxResponseContentBufferSize = 100000000; // We can download up to ~100MB of data per file! // We send an HTTP request to the link for downloading audio using var httpResponse = await client.GetAsync( new Uri(CurrentTrack.AudioDownloadURL), cancellationToken); httpResponse.EnsureSuccessStatusCode(); var downloadedImage = await httpResponse.Content.ReadAsStreamAsync(cancellationToken); try { string fileName = $\"{CurrentTrack.Title} - {CurrentTrack.Author}.mp3\"; // The retrieved data is then transferred to a file // Note: we need CommunityToolkit.Maui to be updated to 5.1.0 at least var fileSaveResult = await FileSaver.SaveAsync(fileName, downloadedImage, cancellationToken); fileSaveResult.EnsureSuccess(); await Toast.Make($\"File saved at: {fileSaveResult.FilePath}\").Show(cancellationToken); } catch (Exception ex) { await Toast.Make($\"Cannot save file because: {ex.Message}\").Show(cancellationToken); } } catch (Exception ex) { await Toast.Make($\"Cannot download file because: {ex.Message}\").Show(cancellationToken); } } #endregion This is a big piece of code, but nothing too complicated! Let‚Äôs walkthrough step by step: We first define an HTTP client to enable us to","date":"19/12/2023","objectID":"/en/posts/tutos/my-first-app/13-download-audio-file/:3:0","tags":["Data Binding","MediaElement","MVVM",".NET Community Toolkit"],"title":"Download an audio file in .NET MAUI","uri":"/en/posts/tutos/my-first-app/13-download-audio-file/"},{"categories":null,"content":"Now we are going to implement volume control! As with any good music player, we want our user to be able to turn the volume up or down as desired.","date":"10/12/2023","objectID":"/en/posts/tutos/my-first-app/12-control-volume-with-mediaelement/","tags":["MVVM","Data Binding","MediaElement","Slider"],"title":"Control the volume with MediaElement","uri":"/en/posts/tutos/my-first-app/12-control-volume-with-mediaelement/"},{"categories":null,"content":" ‚Äé To ease your read, please resume from this chapter where we have set up the MediaElement. In the previous post, we saw how to move the playhead with our own Slider control. And I know it was a bit long! Hang on, we are not far from the end of this series üôÇ So today we are going to look at how to implement volume control, also with the help of a Slider. Yes, as with any good music player, we want our user to be able to turn the volume up or down as desired. ","date":"10/12/2023","objectID":"/en/posts/tutos/my-first-app/12-control-volume-with-mediaelement/:0:0","tags":["MVVM","Data Binding","MediaElement","Slider"],"title":"Control the volume with MediaElement","uri":"/en/posts/tutos/my-first-app/12-control-volume-with-mediaelement/"},{"categories":null,"content":"Set the volume level If you remember, in the chapter on volume display, we introduced 2 components: the MuteButton, which is a ImageButton control for muting the sound, and the Slider VolumeTracker, for precise volume control. As usual, let‚Äôs now make them usable with the help of Data Binding, and all this in an initialization method named InitVolumeTracker() : Filename:MusicPlayerView.cs // Every piece of code has always its own region! #region Volume Tracker ... Slider VolumeTracker = new Slider { Minimum = 0, MinimumTrackColor = Colors.Black, Maximum = 100, MaximumTrackColor = Colors.Gray, // We don't need dummy data anymore, you can remove this line of code // Value = 60 }; void InitVolumeTracker() // And here is the new initialization method { VolumeTracker.Bind( Slider.ValueProperty, nameof(MusicPlayer.Volume), source: MusicPlayer, convert: (double mediaElementVolume) =\u003e mediaElementVolume * 100, convertBack: (double sliderValue) =\u003e sliderValue / 100); } #endregion No problems so far? In the end, it‚Äôs very similar to what we have set up for the playhead control! ‚Äé üêí‚Äé ‚Äé Oh yes! But uh‚Ä¶ is convertBack new? Hey, you miss nothing! Concretely, we have associated the position of the cursor on the Slider (VolumeTracker.Value) with the volume level that is exposed by the MediaElement (MusicPlayer.Volume). And if you have read the Slider documentation carefully, it says that the association of the Slider‚Äôs Value property is bidirectional (BindingMode.TwoWay), meaning that: Any change in value from the source component (here, the MusicPlayer) will have an impact on the target component (the VolumeTracker), And vice versa, any new value from the target component (VolumeTracker) will have an impact on the source component (MusicPlayer)! In other words, if the MediaElement‚Äôs volume went down to 0, then the Slider‚Äôs cursor would slide all the way to the left, and if the user moved the cursor all the way to the right, then the MediaElement‚Äôs volume would be set to 1. ‚Äé The convert property acts in the ‚Äúsource ‚Üí target‚Äù direction, while the convertBack property acts in the opposite direction, ‚Äútarget ‚Üí source‚Äù. However, the MediaElement documentation specifies that the Volume property only accepts double values between 0 and 1. This is why, in the convert, we need to multiply the MusicPlayer.Volume value by 100 to define the cursor position on the Slider (VolumeTracker.Value). In reverse, while convertBack, we must divide by 100 the value chosen by the user via the Slider to correctly modify the value of the MediaElement. Finally, all you have to do is calling the InitVolumeTracker() initialization method from the page constructor: Filename:MusicPlayerView.cs ... namespace NightClub.Views; public class MusicPlayerView : ContentPage { public MusicPlayerView() { ... InitVolumeTracker(); // That's it, we are good to go! ... } ... } Now relaunch the project and check that you can modify the volume! ‚Äé üêí‚Äé ‚Äé Already!? Heeey, what about the MuteButton? Sometimes all it takes is a little piece of code to unleash new features! Take the opportunity to check that it‚Äôs working properly, and we will meet up again right afterwards for the rest! ","date":"10/12/2023","objectID":"/en/posts/tutos/my-first-app/12-control-volume-with-mediaelement/:1:0","tags":["MVVM","Data Binding","MediaElement","Slider"],"title":"Control the volume with MediaElement","uri":"/en/posts/tutos/my-first-app/12-control-volume-with-mediaelement/"},{"categories":null,"content":"Mute audio For the MuteButton, it‚Äôs even simpler! It‚Äôs already embedded in the MediaElement with the boolean ShouldMute property. So all we have to do is detect the user‚Äôs click on the button and modify its value. For this, let‚Äôs define first a new event called MuteButton_Clicked()‚Ä¶ Filename:MusicPlayerView.cs #region Events ... void MuteButton_Clicked(object sender, EventArgs e) { MusicPlayer.ShouldMute = !MusicPlayer.ShouldMute; } #endregion ‚Ä¶ which will be initialized from our existing method, in the InitMuteButton(): Filename:MusicPlayerView.cs #region Mute Button Visual States ... void InitMuteButton() { ... MuteButton.Clicked += MuteButton_Clicked; } #endregion This event is pretty simple, isn‚Äôt it? We simply invert the value of the MusicPlayer.ShouldMute property to alternately mute or unmute the sound. But we are not done yet! Because if you ever wanted to try it, here is what it looks like for now: The button works well! But there is something visually incorrect. The audio is muted when the MuteButton is clicked once, and reactivated the next time it is clicked. Not bad at all! However, something is visually disturbing. It gives a strange effect when the sound is muted: The MuteButton icon should have changed to represent the audio as muted, And the VolumeTracker cursor should have slid all the way to the left, for the same reason. Actually, these two controls would have needed to adapt to the volume level‚Ä¶ Do you have any ideas? üòä ‚Äé üêí‚Äé ‚Äé Well, we could just change the volume level ourselves! That‚Äôs right! But have you thought about what happens when the user reactivates the sound? Ideally, the volume should be reset to the level it was before being muted. So we are going to record the volume level when the user clicks on the MuteButton! To do this, we need another variable: Filename:MusicPlayerView.cs #region Properties bool mustResumePlayback; double savedVolumeBeforeGoingMute; // Another variable of double type #endregion The savedVolumeBeforeGoingMute variable must be of double type to match the value contained in the MediaElement‚Äôs Volume property. And now, you only have to modify the MuteButton_Clicked() event like this: Filename:MusicPlayerView.cs #region Events ... void MuteButton_Clicked(object sender, EventArgs e) { if (!MusicPlayer.ShouldMute) { // We must save the current volume before we mute... savedVolumeBeforeGoingMute = MusicPlayer.Volume; MusicPlayer.Volume = 0; } else { // ... and we set it back when we unmute! MusicPlayer.Volume = savedVolumeBeforeGoingMute; } // Obviously here, nothing changes! MusicPlayer.ShouldMute = !MusicPlayer.ShouldMute; } ... #endregion Now, when we detect that the sound is about to be turned off, we store the volume value in the savedVolumeBeforeGoingMute variable, and then change ourselves the value of the MusicPlayer.Volume property to 0. By the way, I wondered why it wasn‚Äôt already integrated into the .NET MAUI Community Toolkit library. So I asked the feature‚Äôs author directly on Github! That‚Äôs why Open Source is fabulous. ‚Äé By reading the answer to my question, you may have realized that there is another way of implementing audio deactivation. Share your experience with me in the comments! So let‚Äôs see now what does it look like with these recent changes: Well now it is clearer when you mute the sound! Great! But we need to cover every conceivable use case‚Ä¶ And that‚Äôs what we are going to look at in the next section. ","date":"10/12/2023","objectID":"/en/posts/tutos/my-first-app/12-control-volume-with-mediaelement/:2:0","tags":["MVVM","Data Binding","MediaElement","Slider"],"title":"Control the volume with MediaElement","uri":"/en/posts/tutos/my-first-app/12-control-volume-with-mediaelement/"},{"categories":null,"content":"A few enhancements We are going to apply a few improvements, as there are still two situations where the behavior of our functionality is problematic. For example, in the first case, the volume cursor remains locked at the far left: No matter how many times you try to unmute, nothing happens! This is completely normal! Although the volume has been reduced to 0, the variable MusicPlayer.ShouldMute has not been set to true after all. Hence technically, the user is not reactivating the sound! ‚Äé Try putting some debugging points in the MuteButton_Clicked() method! In the second unexpected case, the sound simply cannot be reactivated: After you have muted the sound, you cannot unmute by turning up the volume! But then again, there is nothing strange about that. Actually, the root cause is the same as in the previous case! Even though the volume was increased, the variable MusicPlayer.ShouldMute was never set to false. So, once again, the user is not reactivating the sound! ‚Äé üêí‚Äé ‚Äé But then, everything we did implement is bad? No, not at all! Of course, there are dozens of other ways to implement all this (and you are free to give a try!), but in our case, there is only one small remaining part to code. So, what do you think is missing? Here is a hint: it all starts with the change in volume value. And that is only possible when the cursor is moved over the Slider‚Ä¶ So let‚Äôs optimize the current behavior with a new event called VolumeTracker_DragCompleted(): Filename:MusicPlayerView.cs #region Events ... void VolumeTracker_DragCompleted(object sender, EventArgs e) { // WARN: always update the control that is source of the event // through the sender object to not introduce any conflict updates if (sender is Slider volumeTrackerControl) { if (volumeTrackerControl.Value == 0) { // To improve the user experience, we must always turn // back the volume to a positive level when he unmutes savedVolumeBeforeGoingMute = 0.2; MusicPlayer.ShouldMute = true; } else if(MusicPlayer.ShouldMute) { // User can unmute after having moved the cursor // to a positive value MusicPlayer.ShouldMute = false; } } } #endregion And of course, don‚Äôt forget to initialize this event from the right method ‚Ä¶ Filename:MusicPlayerView.cs #region Volume Tracker ... void InitVolumeTracker() { VolumeTracker.DragCompleted += VolumeTracker_DragCompleted; ... } #endregion Relaunch the project, check that everything is working, and above all, enjoy the results of your efforts! I hope you have learned a lot of new things today. In general, take inspiration from what you observe to experiment with new things. And as you go a little further each time, you will get more and more comfortable! See you soon for a new chapter! üôÇ More articles in the series: My very first app with .NET MAUI Setup the project .NET MAUI First run of the app .NET MAUI MVVM, for a successful application Navigate to a new page in .NET MAUI Arrange elements on a .NET MAUI page Music player display - Time tracker Music player display - Media playback Music player display - Volume Play music in .NET MAUI with MediaElement Control the playback position with MediaElement Control the volume with MediaElement Download an audio file in .NET MAUI Listen to a playlist with MediaElement Create animations in .NET MAUI for a disco atmosphere ","date":"10/12/2023","objectID":"/en/posts/tutos/my-first-app/12-control-volume-with-mediaelement/:3:0","tags":["MVVM","Data Binding","MediaElement","Slider"],"title":"Control the volume with MediaElement","uri":"/en/posts/tutos/my-first-app/12-control-volume-with-mediaelement/"},{"categories":null,"content":"Let's continue with the implementation of playhead control! The idea is to be able to move to a specific frame in the track.","date":"01/12/2023","objectID":"/en/posts/tutos/my-first-app/11-control-playback-position-with-mediaelement/","tags":["MVVM","Data Binding","MediaElement","Slider"],"title":"Control the playback position with MediaElement","uri":"/en/posts/tutos/my-first-app/11-control-playback-position-with-mediaelement/"},{"categories":null,"content":" ‚Äé To ease your read, please resume from this chapter where we have set up the MediaElement. In the previous article, we discovered the MediaElement for playing audio files, but with the help of our own controls. Remember the Sliders we set up? They‚Äôre cool, but they‚Äôre useless! üòÑ So today, we are going to implement the playhead control, to allow the user to move to a specific frame in the track. ","date":"01/12/2023","objectID":"/en/posts/tutos/my-first-app/11-control-playback-position-with-mediaelement/:0:0","tags":["MVVM","Data Binding","MediaElement","Slider"],"title":"Control the playback position with MediaElement","uri":"/en/posts/tutos/my-first-app/11-control-playback-position-with-mediaelement/"},{"categories":null,"content":"Binding our components If you remember, in the chapter on timing display, we introduced 3 components: ElapsedTime, a Label for displaying elapsed playback time, TotalTime, also a Label but to display the total duration of the audio track, and finally the Slider TimeTracker, to control the track‚Äôs playback head. Goodbye dummy data! We are now going to bring these components to life with the help of Data Binding. And for this, we will use an initialization method, InitTimeTracker(): Filename:MusicPlayerView.cs #region Time Tracker // Find the region where to add the code below ... void InitTimeTracker() // And here is the init method { TimeTracker.Bind( Slider.ValueProperty, nameof(MusicPlayer.Position), source: MusicPlayer, convert: (TimeSpan currentPosition) =\u003e currentPosition.TotalSeconds); TimeTracker.Bind( Slider.MaximumProperty, nameof(MusicPlayer.Duration), source: MusicPlayer, convert: (TimeSpan duration) =\u003e duration.TotalSeconds); ElapsedTime.Bind( Label.TextProperty, nameof(MusicPlayer.Position), source: MusicPlayer, stringFormat: \"{0:mm\\\\:ss}\"); TotalTime.Bind( Label.TextProperty, nameof(MusicPlayer.Duration), source: MusicPlayer, stringFormat: \"{0:mm\\\\:ss}\"); } #endregion Yes, I know it‚Äôs a bit dense, but cheer up! It‚Äôs all explained below. To get started, we have modified the behaviour of the TimeTracker to associate two properties with it: the current position of the cursor on the Slider, and the maximum value of the cursor (when it‚Äôs all to the right). Let‚Äôs take a closer look at the MediaElement represented by our MusicPlayer component. It has exactly what we need: the real time position of the playback head (MusicPlayer.Position), to be associated with the cursor position on the Slider (TimeTracker.Value), and the total duration of the song (MusicPlayer.Duration), to be associated with the maximum value of the Slider (TimeTracker.Maximum). And now, if you remember, the Slider can only consider values of double type. This is why we need to convert the values obtained from MusicPlayer.Position and MusicPlayer.Duration, from the TimeSpan type to the double type, with the property named TotalSeconds. ‚Äé üêí‚Äé ‚Äé And that mean, users will be able to advance or rewind playback to the nearest second! Exactly ! üôÇ Now let‚Äôs see for the Labels. For the ElapsedTime component, we want it to display how long the song has been playing, also based on the property MusicPlayer.Position. But only in a special way! We want to display the duration in minutes and seconds. To do this, we need to apply the desired text format using the code: {0:mm\\\\:ss}. For the TotalTime component, we want to display the total listening time of the song, based on the property MusicPlayer.Duration. In the same way, we apply the identical text format to display a duration in minutes and seconds. ‚Äé Going further with StringFormat. By the way, don‚Äôt forget to replace the ‚Äú=\u003e‚Äù sign with ‚Äú=‚Äù when declaring each of these components! Otherwise it won‚Äôt work, as the same object will be returned each time you call these variables. You can use this opportunity to remove the dummy values we had defined by default for some properties: Text property for the two Labels, Maximum and Value properties for the Slider. Here is the revised declaration for these 3 components: Filename:MusicPlayerView.cs #region Time Tracker Label ElapsedTime = new Label // The ‚Äú=\u003e‚Äù sign has been replaced with ‚Äú=‚Äù { FontSize = 14, TextColor = Colors.White }.TextCenter(); Slider TimeTracker = new Slider // The ‚Äú=\u003e‚Äù sign has been replaced with ‚Äú=‚Äù { Minimum = 0, MinimumTrackColor = Colors.LightSalmon, MaximumTrackColor = Colors.Black }; Label TotalTime = new Label // The ‚Äú=\u003e‚Äù sign has been replaced with ‚Äú=‚Äù { FontSize = 14, TextColor = Colors.White }.TextCenter(); #endregion Finally, the initialization method for these components must be called from the page constructor: Filename:MusicPlayerView.cs ... namespace NightClub.Views; public class MusicPlayerView : ContentPage { public MusicPlayerView(","date":"01/12/2023","objectID":"/en/posts/tutos/my-first-app/11-control-playback-position-with-mediaelement/:1:0","tags":["MVVM","Data Binding","MediaElement","Slider"],"title":"Control the playback position with MediaElement","uri":"/en/posts/tutos/my-first-app/11-control-playback-position-with-mediaelement/"},{"categories":null,"content":"Move the playhead control To control the playback head, the user must simply drag the Slider cursor from point A to point B. If we break down his gesture, we could say that: The user first puts his finger on the cursor at point A of the Slider, Then he moves the cursor by keeping his finger pressed down, Finally, he releases it at point B of the Slider by lifting his finger from the screen. Now you have read this, did it ring a bell? ‚Äé üêí‚Äé ‚Äé I remember we set up some events to detect user gestures‚Ä¶ right? Well done! Here we will use two events exposed by the Slider in order to: Detect when user starts moving the cursor, And detect when he releases it. Let‚Äôs attach these two events to our TimeTracker using the method InitTimeTracker(): Filename:MusicPlayerView.cs void InitTimeTracker() { ... TimeTracker.DragStarted += TimeTracker_DragStarted; TimeTracker.DragCompleted += TimeTracker_DragCompleted; } ‚Äé We could have used as well the commands provided by the Slider and worked from the ViewModel, but we had already explained here that it was preferable to keep the logic in the View given that the MediaElement is purely a UI component. Now define these new events in their dedicated region with the following code: Filename:MusicPlayerView.cs #region Events ... void TimeTracker_DragStarted(object sender, EventArgs e) { if (MusicPlayer.CurrentState == MediaElementState.Playing) { mustResumePlayback = true; MusicPlayer.Pause(); } } void TimeTracker_DragCompleted(object sender, EventArgs e) { // We will always refer to the object that is the source // of the event through the parameter \"sender\" if (sender is Slider timeTrackerControl) { // Update the position based on where the User finger ended MusicPlayer.SeekTo(TimeSpan.FromSeconds(timeTrackerControl.Value)); if (mustResumePlayback) { // Resume playback if it was playing prior dragging the cursor MusicPlayer.Play(); mustResumePlayback = false; } } } #endregion The first event TimeTracker_DragStarted() corresponds to the moment when the user starts moving the cursor on the Slider. When this happens, playback is paused to prevent the music from continuing to play. Or else, the slider would continue to move on its own! And for a better user experience, the song must resume playback as soon as user has finished his gesture. To achieve this, we must refer to the variable mustResumePlayback to assess if soundtrack must be resumed. ‚Äé üêí‚Äé ‚Äé Where did this variable come from? Never seen it before! üòÑ We will add it right away! In a new dedicated region, at the top of the class: Filename:MusicPlayerView.cs #region Properties bool mustResumePlayback; #endregion For the second event TimeTracker_DragCompleted(), this is the moment when the user has finished moving the cursor on the Slider. When this happens, we need to readjust the playback head of the MusicPlayer accordingly to the new cursor position. To do this, we use the SeekTo() method that is exposed by the MediaElement class, with a time reference as parameter (in TimeSpan format). ‚Äé This will have an immediate effect on the value of the MusicPlayer.Position. Finally, playback will resume immediately afterwards, from the newly selected position. Relaunch the project and make sure you can move forward or backward in the piece! Hop, I just moved to the start of the track! You have just finished implementing a great feature for the user, well done! Next time, we will see how to implement the volume management. See you soon! More articles in the series: My very first app with .NET MAUI Setup the project .NET MAUI First run of the app .NET MAUI MVVM, for a successful application Navigate to a new page in .NET MAUI Arrange elements on a .NET MAUI page Music player display - Time tracker Music player display - Media playback Music player display - Volume Play music in .NET MAUI with MediaElement Control the playback position with MediaElement Control the volume with MediaElement Download an audio file in .NET MAUI Listen to a playlist with MediaEle","date":"01/12/2023","objectID":"/en/posts/tutos/my-first-app/11-control-playback-position-with-mediaelement/:2:0","tags":["MVVM","Data Binding","MediaElement","Slider"],"title":"Control the playback position with MediaElement","uri":"/en/posts/tutos/my-first-app/11-control-playback-position-with-mediaelement/"},{"categories":null,"content":"Our application is taking shape! But it's only visual for now... In this chapter we will learn how to play music from the application!","date":"18/09/2023","objectID":"/en/posts/tutos/my-first-app/10-play-music-with-mediaelement/","tags":["MediaElement",".NET Community Toolkit","MVVM","Data Binding","ImageButton"],"title":"Play music in .NET MAUI with MediaElement","uri":"/en/posts/tutos/my-first-app/10-play-music-with-mediaelement/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied so far in this tutorial. To do so, refer to the project setup guide and resume from the sample located in the folder ‚Äú4 - All Media Controls‚Äù. Before starting this new chapter, I wanted to congratulate you on all the progress you‚Äôve made! Now that we‚Äôre well advanced on the visual side, we can develop the core of the application and make it a little more functional. And if there‚Äôs one feature to think about first, it‚Äôs playing music! ","date":"18/09/2023","objectID":"/en/posts/tutos/my-first-app/10-play-music-with-mediaelement/:0:0","tags":["MediaElement",".NET Community Toolkit","MVVM","Data Binding","ImageButton"],"title":"Play music in .NET MAUI with MediaElement","uri":"/en/posts/tutos/my-first-app/10-play-music-with-mediaelement/"},{"categories":null,"content":"The MediaElement In the mobile world, media handling is completely different from a system to another. Fortunately, Microsoft has made life easier for us with its Community Toolkit, which precisely offers the right thing for playing audio files from any platform: the MediaElement! According to the documentation, this component is supplied in a dedicated NuGet package. To install this dependency, open the NuGet package manager and search for the library named CommunityToolkit.Maui.MediaElement. Once you found it, add the latest version to the project and accept all associated licenses: ‚Äé A ReadMe.txt file opens automatically in Visual Studio. It provides additional instructions that we will apply when using the MediaElement. Now that the library has been added to the project, one last step remains. The MediaElement component must be initialized at application startup in the MauiProgram.cs file. Open this file and modify the CreateMauiApp() method as follows: Filename:MauiProgram.cs public static MauiApp CreateMauiApp() { Console.WriteLine(\"[NightClub] MauiProgram - CreateMauiApp\"); var builder = MauiApp.CreateBuilder() .UseMauiCommunityToolkit() .UseMauiCommunityToolkitMarkup() // You must add the line below: .UseMauiCommunityToolkitMediaElement() .UseMauiApp\u003cApp\u003e(); return builder.Build(); } ‚Äé üêí‚Äé ‚Äé But what exactly is this UseMauiCommunityToolkitMediaElement() method doing? Good reflex! When manipulating new snippets of code, it‚Äôs always best to understand what happens behind. And in this case, the code is open-source and can be viewed here. Unsurprisingly, the sole purpose of the UseMauiCommunityToolkitMediaElement() method is to make the MediaElement available to our application. In a nutshell, this consists of specifying which classes implement its behavior, for each of the targeted platforms. ‚Äé For more information, please consult the documentation on custom controls. And now we can listen to music! ","date":"18/09/2023","objectID":"/en/posts/tutos/my-first-app/10-play-music-with-mediaelement/:1:0","tags":["MediaElement",".NET Community Toolkit","MVVM","Data Binding","ImageButton"],"title":"Play music in .NET MAUI with MediaElement","uri":"/en/posts/tutos/my-first-app/10-play-music-with-mediaelement/"},{"categories":null,"content":"Make some noise! Let‚Äôs now look at how to define an instance of the MediaElement in the MusicPlayerView. ‚Äé üêí‚Äé ‚Äé But shouldn‚Äôt we treat the MediaElement as a service and add it to the ViewModel? Excellent point! Indeed, in the chapter on MVVM, we presented the View as the layer corresponding to the user interface. So, logically, you might think that media playback only takes place in the ViewModel! But once you‚Äôve read the documentation, you‚Äôll see that the MediaElement provides the basic visual controls for manipulating media according to the target platform. And even though we won‚Äôt use them (since we‚Äôre creating our own controls), the MediaElement is indeed an element of the user interface! And to respect the MVVM breakdown, I prefer to define an instance of the MediaElement in the MusicPlayerView. ‚Äé It‚Äôs also possible to accomplish the same thing by placing the MediaElement in the ViewModel instead of the View, but this is likely to make your project maintenance more complex. Open the MusicPlayerView.cs file, then define a new MediaElement property in the controls area, and a method InitMusicPlayer() to initialize it: Filename:MusicPlayerView.cs #region Controls ... #region MusicPlayer // Why not another region! MediaElement MusicPlayer = new MediaElement(); void InitMusicPlayer() { MusicPlayer.ShouldAutoPlay = true; string trackURL = \"https://prod-1.storage.jamendo.com/?trackid=1890762\u0026format=mp31\u0026from=b5bSbOTAT1kXawaT8EV9IA%3D%3D%7CGcDX%2BeejT3P%2F0CfPwtSyYA%3D%3D\"; MusicPlayer.Source = MediaSource.FromUri(trackURL); } #endregion ... #endregion With the ShouldAutoPlay parameter, we configure our new control to automatically play the next track, as soon as it‚Äôs defined. After all, our buttons remain dummy controls, and we need to hear some music to verify MediaElement is working! ‚Äé üêí‚Äé ‚Äé And is this music from audio streaming? That‚Äôs right! I grabbed a few songs from Jamendo for our application, a free website for music produced by independent artists. As you may have noticed, we‚Äôve defined a song to be played by default through the trackURL variable. Indeed, this URL is then declared as a Source of media for the MediaElement, with the help of the MediaSource.FromUri() method. Now back to our page constructor. First, we need to initialize the MediaPlayer with the method called InitMusicPlayer() that we‚Äôve just introduced. Finally, we also need to add this component as an element of the view to make it available. Otherwise, it won‚Äôt be detected by the page and it won‚Äôt work! This is how the MusicPlayerView constructor now looks: Filename:MusicPlayerView.cs using CommunityToolkit.Maui.Views; // You must add this using! ... namespace NightClub.Views; public class MusicPlayerView : ContentPage { public MusicPlayerView() { Console.WriteLine(\"[NightClub] MusicPlayerView - Constructor\"); NavigationPage.SetHasNavigationBar(this, false); BackgroundColor = Colors.DimGray; InitMusicPlayer(); // Control is initialized with its own method InitMuteButton(); Content = new Grid { RowDefinitions = Rows.Define( Stars(60), Stars(40)), RowSpacing = 0, Children = { MusicPlayer, // Then we add the control to the page content! TopLayout.Row(0), BottomLayout.Row(1) } }; } ... } ‚Äé There‚Äôs no need to specify where the element will be defined in the grid. The MusicPlayer will remain invisible to the user anyway! Why not give it a try? First, take the time to adjust the volume on your device so that it‚Äôs neither too loud nor too soft. Then relaunch the project to start the app. ‚Äé You must close the application or stop debugging the project in Visual Studio to stop the music! So, are you happy to finally hear some music?¬†After so much effort, it‚Äôs well deserved! üôÇ But let‚Äôs take the opportunity to bring that play button to life. ","date":"18/09/2023","objectID":"/en/posts/tutos/my-first-app/10-play-music-with-mediaelement/:2:0","tags":["MediaElement",".NET Community Toolkit","MVVM","Data Binding","ImageButton"],"title":"Play music in .NET MAUI with MediaElement","uri":"/en/posts/tutos/my-first-app/10-play-music-with-mediaelement/"},{"categories":null,"content":"Control media playback Now that we‚Äôve checked that media playback works, it would be nice to control it directly with the ‚ÄúPlay‚Äù button! Following the same principle as before, let‚Äôs initialize the PlayButton control via a new method called InitMediaControlPanel(), triggered from the page constructor. Here are the changes to the MusicPlayerView: Filename:MusicPlayerView.cs public class MusicPlayerView : ContentPage { public MusicPlayerView() { ... InitMusicPlayer(); InitMediaControlPanel(); // A new initialization method... InitMuteButton(); ... } ... #region Media Control Panel ... // The ‚Äú=\u003e‚Äù sign has been replaced with ‚Äú=‚Äù ImageButton PlayButton = new ImageButton { CornerRadius = 50, HeightRequest = 100, WidthRequest = 100, BackgroundColor = Colors.Black, Source = \"play.png\" }; void InitMediaControlPanel() // ... which is defined here! { PlayButton.Bind( targetProperty: ImageButton.SourceProperty, source: MusicPlayer, path: nameof(MusicPlayer.CurrentState), convert: (MediaElementState currentState) =\u003e currentState != MediaElementState.Playing ? \"play.png\" : \"pause.png\"); PlayButton.Clicked += PlayButton_Clicked; } ... #endregion } First, we want the icon associated with our central button to change its appearance depending on whether the song is playing (image: pause.png) or not (image: play.png). To achieve this, we apply the Binding technique (cf: MVVM) to the Source property of the PlayButton, which is nothing else than the property used to define the button icon. Here is the logic used to modify the value automatically: We monitor the value changes of the CurrentState property that is attached to the MusicPlayer object, And we modify the PlayButton image according to whether the CurrentState value is equivalent to the play or pause state. ‚Äé Make sure you replace the ‚Äú=\u003e‚Äù sign with ‚Äú=‚Äù when declaring the PlayButton. Indeed, we only want to create one instance of the ImageButton and modify it in the InitMediaControlPanel() method. Then, let‚Äôs define a specific behavior when the user clicks on the PlayButton with the PlayButton_Clicked() method. Here‚Äôs what it does: Filename:MusicPlayerView.cs public class MusicPlayerView : ContentPage { ... #region Events // If you like being organized, you must use regions! protected override void OnAppearing()... protected override void OnDisappearing()... void PlayButton_Clicked(object sender, EventArgs e) { if (MusicPlayer.CurrentState != MediaElementState.Playing) { MusicPlayer.Play(); } else { MusicPlayer.Pause(); } } #endregion } As you can see, this event is pretty straightforward. It detects at each click the current state of the music player, and depending on this, either requests playback or it will put the track on pause. That‚Äôs all for this chapter. Rebuild the project and turn off the music with the pause button! Music plays as soon as the music player page appears, and then you can turn the music off with the pause button. Isn‚Äôt it great to be able to interact with our app? Personally, that‚Äôs my favorite part of mobile app development! It becomes real and this is just the beginning. Next time, we‚Äôll see how to implement volume and the management of playback head. More articles in the series: My very first app with .NET MAUI Setup the project .NET MAUI First run of the app .NET MAUI MVVM, for a successful application Navigate to a new page in .NET MAUI Arrange elements on a .NET MAUI page Music player display - Time tracker Music player display - Media playback Music player display - Volume Play music in .NET MAUI with MediaElement Control the playback position with MediaElement Control the volume with MediaElement Download an audio file in .NET MAUI Listen to a playlist with MediaElement Create animations in .NET MAUI for a disco atmosphere ","date":"18/09/2023","objectID":"/en/posts/tutos/my-first-app/10-play-music-with-mediaelement/:3:0","tags":["MediaElement",".NET Community Toolkit","MVVM","Data Binding","ImageButton"],"title":"Play music in .NET MAUI with MediaElement","uri":"/en/posts/tutos/my-first-app/10-play-music-with-mediaelement/"},{"categories":null,"content":"To validate new features in your application, it is best to test them in an isolated environment. This will prevent any risk of data loss from your users. In this document, you will learn how to set up different environments for your mobile application.","date":"08/06/2023","objectID":"/en/posts/tips/multi-environments-project-configuration/","tags":["Visual Studio","Setup"],"title":"Target multiple environments in .NET MAUI","uri":"/en/posts/tips/multi-environments-project-configuration/"},{"categories":null,"content":"Whether you‚Äôre developing mobile applications, software or websites, it‚Äôs common practice to set up multiple environments for a project. This makes it easy to test new features without risking the data of our users. In this article, I will show you how a .NET MAUI application can target different environments through multiple project configurations. ‚Äé To simplify the reading of this article, we will only focus on iOS \u0026 Android. However, the process is similar for other platforms. ","date":"08/06/2023","objectID":"/en/posts/tips/multi-environments-project-configuration/:0:0","tags":["Visual Studio","Setup"],"title":"Target multiple environments in .NET MAUI","uri":"/en/posts/tips/multi-environments-project-configuration/"},{"categories":null,"content":"Identify all the configurations required for the project First, you need to determine how many different configurations you need based on the number of environments created for your project. However, if you are just starting your project, you may only have one development environment. So here are a few ideas for you: Are you the only one developing this application? Are there any testers in your team? Is your project subject to security or performance criteria? Do you have to present it to the client before its publication? ‚Äé By default, it is important to isolate the production environment from your development environment. For our demonstration, we will refer to the following 3 environments: a ‚ÄúDEV‚Äù configuration for working in a completely isolated manner on one‚Äôs own machine (i.e. ‚Äúlocally‚Äù) and not impacting the activity from other developers in your team, a ‚ÄúTEST‚Äù configuration to validate all developments before publication, and a ‚ÄúPROD‚Äù configuration that represents the final state of the app, once available on the app stores. Alright, it‚Äôs time to get practical! In the next section, we will create these 3 configurations to run our mobile application in 3 distinct environments. ‚Äé I invite you to skip the following part if you have already defined all the necessary configurations for your project in Visual Studio. ","date":"08/06/2023","objectID":"/en/posts/tips/multi-environments-project-configuration/:1:0","tags":["Visual Studio","Setup"],"title":"Target multiple environments in .NET MAUI","uri":"/en/posts/tips/multi-environments-project-configuration/"},{"categories":null,"content":"Create all project configurations in Visual Studio Now that we‚Äôve identified all the targeted environments, let‚Äôs see how to create the different configurations for our application. Start by opening the project configuration file in Visual Studio. How to access the project configuration file? You can access the configuration file by right-clicking on the project in Visual Studio. The project configuration file ends with the extension .csproj and can be edited by any text editor (e.g. Visual Studio Code). It can be found via the file explorer at the root of the project. Once the .csproj file is open, add the following code to the end of the file: Filename:MultiEnvMauiApp.csproj \u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e ... \u003cPropertyGroup\u003e \u003cConfigurations\u003eDEV;TEST;PROD\u003c/Configurations\u003e \u003c/PropertyGroup\u003e \u003c/Project\u003e We‚Äôve just added a parameter which, as its name suggests, defines the 3 new possible project configurations: ‚ÄúDEV‚Äù, ‚ÄúTEST‚Äù and ‚ÄúPROD‚Äù. We can now customize the project configuration for each of the targeted environments. To do this, add the following code to the end of the .csproj file: Filename:MultiEnvMauiApp.csproj \u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e ... \u003cPropertyGroup Condition=\" '$(Configuration)' == 'DEV' \"\u003e \u003c/PropertyGroup\u003e \u003cPropertyGroup Condition=\" '$(Configuration)' == 'TEST' \"\u003e \u003c/PropertyGroup\u003e \u003cPropertyGroup Condition=\" '$(Configuration)' == 'PROD' \"\u003e \u003c/PropertyGroup\u003e \u003c/Project\u003e As you may have noticed, we‚Äôve added a runtime condition to each of these new property groups. This way, Visual Studio is able to apply the right configuration according to the targeted environment. Let‚Äôs take a look at the content itself (to be adapted to your needs): Filename:MultiEnvMauiApp.csproj \u003cPropertyGroup Condition=\" '$(Configuration)' == 'DEV' \"\u003e \u003cDebugSymbols\u003etrue\u003c/DebugSymbols\u003e \u003cOptimize\u003efalse\u003c/Optimize\u003e \u003cMtouchDebug\u003etrue\u003c/MtouchDebug\u003e \u003c/PropertyGroup\u003e \u003cPropertyGroup Condition=\" '$(Configuration)' == 'TEST' \"\u003e \u003cDebugSymbols\u003efalse\u003c/DebugSymbols\u003e \u003cOptimize\u003etrue\u003c/Optimize\u003e \u003c/PropertyGroup\u003e \u003cPropertyGroup Condition=\" '$(Configuration)' == 'PROD' \"\u003e \u003cDebugSymbols\u003efalse\u003c/DebugSymbols\u003e \u003cOptimize\u003etrue\u003c/Optimize\u003e \u003c/PropertyGroup\u003e In our case, we want to be able to debug the app when it‚Äôs running in ‚ÄúDEV‚Äù, but not when it‚Äôs running in ‚ÄúTEST‚Äù or ‚ÄúPROD‚Äù. We therefore use the DebugSymbols parameter to enable application debugging, while the Optimize parameter optimizes app performance and weight. ‚Äé Due to a problem known to the Visual Studio teams, at the time of writing this article, it is required to apply \u003cMtouchDebug\u003etrue\u003c/MtouchDebug\u003e for each debugging configuration. That‚Äôs it, we‚Äôre done with the .csproj file! But after saving the file, Visual Studio may display a small red icon. Fortunately, this is perfectly normal! Visual Studio is rarely pleased when you tinker with project settings without using its graphical interface. The message indicates that there is a configuration association problem. Visual Studio doesn‚Äôt yet know what to do with our ‚ÄúDEV‚Äù, ‚ÄúTEST‚Äù and ‚ÄúPROD‚Äù configurations. So we need to go a step further and define their behavior at solution level. For Visual Studio, a solution is like a workspace: it can contain several projects at the same time. But it‚Äôs possible to manage configurations for the solution, as well as for the projects! And for this to work, each solution configuration has to be associated with a configuration for each project in the workspace. You‚Äôll soon understand. Start by opening the solution parameters in Visual Studio. How to access the solution parameters? You can also access solution parameters by double-clicking on the first of the items listed by Visual Studio. When the solution settings window pops up, go to the compiler configurations section. Then add a new configuration for ‚ÄúDEV‚Äù, ‚ÄúTEST‚Äù and finally ‚ÄúPROD‚Äù as shown below: By default, Visual Studio defines two basic configurations: Debug and Release. Now that we have our configurations at the solution level, we need to associate them with the ","date":"08/06/2023","objectID":"/en/posts/tips/multi-environments-project-configuration/:2:0","tags":["Visual Studio","Setup"],"title":"Target multiple environments in .NET MAUI","uri":"/en/posts/tips/multi-environments-project-configuration/"},{"categories":null,"content":"Define an application title for each targeted environment Now that your project configurations are ready, we‚Äôre going to give a specific application name for each of the targeted environments, to avoid any confusion between the development app and the production one. The application name can be modified via the project configuration file. By default, you will normally see an application title and identifier already defined for each new .NET MAUI project: Filename:MultiEnvMauiApp.csproj \u003cPropertyGroup\u003e ... \u003c!-- Display name --\u003e \u003cApplicationTitle\u003eMy App\u003c/ApplicationTitle\u003e \u003c!-- App Identifier --\u003e \u003cApplicationId\u003ecom.companyname.multienvmauiapp\u003c/ApplicationId\u003e ... \u003c/PropertyGroup\u003e In above example, ‚ÄúMy App‚Äù is the app‚Äôs basic name, and our goal is to customize it for each of the project‚Äôs configurations. In our case, we‚Äôll include the name of the target environment in the title and in the app identifier: Filename:MultiEnvMauiApp.csproj \u003cPropertyGroup Condition=\" '$(Configuration)' == 'DEV' \"\u003e ... \u003c!-- Display name (Overridden) --\u003e \u003cApplicationTitle\u003e(DEV) My App\u003c/ApplicationTitle\u003e \u003c!-- App Identifier (Overridden) --\u003e \u003cApplicationId\u003ecom.companyname.multienvmauiapp.dev\u003c/ApplicationId\u003e ... \u003c/PropertyGroup\u003e \u003cPropertyGroup Condition=\" '$(Configuration)' == 'TEST' \"\u003e ... \u003c!-- Display name (Overridden) --\u003e \u003cApplicationTitle\u003e(TEST) My App\u003c/ApplicationTitle\u003e \u003c!-- App Identifier (Overridden) --\u003e \u003cApplicationId\u003ecom.companyname.multienvmauiapp.test\u003c/ApplicationId\u003e ... \u003c/PropertyGroup\u003e From now on, for ‚ÄúDEV‚Äù and ‚ÄúTEST‚Äù configurations, the name of the targeted environment will appear at the beginning of the app name and at the end of the app identifier. This is not needed for the ‚ÄúPROD‚Äù configuration, as the basic title and identifier will be used by default for all configurations. ‚Äé Because ApplicationId parameter has a different value for each configuration, it is possible to install several versions of the application. You can now differentiate the development application from the production one on your phone. Cool! How about taking it a step further? In the next section, you will learn how to customize the app icon. ","date":"08/06/2023","objectID":"/en/posts/tips/multi-environments-project-configuration/:3:0","tags":["Visual Studio","Setup"],"title":"Target multiple environments in .NET MAUI","uri":"/en/posts/tips/multi-environments-project-configuration/"},{"categories":null,"content":"Define an application icon for each targeted environment In addition to naming the app according to the targeted environment, we‚Äôll see how to define an icon for each of the project‚Äôs configurations. To do so, you first need to design an icon for each environment. Once you‚Äôve done that, add them to the project in a suitable folder. By default, every .NET MAUI project includes an AppIcon folder. As for the application name, you may have noticed that the icon is also defined in the project configuration file, with the MauiIcon property. Start removing this parameter from the .csproj file, then add the following code: Filename:MultiEnvMauiApp.csproj \u003cItemGroup\u003e \u003c!-- App Icon --\u003e \u003cMauiIcon Include=\"Resources\\AppIcon\\icon_dev.png\" Condition=\" '$(Configuration)' == 'DEV' \" /\u003e \u003cMauiIcon Include=\"Resources\\AppIcon\\icon_test.png\" Condition=\" '$(Configuration)' == 'TEST' \" /\u003e \u003cMauiIcon Include=\"Resources\\AppIcon\\icon.png\" Condition=\" '$(Configuration)' == 'PROD' \" /\u003e \u003c/ItemGroup\u003e That‚Äôs it, we now have defined a different icon for each configuration! Well‚Ä¶ almost! As you know, every .NET MAUI application relies on configuration files linked to the targeted platform. It is also necessary to define the app icon in these : in the AndroidManifest.xml file on Android, and in the Info.plist file on iOS. ‚Äé At the time of writing, it is not possible to automatically generate the icon on iOS and Android without modifying these files. Maybe a feature for .NET 8? First, we need to associate each of these files with a different configuration. In our case, we‚Äôll need 3 .plist files on iOS and 3 .xml files on Android : Android iOS DEV AndroidManifest.dev.xml Info.dev.plist TEST AndroidManifest.test.xml Info.test.plist PROD AndroidManifest.xml Info.plist Starting with iOS, go to the Platforms/iOS folder and create two copies of the original Info.plist file. Then rename them Info.dev.plist and Info.test.plist. For each .plist file, we‚Äôll modify the value of the XSAppIconAssets parameter to define one icon per configuration. The documentation indicates that the value follows the format Assets.xcassets/{name}.appiconset and that we must replace {name} with the name of the desired icon (without mentioning its path or extension). In our case, this is how it looks like for Info.dev.plist file: Filename:Info.dev.plist \u003ckey\u003eXSAppIconAssets\u003c/key\u003e \u003cstring\u003eAssets.xcassets/icon_dev.appiconset\u003c/string\u003e Finally, once you‚Äôve modified the icon in all the .plist files, go back to the project configuration file. In fact, we need to tell it which .plist file to consider according to the targeted configuration: Filename:MultiEnvMauiApp.csproj \u003cItemGroup Condition=\" '$(TargetFramework)' == 'net7.0-ios' \"\u003e \u003cPartialAppManifest Include=\"Platforms\\iOS\\Info.dev.plist\" Condition=\" '$(Configuration)' == 'DEV' \" /\u003e \u003cPartialAppManifest Include=\"Platforms\\iOS\\Info.test.plist\" Condition=\" '$(Configuration)' == 'TEST' \" /\u003e \u003c/ItemGroup\u003e By default, Visual Studio will choose the Info.plist file. You therefore only need to specify which file to use for the ‚ÄúDEV‚Äù and ‚ÄúTEST‚Äù configurations. ‚Äé Going further with the PartialAppManifest property. Finally, the same goes for Android. Go to the Platforms/Android folder and create two copies of the AndroidManifest.xml file. Then rename them into AndroidManifest.dev.xml and AndroidManifest.test.xml. However, here we need to rename the original AndroidManifest.xml to AndroidManifest.prod.xml. Otherwise, you‚Äôll have trouble compiling the app. For each .xml file, we‚Äôll modify the values of the android:icon and android:roundIcon parameters to define one icon per configuration. The documentation indicates that the values follow the @mipmap/{name} and @mipmap/{name}_round format respectively, and that we need to replace {name} with the name of the desired icon (without mentioning its path or extension). In our case, this is what it looks like for AndroidManifest.dev.xml file: Filename:AndroidManifest.dev.xml \u003capplication android:icon=\"@mipmap/icon_dev\"","date":"08/06/2023","objectID":"/en/posts/tips/multi-environments-project-configuration/:4:0","tags":["Visual Studio","Setup"],"title":"Target multiple environments in .NET MAUI","uri":"/en/posts/tips/multi-environments-project-configuration/"},{"categories":null,"content":"Demo Now it‚Äôs time to check that all this setup is working. You can now deploy the app for each configuration, and for each platform! For configurations that don‚Äôt allow debugging, you need to start the app without debugging for it to deploy on the simulator. This option must be used for \"TEST\" and \"PROD\" configurations. There are 3 apps installed on my iOS simulator, each with a different name and icon. There are 3 apps installed on my Android simulator, each with a different name and icon. Congratulations! üëè Now you can develop new features without risking your users‚Äô data! And it‚Äôs really handy to be able to compare the app‚Äôs behavior between the development and production environments. ‚Äé If you encounter any problems, it may be related to the data in memory on the phone or in Visual Studio. So remember to clean up the solution and delete the app from your phone before deploying it! But what if we can install an app for each new development? Then you could test each new feature (or patch) separately, without having to uninstall any older versions of your app! That‚Äôs a good topic for a future article ü§ì ","date":"08/06/2023","objectID":"/en/posts/tips/multi-environments-project-configuration/:5:0","tags":["Visual Studio","Setup"],"title":"Target multiple environments in .NET MAUI","uri":"/en/posts/tips/multi-environments-project-configuration/"},{"categories":null,"content":"Since the official release of .NET MAUI, it is not possible to create a new project where Visual Studio does not add a default Shell. Fortunately, there is a very simple way to get rid of it!","date":"10/04/2023","objectID":"/en/posts/tips/maui-app-with-no-shell/","tags":["New Project","Visual Studio","Shell","Setup"],"title":"Create a .NET MAUI App without Shell","uri":"/en/posts/tips/maui-app-with-no-shell/"},{"categories":null,"content":"Since the official release of .NET MAUI, it is not possible to create a new project where Visual Studio does not add a default Shell. Fortunately, there is a very simple way to get rid of it! ","date":"10/04/2023","objectID":"/en/posts/tips/maui-app-with-no-shell/:0:0","tags":["New Project","Visual Studio","Shell","Setup"],"title":"Create a .NET MAUI App without Shell","uri":"/en/posts/tips/maui-app-with-no-shell/"},{"categories":null,"content":"Shell or not Shell? It‚Äôs up to you! When creating a new app in .NET MAUI, Visual Studio does not offer many configuration options: Of course, there is .NET MAUI Blazor, but it is a completely different framework. But every new .NET MAUI application created with Visual Studio comes with a Shell by default. And while the Shell can reduce the complexity to develop an application, it is also a tool that any beginner must learn to master in additional to the rest. Here is a small comparative table of the pros and cons of the Shell: Pros Cons Brings a standard application structure with a side menu or tabs, as well as a navigation system with URLs. A bit complex at first for a beginner, may slow down the opening of the app, and is not necessary for basic cases. Finally, the use of Shell in a .NET MAUI project remains a personal choice and should not be enforced by Visual Studio. But then, how would you get an app without a Shell, like in the tuto My First App? Let‚Äôs have a look, it‚Äôs very simple. ","date":"10/04/2023","objectID":"/en/posts/tips/maui-app-with-no-shell/:1:0","tags":["New Project","Visual Studio","Shell","Setup"],"title":"Create a .NET MAUI App without Shell","uri":"/en/posts/tips/maui-app-with-no-shell/"},{"categories":null,"content":"Go without Shell First of all, you need a .NET MAUI project. You can create a new one with Visual Studio, or reuse an existing project. Once your project is open in Visual Studio, delete the AppShell class by deleting the two files AppShell.xaml and AppShell.xaml.cs. Select both files at once, then right click and delete them. Visual Studio will probably ask you for a confirmation. Check that the selected files are the right ones and confirm the deletion: Never safe from mishandling! That‚Äôs it! All that remains is reconfiguring the application‚Äôs start page. To do this, open the App.xaml.cs file and identify the following line of code in the class constructor: Filename:App.xaml.cs MainPage = new AppShell(); Now that AppShell class does not refer to anything, it must be replaced. You just have to replace it by the class associated with the page that appears first when opening the app! For example, for all new projects, this will result into: Filename:App.xaml.cs MainPage = new MainPage(); Now, when the application is opened, the MainPage will be loaded first. There you go, you don‚Äôt have to develop your application around a Shell anymore! Now, what if you learn how to navigate from page to page without Shell? ","date":"10/04/2023","objectID":"/en/posts/tips/maui-app-with-no-shell/:2:0","tags":["New Project","Visual Studio","Shell","Setup"],"title":"Create a .NET MAUI App without Shell","uri":"/en/posts/tips/maui-app-with-no-shell/"},{"categories":null,"content":"We are almost done with the first big implementation phase of our main page. We'll now move on to the volume control!","date":"20/03/2023","objectID":"/en/posts/tutos/my-first-app/9-music-player-display-volume/","tags":["Image","ImageButton","DataTrigger","Slider","MultiTrigger",".NET Community Toolkit","C# markup"],"title":"Music player display - Volume","uri":"/en/posts/tutos/my-first-app/9-music-player-display-volume/"},{"categories":null,"content":" ‚Äé To ease your read, please resume from this chapter where we started setting up the music player controls. In the last chapter, we worked on setting up the media playback controls. We discovered in particular a new type of button: the ImageButton component. Today we‚Äôre going to further develop our user interface with the integration of volume controls. This is the final stretch before we start implementing the core of our music player, so hang on! ","date":"20/03/2023","objectID":"/en/posts/tutos/my-first-app/9-music-player-display-volume/:0:0","tags":["Image","ImageButton","DataTrigger","Slider","MultiTrigger",".NET Community Toolkit","C# markup"],"title":"Music player display - Volume","uri":"/en/posts/tutos/my-first-app/9-music-player-display-volume/"},{"categories":null,"content":"The art of reproduction Let‚Äôs go back to the mock-up, here is what we will have to reproduce in the app: It should be quick this time, there are only two controls! As you can see, it‚Äôs nothing more than a mute button and a volume control bar. It shouldn‚Äôt take long, just start by downloading the different images used to display the volume status. Volume_Tracker_-_Images.zip ./files/Volume_Tracker_-_Images.zip After you unzipped this file, you will see 4 new images: Here, we have an image for each volume level: when it is very loud, medium or very low. Moreover, there is even one for when the sound will be muted. Now that you have the images, all you have to do is including them in the Resources/Images folder, just like last time! ‚Äé In case of any doubts, you can refer to the previous chapter . ","date":"20/03/2023","objectID":"/en/posts/tutos/my-first-app/9-music-player-display-volume/:1:0","tags":["Image","ImageButton","DataTrigger","Slider","MultiTrigger",".NET Community Toolkit","C# markup"],"title":"Music player display - Volume","uri":"/en/posts/tutos/my-first-app/9-music-player-display-volume/"},{"categories":null,"content":"On your marks, get set! Code! All set? Let‚Äôs go to the code! For this, we need an ImageButton to mute the sound and a Slider to control the sound volume precisely. ‚Äé üêí‚Äé ‚Äé Ah, but I already know those ones! That‚Äôs right! Technically, it‚Äôs all d√©j√† vu, so try to reproduce these controls yourself before looking at the following code: Filename:MusicPlayerView.cs ImageButton MuteButton = new ImageButton { HeightRequest = 25, WidthRequest = 25, Source = \"volume_medium.png\" }; Slider VolumeTracker = new Slider { Minimum = 0, MinimumTrackColor = Colors.Black, Maximum = 100, MaximumTrackColor = Colors.Gray, Value = 60 }; So we have defined an ImageButton with a default image, and a Slider to control the volume from 0% to 100%. As you may have noticed, the Slider is composed of a black bar representing the current volume, and a gray bar for the upper volume available. Now, all you have to do is adding the controls to the BottomLayout: Filename:MusicPlayerView.cs MuteButton.Row(2).Column(1), VolumeTracker.Row(2).Column(2).ColumnSpan(3), So, did you remember to apply a ColumnSpan? üòõ We need it to display the volume bar across three columns in our Grid. Come on, it‚Äôs time to relaunch the app! Let‚Äôs see what it looks like: The way it looks now, it almost seems like the mobile app is complete‚Ä¶ ","date":"20/03/2023","objectID":"/en/posts/tutos/my-first-app/9-music-player-display-volume/:2:0","tags":["Image","ImageButton","DataTrigger","Slider","MultiTrigger",".NET Community Toolkit","C# markup"],"title":"Music player display - Volume","uri":"/en/posts/tutos/my-first-app/9-music-player-display-volume/"},{"categories":null,"content":"Switching images when the sound is muted It‚Äôs getting easier with all this training, are you starting to get the hang of it? üôÇ Well, this time there were only two components to define, so we‚Äôll go a little further. Remember the different images we have for our volume? It‚Äôs time make use for them! The idea is that our MuteButton changes its appearance according to the requested volume level. We will therefore have a direct reference to the VolumeTracker in order to find the right image to associate with the MuteButton. To do this, we will use a DataTrigger which allows us to modify the property of an object when a target value is detected. Let‚Äôs take the simplest case where the detected volume is 0 : Filename:MusicPlayerView.cs DataTrigger VolumeOffTrigger =\u003e new DataTrigger(typeof(ImageButton)) { Binding = new Binding(nameof(Slider.Value), source: VolumeTracker), Value = 0d, Setters = { new Setter { Property = ImageButton.SourceProperty, Value = \"volume_off.png\" } } }; First of all, we specify the type of object to which we want to apply the changes. In our case, it will be an ImageButton since we want to change the image of the MuteButton: Filename:MusicPlayerView.cs DataTrigger VolumeOffTrigger =\u003e new DataTrigger(typeof(ImageButton)) Then, with the help of a Setter, we ask the VolumeOffTrigger to change the image source of the MuteButton with the corresponding icon for the volume being turned off: Filename:MusicPlayerView.cs new Setter { Property = ImageButton.SourceProperty, Value = \"volume_off.png\" } However, the change should only apply if the VolumeTracker value reaches 0! This is possible with the Binding technique. So, we create a link to this component to monitor the Value property evolution: Filename:MusicPlayerView.cs Binding = new Binding(nameof(Slider.Value), source: VolumeTracker) Finally, the target value to be reached is defined in the VolumeOffTrigger as follows: Filename:MusicPlayerView.cs Value = 0d In summary, we have a trigger that will change the icon the moment the user lowers the Slider value to zero. ‚Äé üêí‚Äé ‚Äé But why put a ‚Äúd‚Äù after the ‚Äú0‚Äù? Hehe, good call! Indeed, it wasn‚Äôt a typo üòÑ In fact, the Slider documentation states that the Value property is of type double. This gives the user a bit more control when manipulating a Slider (to the last comma!). However, if you remove the ‚Äúd‚Äù and move your mouse over the ‚Äú0‚Äù, you will see that it is no longer considered a double, but an int! Visual Studio is very clear on this question, ‚Äú0‚Äù is an integer! And as the Value property of our trigger is of type object, it potentially accepts any type of value. We must therefore explicitly tell it how to consider this ‚Äú0‚Äù: as a double! So the ‚Äúd‚Äù must be added just after: Now ‚Äú0‚Äù is a double! Visual Studio did not notice a thing. All that remains is attaching this trigger to our MuteButton component. Moreover, as it will be subject to additional configurations, we will isolate its initialization in an InitMuteButton() method. This will keep our code clear: Filename:MusicPlayerView.cs public MusicPlayerView() { ... InitMuteButton(); Content = new Grid { ... }; } void InitMuteButton() { MuteButton.Triggers.Add(VolumeOffTrigger); } That‚Äôs it! Now try dragging the value of the Slider to the far left: The muted icon appears as soon as the cursor is moved to the far left. ","date":"20/03/2023","objectID":"/en/posts/tutos/my-first-app/9-music-player-display-volume/:3:0","tags":["Image","ImageButton","DataTrigger","Slider","MultiTrigger",".NET Community Toolkit","C# markup"],"title":"Music player display - Volume","uri":"/en/posts/tutos/my-first-app/9-music-player-display-volume/"},{"categories":null,"content":"A button in all its forms! Now that you know how triggers work, let‚Äôs create some more to handle all the different states of the button. Functionally, here is what we would like to put in place: the low volume icon will appear for all values greater than 0 and up to 15, for values greater than 15 and up to 50, the moderate volume icon will be displayed, and for the high volume icon it will be for all values greater than 50 and up to 100. For all these cases, the trigger no longer depends on a single specific value, but rather on a whole range of values. We will therefore call upon a new specific trigger, the MultiTrigger. It‚Äôs the same principle as for the DataTrigger, with the difference that the MultiTrigger will instead depend on the result of several conditions. I‚Äôll explain it right after. For now, let‚Äôs declare our three new possible states: Filename:MusicPlayerView.cs MultiTrigger VolumeLowTrigger = new MultiTrigger(typeof(ImageButton)) { Setters = { new Setter { Property = ImageButton.SourceProperty, Value = \"volume_low.png\" } } }; MultiTrigger VolumeMediumTrigger = new MultiTrigger(typeof(ImageButton)) { Setters = { new Setter { Property = ImageButton.SourceProperty, Value = \"volume_medium.png\" } } }; MultiTrigger VolumeHighTrigger = new MultiTrigger(typeof(ImageButton)) { Setters = { new Setter { Property = ImageButton.SourceProperty, Value = \"volume_high.png\" } } }; All we did was to define the aspect changes using Setters, for low, medium or high volume. We can now define the trigger conditions for these three states. Modify the InitMuteButton() method as shown below: Filename:MusicPlayerView.cs void InitMuteButton() { BindingCondition CreateRangeCondition(OperatorType comparison, double value) =\u003e new BindingCondition { Binding = new Binding( nameof(Slider.Value), source: VolumeTracker, converter: new CompareConverter { ComparisonOperator = comparison, ComparingValue = value }), Value = true }; BindingCondition CreateMinRangeCondition(double value) =\u003e CreateRangeCondition(OperatorType.Greater, value); BindingCondition CreateMaxRangeCondition(double value) =\u003e CreateRangeCondition(OperatorType.SmallerOrEqual, value); VolumeLowTrigger.Conditions.Add(CreateMinRangeCondition(0d)); VolumeLowTrigger.Conditions.Add(CreateMaxRangeCondition(15d)); VolumeMediumTrigger.Conditions.Add(CreateMinRangeCondition(15d)); VolumeMediumTrigger.Conditions.Add(CreateMaxRangeCondition(50d)); VolumeHighTrigger.Conditions.Add(CreateMinRangeCondition(50d)); VolumeHighTrigger.Conditions.Add(CreateMaxRangeCondition(100d)); MuteButton.Triggers.Add(VolumeOffTrigger); MuteButton.Triggers.Add(VolumeLowTrigger); MuteButton.Triggers.Add(VolumeMediumTrigger); MuteButton.Triggers.Add(VolumeHighTrigger); } Yes I know, it can be a lot at once, but it‚Äôs not that hard to understand. Actually, you can see that some operations are repeated in this piece of code! ‚Äé üêí‚Äé ‚Äé Yeah, not even afraid! What should I do next? At this stage, some errors will probably have been pointed out by Visual Studio. To resolve them, declare the following headers at the very top of the file: Filename:MusicPlayerView.cs using CommunityToolkit.Maui.Converters; using static CommunityToolkit.Maui.Converters.CompareConverter\u003cobject\u003e; ‚Äé This step is required for the compiler to understand what these new objects are: CompareConverter and Operator.Type. Now it‚Äôs time for an explanation. Let‚Äôs break down a bit this InitMuteButton() method, starting with this piece of code: Filename:MusicPlayerView.cs VolumeLowTrigger.Conditions.Add(CreateMinRangeCondition(0d)); VolumeLowTrigger.Conditions.Add(CreateMaxRangeCondition(15d)); VolumeMediumTrigger.Conditions.Add(CreateMinRangeCondition(15d)); VolumeMediumTrigger.Conditions.Add(CreateMaxRangeCondition(50d)); VolumeHighTrigger.Conditions.Add(CreateMinRangeCondition(50d)); VolumeHighTrigger.Conditions.Add(CreateMaxRangeCondition(100d)); It seems simpler that way, right? All we are doing here is to add two conditions for each of the triggers that ar","date":"20/03/2023","objectID":"/en/posts/tutos/my-first-app/9-music-player-display-volume/:4:0","tags":["Image","ImageButton","DataTrigger","Slider","MultiTrigger",".NET Community Toolkit","C# markup"],"title":"Music player display - Volume","uri":"/en/posts/tutos/my-first-app/9-music-player-display-volume/"},{"categories":null,"content":"More and more buttons! In this chapter, we will integrate the controls for manipulating the media.","date":"27/02/2023","objectID":"/en/posts/tutos/my-first-app/8-music-player-display-media-playback/","tags":["Image","ImageButton","Visual Studio","Round Effect","ColumnSpan"],"title":"Music player display - Media playback","uri":"/en/posts/tutos/my-first-app/8-music-player-display-media-playback/"},{"categories":null,"content":" ‚Äé To ease your read, please resume from this chapter where we started setting up the music player controls. In the last chapter, we worked on setting up the first visual elements of the music player. Two components were discovered: the Label and the Slider. Today, we‚Äôre going to continue our good work and reproduce a whole series of buttons to control the media. ","date":"27/02/2023","objectID":"/en/posts/tutos/my-first-app/8-music-player-display-media-playback/:0:0","tags":["Image","ImageButton","Visual Studio","Round Effect","ColumnSpan"],"title":"Music player display - Media playback","uri":"/en/posts/tutos/my-first-app/8-music-player-display-media-playback/"},{"categories":null,"content":"War of the Buttons To listen to music, our user needs key functions like: play a song, skip to the next track, etc. If you remember about the mock-up, we had a main row of 5 buttons: 5 buttons well aligned in the same row, but they are not all the same size. The difference with the ‚ÄúENTER‚Äù button on the home page is that here, our 5 buttons represent a clickable image. To reproduce them in the app, we will use the ImageButton component. But first, you will need to add these images to the project. So start by downloading them to your computer: Media_Control_-_Images.zip ./files/Media_Control_-_Images.zip Then unzip the downloaded file. You should have the following 6 images: ‚Äé üêí‚Äé ‚Äé 6 images‚Ä¶ but didn‚Äôt we say 5 buttons? Indeed, there will be 5 buttons on this row. But nothing prevents us from replacing the image of the button by another one! Going back to the mock-up, there will be from left to right : a button to replay the track (only once) ‚áí it‚Äôs the image repeat_once.png another to return to the previous song ‚áí skip_previous.png there will also be a big central button to play or pause the music. The image of this button will automatically change accordingly to the following cases: either the track is not playing ‚áí it will be the image play.png or it is already being played ‚áí then pause.png will be displayed then we will have a button to go to the next song ‚áí skip_next.png and a last one to download the song ‚áí download.png Yes I know, this last function ‚Äúdownload‚Äù was not planned in the program! It was originally supposed to be for shuffle playback, but I changed my mind. üòÑ So it‚Äôs important to make the mock-up as reliable as possible! ","date":"27/02/2023","objectID":"/en/posts/tutos/my-first-app/8-music-player-display-media-playback/:1:0","tags":["Image","ImageButton","Visual Studio","Round Effect","ColumnSpan"],"title":"Music player display - Media playback","uri":"/en/posts/tutos/my-first-app/8-music-player-display-media-playback/"},{"categories":null,"content":"Add images to the project Now that you have downloaded all the images, you need to import them into the project so that they can be used by the application. To do this, open the project in Visual Studio and right click on the Images folder: Remember, the Resources folder is where we store all the media (icons, images, audio and video tracks, ...) In the pop-up menu that appears, in the Add section, click on the option to add files from a folder: Then, select the folder where you have unzipped the 6 images and validate your choice. A window will appear for you to choose the files to be included in the project. In our case, we want to import all the images in the folder. So select all the available files and click on OK : ‚Äé Visual Studio may ask you which strategy to use to import the files into the Resources/Images folder. I suggest you choose to copy them, or move them. That‚Äôs it, make sure that you have the 6 new images imported into the folder! ","date":"27/02/2023","objectID":"/en/posts/tutos/my-first-app/8-music-player-display-media-playback/:2:0","tags":["Image","ImageButton","Visual Studio","Round Effect","ColumnSpan"],"title":"Music player display - Media playback","uri":"/en/posts/tutos/my-first-app/8-music-player-display-media-playback/"},{"categories":null,"content":"Discovering ImageButton Now that the images are ready to use, let‚Äôs get to the code! Let‚Äôs first define the two smallest buttons (those at the ends): Filename:MusicPlayerView.cs ImageButton RepeatOnceButton =\u003e new ImageButton { CornerRadius = 5, HeightRequest = 25, WidthRequest = 25, Source = \"repeat_once.png\", BackgroundColor = Colors.Black }; ImageButton DownloadButton =\u003e new ImageButton { CornerRadius = 5, HeightRequest = 25, WidthRequest = 25, Source = \"download.png\", BackgroundColor = Colors.Black }; As you can see, they were given a small square size (25 high by 25 wide), with a black background and slightly rounded corners (via the CornerRadius property). Then they each had their own image assigned via the Source property, with the corresponding file name. ‚Äé If you don‚Äôt plan to target Windows platform, then it is not mandatory to specify the \".png\" extension in the filename. All that remains is defining the 3 buttons to control the playback of the song, always using the ImageButton : Filename:MusicPlayerView.cs ImageButton SkipPreviousButton =\u003e new ImageButton { HeightRequest = 75, WidthRequest = 75, Source = \"skip_previous.png\" }; ImageButton PlayButton =\u003e new ImageButton { CornerRadius = 50, HeightRequest = 100, WidthRequest = 100, Source = \"play.png\", BackgroundColor = Colors.Black }; ImageButton SkipNextButton =\u003e new ImageButton { HeightRequest = 75, WidthRequest = 75, Source = \"skip_next.png\" }; In the end, it‚Äôs not that different! However, you will notice that these controls are larger, and more importantly, the SkipPrevious and SkipNext buttons do not have a background colour. On the other hand, the Play button has a black background and very rounded corners‚Ä¶ so rounded that the shape is no longer square, but round! ‚Äé üêí‚Äé ‚Äé Really, a round shape? But how did you do it? The technique is very simple: the HeightRequest and WidthRequest values must be the same, while the CornerRadius value must be twice as small. So, if you want a round button with a height of 200, its rounding should have a value of 100. ","date":"27/02/2023","objectID":"/en/posts/tutos/my-first-app/8-music-player-display-media-playback/:3:0","tags":["Image","ImageButton","Visual Studio","Round Effect","ColumnSpan"],"title":"Music player display - Media playback","uri":"/en/posts/tutos/my-first-app/8-music-player-display-media-playback/"},{"categories":null,"content":"Preparing for the demo Now it‚Äôs time for you to arrange these new controls in the second row of the BottomLayout! Since we have 5 buttons for 7 columns, you may have opted for the following layout: Filename:MusicPlayerView.cs RepeatOnceButton.Row(1).Column(1), SkipPreviousButton.Row(1).Column(2), PlayButton.Row(1).Column(3), SkipNextButton.Row(1).Column(4), DownloadButton.Row(1).Column(5) ‚Äé üêí‚Äé ‚Äé Well yes, I did‚Ä¶ why not? üôà Nothing, that‚Äôs perfectly fine! You must have relaunched your app to check, and it doesn‚Äôt look bad. On my side, I preferred to recreate a Grid specifically to wrap the Play, SkipPrevious and SkipNext buttons, like this: Filename:MusicPlayerView.cs Grid MediaControlLayout =\u003e new Grid { ColumnDefinitions = Columns.Define( Stars(30), Stars(40), Stars(30)), ColumnSpacing = 0, Children = { SkipPreviousButton.Column(0), PlayButton.Column(1), SkipNextButton.Column(2) } }; It is a simple grid divided into three columns, each with a specific size. So the Play button will take up a bit more space than the other two. But hey, this is all getting easy for you, you start mastering it now! üòé Now, just position the MediaControlLayout like this: RepeatOnceButton.Row(1).Column(1), MediaControlLayout.Row(1).Column(2).ColumnSpan(3), DownloadButton.Row(1).Column(5) And here we go, this is really starting to take shape! ü§© You did really well, keep it up! By the way, we still have the music volume control to reproduce in the app, and that‚Äôs the topic of the next chapter! More articles in the series: My very first app with .NET MAUI Setup the project .NET MAUI First run of the app .NET MAUI MVVM, for a successful application Navigate to a new page in .NET MAUI Arrange elements on a .NET MAUI page Music player display - Time tracker Music player display - Media playback Music player display - Volume Play music in .NET MAUI with MediaElement Control the playback position with MediaElement Control the volume with MediaElement Download an audio file in .NET MAUI Listen to a playlist with MediaElement Create animations in .NET MAUI for a disco atmosphere ","date":"27/02/2023","objectID":"/en/posts/tutos/my-first-app/8-music-player-display-media-playback/:4:0","tags":["Image","ImageButton","Visual Studio","Round Effect","ColumnSpan"],"title":"Music player display - Media playback","uri":"/en/posts/tutos/my-first-app/8-music-player-display-media-playback/"},{"categories":null,"content":"Now that the foundations of the main page are ready, we can start laying out all the controls. Let's start with the timing!","date":"06/02/2023","objectID":"/en/posts/tutos/my-first-app/7-music-player-display-time-tracker/","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Music player display - Time tracker","uri":"/en/posts/tutos/my-first-app/7-music-player-display-time-tracker/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied so far in this tutorial. To do so, refer to the project setup guide and resume from the sample located in the folder ‚Äú3 - Page Scaffolding‚Äù. In the previous article, we set up a matrix to display all the controls of our music player. So we can now add concrete elements for the user! ","date":"06/02/2023","objectID":"/en/posts/tutos/my-first-app/7-music-player-display-time-tracker/:0:0","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Music player display - Time tracker","uri":"/en/posts/tutos/my-first-app/7-music-player-display-time-tracker/"},{"categories":null,"content":"Timing display Let‚Äôs start with the part dedicated to the timing of the song. According to the mock-up, we will have a text on the left for the current listening time, and on the right, for the total duration of the track: The application shows that the song has been playing for 36 seconds and is 2 minutes and 57 seconds long. To reproduce it in the application, we will use the Label component which allows to display some text on the screen: Filename:MusicPlayerView.cs Label ElapsedTime =\u003e new Label { FontSize = 14, Text = \"0:36\", TextColor = Colors.White }.TextCenter(); Label TotalTime =\u003e new Label { FontSize = 14, Text = \"2:57\", TextColor = Colors.White }.TextCenter(); These two new elements are set to display static text in white and with a relatively small font size. However, the font size will automatically be adjusted to the level of text enlargement set by the user in the phone‚Äôs accessibility settings. ‚Äé Going further with accessibility for mobile applications. ","date":"06/02/2023","objectID":"/en/posts/tutos/my-first-app/7-music-player-display-time-tracker/:1:0","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Music player display - Time tracker","uri":"/en/posts/tutos/my-first-app/7-music-player-display-time-tracker/"},{"categories":null,"content":"Adjusting the playback head The middle element has two functions: displaying and controlling the playback position in the song. Indeed, the user can move forward or backward in the song by sliding his finger horizontally. In addition, this component has a pink part that represents the elapsed time, and a black part for the remaining time. To reproduce this navigation bar, we will use the Slider component: Filename:MusicPlayerView.cs Slider TimeTracker =\u003e new Slider { Minimum = 0, MinimumTrackColor = Colors.LightSalmon, Maximum = 100, MaximumTrackColor = Colors.Black, Value = 20 }; A Slider is a control with a cursor that allows the user to select a specific value from a range of possible values. In our case, it‚Äôs like having a ruler which is graduated from 0 to 100 with a cursor positioned on 20. ‚Äé üêí‚Äé ‚Äé Oh yes, I see, we are actually at 20% of the song! So we will have a pink bar from 0 to 20, and a black bar from 20 to 100. That‚Äôs it! Well, actually here, all the configuration values are static, but the final idea is allowing the user to advance or rewind the track to the nearest second. Now, we‚Äôre done with the first row of elements of the music player. To check that the display is correct, I would like you delete all the child elements of the BottomLayout before assigning all the components that we have defined in this chapter. To do this, you may be tempted to write something like : Filename:MusicPlayerView.cs Grid BottomLayout =\u003e new Grid { ... Children = { ElapsedTime.Row(0).Column(1), TimeTracker.Row(0).Column(2), TotalTime.Row(0).Column(5) } }; At first glance, it looks pretty good! However, if you start the application, you will notice that there is a slight problem with the display: Positioned this way, the Slider does not look good. Don‚Äôt panic! We will see right away how to readjust it. ","date":"06/02/2023","objectID":"/en/posts/tutos/my-first-app/7-music-player-display-time-tracker/:2:0","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Music player display - Time tracker","uri":"/en/posts/tutos/my-first-app/7-music-player-display-time-tracker/"},{"categories":null,"content":"Better use of the Grid If you remember, we initially divided the BottomLayout into 7 columns. However, even if our Slider is well positioned from box n¬∞3 of the first row, it does not clearly say where to stop! We could then simply tell the Slider to spread out over the next columns, like this: The Slider overlaps with boxes n¬∞3, n¬∞4 and n¬∞5. To do this, we use the ColumnSpan() method to ask the Slider to expand up to 3 columns from the cell n¬∞3: Filename:MusicPlayerView.cs TimeTracker.Row(0).Column(2).ColumnSpan(3) Now we‚Äôre really done! Let‚Äôs run the application again to see what it looks like: Well, that‚Äôs true, it‚Äôs nice but it doesn‚Äôt do much! But we‚Äôll finish the visual part first before moving on to a more functional part of the application. Besides, we still have a lot of buttons to put in place! Our goal for the next chapter is to control the playback of the media. More articles in the series: My very first app with .NET MAUI Setup the project .NET MAUI First run of the app .NET MAUI MVVM, for a successful application Navigate to a new page in .NET MAUI Arrange elements on a .NET MAUI page Music player display - Time tracker Music player display - Media playback Music player display - Volume Play music in .NET MAUI with MediaElement Control the playback position with MediaElement Control the volume with MediaElement Download an audio file in .NET MAUI Listen to a playlist with MediaElement Create animations in .NET MAUI for a disco atmosphere ","date":"06/02/2023","objectID":"/en/posts/tutos/my-first-app/7-music-player-display-time-tracker/:3:0","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Music player display - Time tracker","uri":"/en/posts/tutos/my-first-app/7-music-player-display-time-tracker/"},{"categories":null,"content":"Before developing a new page, it is best to think about the layout of the various elements. And you'll see, it's a real architect's job!","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-arrange-elements-on-a-page/","tags":["C# markup","Grid"],"title":"Arrange elements on a .NET MAUI page","uri":"/en/posts/tutos/my-first-app/6-arrange-elements-on-a-page/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied so far in this tutorial. To do so, refer to the project setup guide and resume from the sample located in the folder named ‚Äú2 - Navigation‚Äù. With this new chapter, we begin a series of articles focused on the visual aspect of the app, and there is a good chance that you will like it! Indeed, developing a visual interface requires numerous tests of the rendering on the screen, and there is nothing better for learning. And it‚Äôs through regular practice that you‚Äôll naturally understand and retain a lot of things üôÇ Now it‚Äôs time to set up the foundations of the main page! ","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-arrange-elements-on-a-page/:0:0","tags":["C# markup","Grid"],"title":"Arrange elements on a .NET MAUI page","uri":"/en/posts/tutos/my-first-app/6-arrange-elements-on-a-page/"},{"categories":null,"content":"The design But before any visual development, it is best to think about the layout of the various elements that we want to display. Precisely, .NET MAUI provides several simple solutions for structuring our pages. And you‚Äôll see, it‚Äôs a real architect‚Äôs job! ‚Äé üêí‚Äé ‚Äé But what should our page actually look like? This is a very good question! In general, when imagining a new page for our application, it is recommended to work out the design with a pencil on a paper. Because phone screens are quite small, it is not easy to arrange all the desired elements. Then, when we are satisfied with the rendering on paper, we prepare a digital mock-up for a more realistic rendering: this greatly facilitates the integration of the page into the application. For our course, the main page should look like the following layout: ","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-arrange-elements-on-a-page/:1:0","tags":["C# markup","Grid"],"title":"Arrange elements on a .NET MAUI page","uri":"/en/posts/tutos/my-first-app/6-arrange-elements-on-a-page/"},{"categories":null,"content":"Structuring the page On this model, you can see the elements are arranged in a fairly regular way. One could even imagine lines to relatively align the elements on each other: Arranging the elements along imaginary lines is a bit special at first, but it becomes a habit over time. These lines might make you think of a grid‚Ä¶ and if so, good for you! This is the whole principle of the Grid component, which as its name indicates, allows you to arrange elements on a grid. We will use it several times for this page. ","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-arrange-elements-on-a-page/:2:0","tags":["C# markup","Grid"],"title":"Arrange elements on a .NET MAUI page","uri":"/en/posts/tutos/my-first-app/6-arrange-elements-on-a-page/"},{"categories":null,"content":"Introduction to the Grid To comply with the layout, the first thing to do is dividing the page in two: The top part which displays nothing but a black background, and the bottom part to control our music player. You will notice that the top part is slightly larger than the bottom part. You could even say that the black part spreads vertically over 60% of the page, leaving 40% of the page for the rest. This is very useful to know! Let‚Äôs apply these values to define the content of our MusicPlayerView page with a Grid : Filename:MusicPlayerView.cs using CommunityToolkit.Maui.Markup; using static CommunityToolkit.Maui.Markup.GridRowsColumns; ... public MusicPlayerView() { ... Content = new Grid { RowDefinitions = Rows.Define( Stars(60), Stars(40)), RowSpacing = 0, Children = { TopLayout.Row(0), BottomLayout.Row(1), } }; } With the RowDefinitions parameter, we configure a grid of 2 lines: the first one will be able to extend up to 60% of the page vertically against 40% for the second one, as per design! When initializing the Grid, we also define two other parameters: the RowSpacing set to 0 for having no space between the lines of our grid, and Children which will contain all the elements of our grid, to be distributed over two lines. And if you wonder where these TopLayout and BottomLayout come from, they‚Äôre actually two element containers to define outside the page constructor. Indeed, we again use a Grid for each of these two controls to help us with positioning the remaining elements. The first Grid (the TopLayout) corresponds to the top part of our page and therefore has a black background. As for the other Grid (the BottomLayout), we define a dark grey background to represent the lower part. Copy the following code and paste it into the region dedicated to controls in the file MusicPlayerView.cs: Filename:MusicPlayerView.cs #region Controls Grid TopLayout =\u003e new Grid { BackgroundColor = Colors.Black }; Grid BottomLayout =\u003e new Grid { BackgroundColor = Colors.DimGray }; #endregion ","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-arrange-elements-on-a-page/:3:0","tags":["C# markup","Grid"],"title":"Arrange elements on a .NET MAUI page","uri":"/en/posts/tutos/my-first-app/6-arrange-elements-on-a-page/"},{"categories":null,"content":"The main foundations Let‚Äôs focus first on the content of the BottomLayout. If we take a closer look at the design, we can see new rows, but also columns. More exactly: there are 3 rows from top to bottom, all the same size, and there are 7 columns from left to right (2 small, 3 large and then 2 small again). By squaring the lower area of the page, you can see that each visual element has its own cell. Now let‚Äôs define the rows and columns composing our BottomLayout to comply with the alignment of the visual elements, as on the mock-up: Filename:MusicPlayerView.cs Grid BottomLayout =\u003e new Grid { BackgroundColor = Colors.DimGray, RowDefinitions = Rows.Define( Stars(1), Stars(1), Stars(1)), RowSpacing = 0, ColumnDefinitions = Columns.Define( Stars(10), Stars(10), Stars(20), Stars(20), Stars(20), Stars(10), Stars(10)), ColumnSpacing = 0 }; As you can see, the code above proposes a split into 3 rows of the same size and 7 columns with different sizes. ‚Äé üêí‚Äé ‚Äé Well, if I add up the sizes of each column, I get a total of 100%! But when it comes to rows, there‚Äôs a problem, right? Good point! Actually, I started with a 100% size scale because it‚Äôs often easier to understand. So, when you write‚Ä¶ Filename:MusicPlayerView.cs RowDefinitions = Rows.Define( Stars(60), Stars(40)) ‚Ä¶ the application understands that the first line will have a weight of 60 compared to the second line, which will only have a weight of 40. This is a dynamic way of assigning a height to our lines depending on the size of the screen, as it changes from one mobile phone to another. Finally, you can see this weight as a multiplier. For example, this same piece of code can be rewritten in this way: Filename:MusicPlayerView.cs RowDefinitions = Rows.Define( Stars(1.5), // 1.5 x 40 = 60 Stars(1)) // 1 x 40 = 40 Choose what makes more sense to you! ","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-arrange-elements-on-a-page/:4:0","tags":["C# markup","Grid"],"title":"Arrange elements on a .NET MAUI page","uri":"/en/posts/tutos/my-first-app/6-arrange-elements-on-a-page/"},{"categories":null,"content":"Validating the rendering on screen Now that our bottom grid is in place, let‚Äôs check the settings are correct. With a Grid of 3 rows and 7 columns, that‚Äôs a lot of cells to validate! But I have a trick to quickly test if the slicing is what you expected or if some adjustments are required. To do this, you can draw a geometric shape in each cell of the grid, each with its own colour. With the BoxView, this is very easy: Filename:MusicPlayerView.cs Grid BottomLayout =\u003e new Grid { [...] ColumnSpacing = 0, Children = { new BoxView { Color = Color.FromArgb(\"#ffffff\") }.Row(0).Column(0), new BoxView { Color = Color.FromArgb(\"#d0d0d0\") }.Row(0).Column(1), new BoxView { Color = Color.FromArgb(\"#a2a3a3\") }.Row(0).Column(2), new BoxView { Color = Color.FromArgb(\"#777879\") }.Row(0).Column(3), new BoxView { Color = Color.FromArgb(\"#4e5051\") }.Row(0).Column(4), new BoxView { Color = Color.FromArgb(\"#292b2c\") }.Row(0).Column(5), new BoxView { Color = Color.FromArgb(\"#000405\") }.Row(0).Column(6), new BoxView { Color = Color.FromArgb(\"#f3f337\") }.Row(1).Column(0), new BoxView { Color = Color.FromArgb(\"#a2eb5b\") }.Row(1).Column(1), new BoxView { Color = Color.FromArgb(\"#4edb80\") }.Row(1).Column(2), new BoxView { Color = Color.FromArgb(\"#00c89f\") }.Row(1).Column(3), new BoxView { Color = Color.FromArgb(\"#00b1b1\") }.Row(1).Column(4), new BoxView { Color = Color.FromArgb(\"#0098b2\") }.Row(1).Column(5), new BoxView { Color = Color.FromArgb(\"#177ea2\") }.Row(1).Column(6), new BoxView { Color = Color.FromArgb(\"#bf7aef\") }.Row(2).Column(0), new BoxView { Color = Color.FromArgb(\"#ea6cd4\") }.Row(2).Column(1), new BoxView { Color = Color.FromArgb(\"#ff63b3\") }.Row(2).Column(2), new BoxView { Color = Color.FromArgb(\"#ff6590\") }.Row(2).Column(3), new BoxView { Color = Color.FromArgb(\"#ff716e\") }.Row(2).Column(4), new BoxView { Color = Color.FromArgb(\"#ff844e\") }.Row(2).Column(5), new BoxView { Color = Color.FromArgb(\"#f89832\") }.Row(2).Column(6), } }; And if you run the app, you will see that our use of the Grid is indeed correct: It's a bit similar to the old colour televisions. Well, there is nothing functional for the user, but now that our foundations are ready, it will greatly simplify our lives! We will finally be able to have fun arranging all the control elements from the next chapter, starting with the timing management. More articles in the series: My very first app with .NET MAUI Setup the project .NET MAUI First run of the app .NET MAUI MVVM, for a successful application Navigate to a new page in .NET MAUI Arrange elements on a .NET MAUI page Music player display - Time tracker Music player display - Media playback Music player display - Volume Play music in .NET MAUI with MediaElement Control the playback position with MediaElement Control the volume with MediaElement Download an audio file in .NET MAUI Listen to a playlist with MediaElement Create animations in .NET MAUI for a disco atmosphere ","date":"30/01/2023","objectID":"/en/posts/tutos/my-first-app/6-arrange-elements-on-a-page/:5:0","tags":["C# markup","Grid"],"title":"Arrange elements on a .NET MAUI page","uri":"/en/posts/tutos/my-first-app/6-arrange-elements-on-a-page/"},{"categories":null,"content":"We are now starting to create the main page of the application. But new page also means, enable the user going to that page! So let's see how to implement the navigation from one page to another.","date":"23/01/2023","objectID":"/en/posts/tutos/my-first-app/5-navigate-to-a-new-page/","tags":["Navigation"],"title":"Navigate to a new page in .NET MAUI","uri":"/en/posts/tutos/my-first-app/5-navigate-to-a-new-page/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied so far in this tutorial. To do so, refer to the project setup guide and resume from the sample located in the folder ‚Äú1 - MVVM‚Äù. Hey, you‚Äôre back! We‚Äôre now done with MVVM and believe me, you did take a big step forward! Today it will be much simpler, we start the creation of the application main page. But new page also means, enable the user going to that page! So let‚Äôs see how to implement the navigation from one page to another. ","date":"23/01/2023","objectID":"/en/posts/tutos/my-first-app/5-navigate-to-a-new-page/:0:0","tags":["Navigation"],"title":"Navigate to a new page in .NET MAUI","uri":"/en/posts/tutos/my-first-app/5-navigate-to-a-new-page/"},{"categories":null,"content":"Navigate to a new page Let‚Äôs start by adding our new page. To do this, right click on the Views folder to add a new file, then choose the template ‚Äú.NET MAUI ContentPage (C#)‚Äù as below. We‚Äôll name this file: MusicPlayerView.cs. As you will have noticed, the template used to create the page provides us with a default content. So all we have to do now is navigating to this new page! To do so, go to the file HomeViewModel.cs and modify the method Enter() as follows: Filename:HomeViewModel.cs using NightClub.Views; // Reminder: without this line, it would not compile! ... [RelayCommand] async Task Enter() { await Application.Current.MainPage.Navigation.PushAsync( new MusicPlayerView()); } All that is done here is accessing the navigation service provided by the application in order to display a new page MusicPlayerView. Actually, when the method PushAsync() is called, the page MusicPlayerView is then added to the very top of the stack of existing pages, exactly as shown in the diagram below: As with a deck of playing cards, only the top one is visible. ‚Äé üêí‚Äé ‚Äé Ha! That‚Äôs it, can I test it then? We‚Äôre almost there! For the navigation to work, we need the first page displayed at startup to be included in a NavigationPage. If you go back to the App.cs file, there is a method called OnStart() that is automatically executed each time the app is initialized. So modify this method to set HomeView as the application root page, in a NavigationPage: Filename:App.cs protected override void OnStart() { base.OnStart(); Console.WriteLine(\"[NightClub] App - OnStart\"); MainPage = new NavigationPage(new HomeView()); } That‚Äôs it, restart the application and click on the Enter button! ","date":"23/01/2023","objectID":"/en/posts/tutos/my-first-app/5-navigate-to-a-new-page/:1:0","tags":["Navigation"],"title":"Navigate to a new page in .NET MAUI","uri":"/en/posts/tutos/my-first-app/5-navigate-to-a-new-page/"},{"categories":null,"content":"Remove the navigation bar As you will surely have understood, our home page is now contained in a page specially configured for navigation. It therefore contains a navigation bar by default: From a design point of view, this is not necessarily what you want. So let‚Äôs take a quick look at how to remove this header for the home page. Go to the file HomeView.cs and invoke the method SetHasNavigationBar() in the page constructor, like this: Filename:HomeView.cs public HomeView() { ... BindingContext = new HomeViewModel(); NavigationPage.SetHasNavigationBar(this, false); BackgroundColor = Colors.Black; ... } And now restarting the app, it‚Äôs a lot nicer! The application is slowly coming alive, and even more so with the next chapter! See you soon for the construction of our main page. More articles in the series: My very first app with .NET MAUI Setup the project .NET MAUI First run of the app .NET MAUI MVVM, for a successful application Navigate to a new page in .NET MAUI Arrange elements on a .NET MAUI page Music player display - Time tracker Music player display - Media playback Music player display - Volume Play music in .NET MAUI with MediaElement Control the playback position with MediaElement Control the volume with MediaElement Download an audio file in .NET MAUI Listen to a playlist with MediaElement Create animations in .NET MAUI for a disco atmosphere ","date":"23/01/2023","objectID":"/en/posts/tutos/my-first-app/5-navigate-to-a-new-page/:2:0","tags":["Navigation"],"title":"Navigate to a new page in .NET MAUI","uri":"/en/posts/tutos/my-first-app/5-navigate-to-a-new-page/"},{"categories":null,"content":"In this chapter, we will discover a major design pattern for mobile application development, the Model-View-ViewModel (MVVM)!","date":"12/01/2023","objectID":"/en/posts/tutos/my-first-app/4-mvvm-for-successful-apps/","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM, for a successful application","uri":"/en/posts/tutos/my-first-app/4-mvvm-for-successful-apps/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied so far in this tutorial. To do so, refer to the project setup guide and resume from the sample located in the folder ‚Äú0 - Get Started‚Äù. In this chapter, we will discover a major design pattern for mobile application development, the Model-View-ViewModel! (usually referred as ‚ÄúMVVM‚Äù) ","date":"12/01/2023","objectID":"/en/posts/tutos/my-first-app/4-mvvm-for-successful-apps/:0:0","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM, for a successful application","uri":"/en/posts/tutos/my-first-app/4-mvvm-for-successful-apps/"},{"categories":null,"content":"Model-View-ViewModel MVVM is a design pattern which provides the developer with a logical separation of the code into 3 layers: The View, which refers to the user interface, i.e. everything that will be displayed on the screen (e.g. the HomeView page), The Model, which refers to the kind of data to be displayed in this View, And finally, the ViewModel which is the link between the View and the Model. For example, to retrieve data from the Cloud or react to user interactions. ‚Äé üêí‚Äé ‚Äé Indeed, I can see the separation, but why is it recommended? One of the main advantages of MVVM is isolating the view (i.e. the user interface) from the business logic. In the context of our first page, we finally obtain two files: HomeView.cs which defines exactly how our page will be displayed (i.e. a background colour, an image at the top, a bottom button), And HomeViewModel.cs which contains all the logic to run our page (in this case, the behaviour of the button when the user presses it). By following this principle, the breakdown of your code is clear and you reduce the number of lines of code per file. You wouldn‚Äôt want a file with more than 10,000 lines! üòÑ Besides, there is no risk of affecting the logic of your app if you only change the colour of a button. ‚Äé üêí‚Äé ‚Äé It‚Äôs all clear! But there‚Äôs one thing I don‚Äôt understand, there‚Äôs no Model for the HomeView page. Good catch! Indeed, some pages are so simple that they do not require a Model. In such cases, only the View and ViewModel are required. ","date":"12/01/2023","objectID":"/en/posts/tutos/my-first-app/4-mvvm-for-successful-apps/:1:0","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM, for a successful application","uri":"/en/posts/tutos/my-first-app/4-mvvm-for-successful-apps/"},{"categories":null,"content":"Data Binding We now understand how to split our code into several layers. For example, defining a button in a View and declaring its action in a ViewModel. But can you tell how they will work together? ‚Äé üêí‚Äé ‚Äé Hmm‚Ä¶ maybe tell the button in this View about what has been declared in this ViewModel? Indeed, that‚Äôs almost it! It takes place in two steps: First, a ViewModel is associated to its View (usually with the View‚Äôs BindingContext), Then we define the behaviour of each element of the View into the ViewModel, using the principle of Data Binding. Data Binding is a technique for linking two objects so that when one is changed, the other is also changed. It may sound a bit vague, but you‚Äôll understand its role better in the next section. For now, let‚Äôs move on! ","date":"12/01/2023","objectID":"/en/posts/tutos/my-first-app/4-mvvm-for-successful-apps/:2:0","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM, for a successful application","uri":"/en/posts/tutos/my-first-app/4-mvvm-for-successful-apps/"},{"categories":null,"content":"Apply MVVM Now that you know the basics of MVVM, I can show you how to apply it concretely in the application. Let‚Äôs start by creating a file to be the ViewModel for our HomeView. To do this, first create a new folder called ViewModels in the project, then add a new file to it. This will be an empty class named HomeViewModel.cs : Then, replace its content with the following one: Filename:HomeViewModel.cs using System; namespace NightClub.ViewModels; public class HomeViewModel { public HomeViewModel() { } async Task Enter() { await Application.Current.MainPage.DisplayAlert( \"Well Done !\", \"You have successfully reached the end of this chapter.\", \"Next !\"); } } Well, there‚Äôs nothing special here. It‚Äôs just a C# object class with an *Enter() *method that prints some text on the screen right after the user clicks the ‚ÄúENTER‚Äù button. ‚Äé üêí‚Äé ‚Äé Still, we just defined the action of the home page button! And you‚Äôre right, but as it is, it remains unusable! Remember, there‚Äôs absolutely no link between the HomeView and the HomeViewModel. Fortunately, there is a library provided by Microsoft that will greatly simplify our lives: the MVVM Toolkit. This library has already been added to the project and you can easily verify this by opening the NuGet packages management window. Just right click on the project‚Äôs dependencies: And here is the library! It is called CommunityToolkit.Mvvm: ‚Äé Going further with NuGet packages Now let‚Äôs see how to prepare our class HomeViewModel to act as a real ViewModel: First, make it inherit from the class ObservableObject, then, define it as a partial class. You should have the following: Filename:HomeViewModel.cs using System; using CommunityToolkit.Mvvm.ComponentModel; namespace NightClub.ViewModels; public partial class HomeViewModel : ObservableObject ... ‚Äé By making HomeViewModel inherit from the ObservableObject class, Visual Studio automatically adds the necessary using for being compiled. Indeed, a reference to CommunityToolkit.Mvvm.ComponentModel is required for ObservableObject to become truly understandable by the application. These two steps are necessary for MVVM Toolkit to generate source code with just specific keywords. In short, you write a single word and it automatically generates dozens of lines of code, isn‚Äôt that great? ü§ò For example, we will define our Enter() method as a command by adding a simple [RelayCommand] attribute. Here‚Äôs how: Filename:HomeViewModel.cs [RelayCommand] async Task Enter() { await Application.Current.MainPage.DisplayAlert( \"Well Done !\", \"You have successfully reached the end of this chapter.\", \"Next !\"); } With just one word, we now have an Enter() command which supports the Data Binding technique! And this is only possible thanks to the MVVM Toolkit library that takes care of generating all the necessary source code. ‚Äé Going further with MVVM source code generators ","date":"12/01/2023","objectID":"/en/posts/tutos/my-first-app/4-mvvm-for-successful-apps/:3:0","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM, for a successful application","uri":"/en/posts/tutos/my-first-app/4-mvvm-for-successful-apps/"},{"categories":null,"content":"Demo is coming soon! Almost there! Only remaining is to activate the Enter() command when the ‚ÄúENTER‚Äù button is clicked. Let‚Äôs first reopen the file HomeView.cs to link the view to the HomeViewModel via the BindingContext: Filename:HomeView.cs public HomeView() { BindingContext = new HomeViewModel(); BackgroundColor = Colors.Black; Content = ... } Then define the action for EnterButton with BindCommand to trigger the Enter() command that is specified in the HomeViewModel: Filename:HomeView.cs Button EnterButton =\u003e new Button { Text = \"ENTER\", TextColor = Colors.White, BackgroundColor = Colors.Magenta, CornerRadius = 10 } .Bold() .Paddings(50, 2, 50, 2) .CenterHorizontal() .BindCommand(\"EnterCommand\"); // Note: we need to add \"Command\" after \"Enter\" And there you have it! ‚Äé üêí‚Äé ‚Äé Okay, so if I got it properly, it‚Äôs almost the same on every page of the app, not that complicated! Well, yes in theory! But our app still lacks several key features: an authentication system, a database, etc‚Ä¶ For example, once we will have created the main page of the application, we‚Äôll need to configure its access from the home page! And this is what we will see in the next chapter. More articles in the series: My very first app with .NET MAUI Setup the project .NET MAUI First run of the app .NET MAUI MVVM, for a successful application Navigate to a new page in .NET MAUI Arrange elements on a .NET MAUI page Music player display - Time tracker Music player display - Media playback Music player display - Volume Play music in .NET MAUI with MediaElement Control the playback position with MediaElement Control the volume with MediaElement Download an audio file in .NET MAUI Listen to a playlist with MediaElement Create animations in .NET MAUI for a disco atmosphere ","date":"12/01/2023","objectID":"/en/posts/tutos/my-first-app/4-mvvm-for-successful-apps/:4:0","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM, for a successful application","uri":"/en/posts/tutos/my-first-app/4-mvvm-for-successful-apps/"},{"categories":null,"content":"It's now time to get the app running. We'll also take the opportunity to look at the source code üôÇ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/","tags":["Visual Studio","C# markup"],"title":"First run of the app .NET MAUI","uri":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":" ‚Äé To ease your read, please start from the project containing all the different steps applied so far in this tutorial. To do so, refer to the project setup guide and resume from the sample located in the folder ‚Äú0 - Get Started‚Äù. It‚Äôs now time to get the app running. We‚Äôll also take the opportunity to look at the source code üôÇ But for our application to work, we still have two points to address: the app initialization and above all, managing its execution state. ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/:0:0","tags":["Visual Studio","C# markup"],"title":"First run of the app .NET MAUI","uri":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"App initialization For each targeted platform (iOS, Android, ‚Ä¶), a .NET MAUI application is initialized from a single entry point via the method CreateMauiApp() which is located in the file MauiProgram.cs. This is where you configure everything the app needs to work the way you want it to: web services, external dependencies, or specific fonts. ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/:1:0","tags":["Visual Studio","C# markup"],"title":"First run of the app .NET MAUI","uri":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"App state management But we also need something to define the current state of our application (which page to display, what if the application stops, ‚Ä¶). And for that, we have an Application class declared in the file App.cs. ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/:2:0","tags":["Visual Studio","C# markup"],"title":"First run of the app .NET MAUI","uri":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"Executing the app Come on, it‚Äôs time to get the application running! So choose the platform you want to target, then click on the red boxed button to start the project: First, you will see your project compiling with the chosen configuration (this is the build stage): The current status of the project can easily be viewed at the bottom left of Visual Studio for Mac. Then your application will automatically be deployed to the chosen platform (here, a simulated iPhone 13, iOS 15.5). And here‚Äôs the result! ‚Äé üêí‚Äé ‚Äé Heeeey, but nothing happens when I click on the button! This is just the beginning of our app, the biggest part is ahead ! ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/:3:0","tags":["Visual Studio","C# markup"],"title":"First run of the app .NET MAUI","uri":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"The home page The screen you just saw is the home page for which the content is specified in the file HomeView.cs. It‚Äôs a ContentPage (basically a page with content) which is the most common type of page. And as you can see, what it is composed about is very simple: Filename:HomeView.cs public HomeView() { BackgroundColor = Colors.Black; Content = new VerticalStackLayout { Children = { NightClubImage, EnterButton } }.CenterVertical(); } It‚Äôs a black background page whose content is defined by an image and a button that are stacked vertically in a VerticalStackLayout. And if you want to know how these two components are defined, just look a little further down in the code on the page: Filename:HomeView.cs #region Controls Image NightClubImage =\u003e new Image { // .NET MAUI converts SVG files to PNG files. Source = \"night_club.png\" }; Button EnterButton =\u003e new Button { Text = \"ENTER\", TextColor = Colors.White, BackgroundColor = Colors.Magenta, CornerRadius = 10 } .Bold() .Paddings(50, 2, 50, 2) .CenterHorizontal(); #endregion Nothing very complex at this stage: We set the image of the component NightClubImage with the ‚ÄúSource‚Äù property, And for the button, we set several base properties such as the text, the color, ‚Ä¶ but you might have noticed that we also apply some functions to the component EnterButton: Bold() to set the text of the button in bold, Paddings() to add a bit of space all around this text, especially to the left and to the right of the text, And then, CenterHorizontal() to align the text at the center of the button. ‚Äé These methods follow a particular programmation technique named ‚ÄúDeclarative UI‚Äù or ‚ÄúFluent UI‚Äù. Finally, this page is coded in C#, as for the rest of the app! ‚Äé üêí‚Äé ‚Äé Alright! And shouldn‚Äôt we declare an action to this button? Correct! And we‚Äôll see how to trigger code execution by clicking on this button, but not in any way. Indeed, we will apply this wonderful design pattern called Model-View-ViewModel (MVVM). More articles in the series: My very first app with .NET MAUI Setup the project .NET MAUI First run of the app .NET MAUI MVVM, for a successful application Navigate to a new page in .NET MAUI Arrange elements on a .NET MAUI page Music player display - Time tracker Music player display - Media playback Music player display - Volume Play music in .NET MAUI with MediaElement Control the playback position with MediaElement Control the volume with MediaElement Download an audio file in .NET MAUI Listen to a playlist with MediaElement Create animations in .NET MAUI for a disco atmosphere ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/:4:0","tags":["Visual Studio","C# markup"],"title":"First run of the app .NET MAUI","uri":"/en/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"Today we'll start building our first application! Let‚Äôs first set up your working environment, and then you‚Äôll have something concrete soon. Let's get started!","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/2-setup-the-project/","tags":["Visual Studio","Setup","New Project"],"title":"Setup the project .NET MAUI","uri":"/en/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Today we‚Äôll start building our first application! Let‚Äôs first set up your working environment, and then you‚Äôll have something concrete soon. Let‚Äôs get started! ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/2-setup-the-project/:0:0","tags":["Visual Studio","Setup","New Project"],"title":"Setup the project .NET MAUI","uri":"/en/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Which tools for development ? Let‚Äôs first see the tools you will need to develop your app. ‚Äé üêí‚Äé ‚Äé By the way, do I need to be on Windows, MacOS or Linux? Actually, there is no particular pre-requisite to develop an app with .NET MAUI, unless you own a very old fashion computer and you never did update anything‚Ä¶ ü§î¬†Otherwise, it‚Äôs mostly a matter of preference! Personally, I develop on macOS because it‚Äôs an operating system I like, and the built in iPhone simulator is very powerful and quickly gives me a realistic render of what I‚Äôm programming. But you can also develop under Windows or Linux! More concretely: for Windows or MacOS, it‚Äôs easy, Microsoft offers a very powerful integrated development environment: Visual Studio for Windows, and Visual Studio for Mac for‚Ä¶ well for MacOS üòÑ and if you‚Äôre on Linux, you‚Äôll have to be a bit more resourceful (and that‚Äôs why you‚Äôre on Linux, isn‚Äôt it? üòõ). In that case, I suggest you use the excellent source code editor Visual Studio Code. ‚Äé For the purposes of this blog, I will only focus on mobile application development using Visual Studio. It is much more intuitive to use and that is what appeals to any true novice. ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/2-setup-the-project/:1:0","tags":["Visual Studio","Setup","New Project"],"title":"Setup the project .NET MAUI","uri":"/en/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Install your environment Let‚Äôs move on to the installation of the working environment: First, download Visual Studio from the official Microsoft website, choosing the appropriate version for your operating system (Windows or MacOS), Then comes the time to install Visual Studio and its development environment for .NET MAUI. In order to improve the reading of this blog, I suggest you directly follow the installation steps on the official website: follow the installation steps for Windows follow the installation steps for MacOS (since release of .NET 8 SDK, there might be one more step detailed here) Finally, download my class from GitHub. To do this, go to the blog‚Äôs code repository, click on the ‚ÄúCode‚Äù button and download the ZIP version. ‚Äé Before you go further, if you are on MacOS, make sure you have downloaded the latest version of Xcode which is required for the iPhone simulator. This is usually long to install, so I suggest you do it while reading. ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/2-setup-the-project/:2:0","tags":["Visual Studio","Setup","New Project"],"title":"Setup the project .NET MAUI","uri":"/en/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Opening the project Once you have unzipped the downloaded file, go to the Samples folder associated with our course (Samples/NightClub). The folders under it each correspond to a different part of the course: For now, open the first folder (0 - Get Started) and double click on NightClub.sln to open the NightClub project in Visual Studio. The NightClub project structure from Visual Studio. ‚Äé üêí‚Äé ‚Äé Ok! Opening the project‚Ä¶ loading‚Ä¶ But there are already many things in this project, can‚Äôt we start from scratch? Actually, it already is! The project you just opened is brand new, but it includes several base files that are necessary for the proper functioning of a .NET MAUI application: All the libraries that are required for the proper functioning of the project are grouped in the Dependencies folder, In Platforms, you will find all the files needed to run the application, for each target platform, As for the Properties folder, it generally contains configuration files (and besides, there is one created by default for Windows), And then, you will be able to configure an icon and a loading screen for each application! For this, we usually use the Resources folder to store all our media (icons, images, audio and video tracks, ‚Ä¶), Finally, we have to display something when the app opens! And for that, we have the Views folder which at the moment contains our first page, the famous home page‚Ä¶ ‚Äé Going further with the basic structure of a Visual Studio project And that‚Äôs it, how about if we launch that app ? üôÇ More articles in the series: My very first app with .NET MAUI Setup the project .NET MAUI First run of the app .NET MAUI MVVM, for a successful application Navigate to a new page in .NET MAUI Arrange elements on a .NET MAUI page Music player display - Time tracker Music player display - Media playback Music player display - Volume Play music in .NET MAUI with MediaElement Control the playback position with MediaElement Control the volume with MediaElement Download an audio file in .NET MAUI Listen to a playlist with MediaElement Create animations in .NET MAUI for a disco atmosphere ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/2-setup-the-project/:3:0","tags":["Visual Studio","Setup","New Project"],"title":"Setup the project .NET MAUI","uri":"/en/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Hi Dev-s! ü§ì I'm J-E and my goal with this blog is to help any beginner developer willing to get started with his mobile application through very simple lessons. No long theoretical courses, here you will quickly have fun and produce cool apps! And I'll guide you from the development stage until your application is available on the stores.","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/1-introduction/","tags":["New Project"],"title":"My very first app with .NET MAUI","uri":"/en/posts/tutos/my-first-app/1-introduction/"},{"categories":null,"content":"Hi Devs ! ü§ì My name is J-E, or Jean-Emmanuel if you prefer, and I‚Äôm glad to know you reading my notes! Indeed, I really want to share my passion about developing cross-platforms mobile applications, and especially with .NET MAUI (to pronounce ‚Äúdot-net-mah-wee‚Äù). With this blog, I wish I could help any beginner developer willing to get started with his mobile application project via short and simple lessons. No long theoretical courses, here you will quickly have fun and produce cool apps! And I‚Äôll guide you from the development stage until your application is available on the stores. ‚Äé üêí‚Äé ‚Äé But, what is .NET MAUI? Can you tell me more? It‚Äôs a framework maintained by Microsoft for developing mobile applications, but not only! In fact, MAUI stands for ‚ÄúMulti-platform App User Interface‚Äù. .NET MAUI was officially released during 2022 and is based on the excellent Xamarin.Forms framework which covers iOS and Android only. And if you had never heard of it, don‚Äôt panic! Even I only learned about it at the end of 2019, and then I deployed my very first app on the stores: MyVanity. ‚Äé üêí‚Äé ‚Äé And how did you get your first application published? Did it take long? And that‚Äôs the magic of .NET MAUI, you only have to code one program and it will run on Android, iOS, macOS and Windows! And it just needs a single programming language. And so no, it didn‚Äôt take that long, but mostly it will depend: your development experience, the complexity of your application, and how much time you can dedicate to it. In my case, it took exactly one year from the moment I imagined the application to the day I published it on the stores. ‚Äé üêí‚Äé ‚Äé Okay, so what do I need to know before I start my application? First of all, congratulations, it‚Äôs a very good decision! So to start your application, you will need to: Find an idea, Design a mock-up, Know C# language. First point is easy, you usually already have the idea to get this far. üòõ The second one is just to have a better idea of what the application will look like, and for that you should give a try to Adobe XD which is free! Finally, you will need to know C# language to program your application, and for that I suggest you to take the learning path developed by Microsoft. That being said, you can start right away if you have a bit of experience in coding, even without knowing C#! You will learn very quickly as you develop your application. For this first lesson, I propose you develop an application to play music in a ‚Äúnightclub‚Äù atmosphere. üíÉüèæüï∫üèªü™© You‚Äôll probably make a few mistakes, but failing is the best way to learn, so make sure you follow through with your idea! ‚Äé üêí‚Äé ‚Äé I have the idea in mind, my design is ready, and I‚Äôm fine coding with C#, let‚Äôs start ! Here we go, see you at next article ! More articles in the series: My very first app with .NET MAUI Setup the project .NET MAUI First run of the app .NET MAUI MVVM, for a successful application Navigate to a new page in .NET MAUI Arrange elements on a .NET MAUI page Music player display - Time tracker Music player display - Media playback Music player display - Volume Play music in .NET MAUI with MediaElement Control the playback position with MediaElement Control the volume with MediaElement Download an audio file in .NET MAUI Listen to a playlist with MediaElement Create animations in .NET MAUI for a disco atmosphere ","date":"02/01/2023","objectID":"/en/posts/tutos/my-first-app/1-introduction/:0:0","tags":["New Project"],"title":"My very first app with .NET MAUI","uri":"/en/posts/tutos/my-first-app/1-introduction/"}]