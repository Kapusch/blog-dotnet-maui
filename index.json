[{"categories":null,"content":"Pour valider les nouvelles fonctionnalités d’une application, il vaut mieux les tester dans un environnement isolé. En effet, tu ne voudrais pas risquer les données de tes utilisateurs ! Découvre alors comment configurer différents environnements pour ton application mobile.","date":"08/06/2023","objectID":"/posts/tips/multi-environments-project-configuration/","tags":["Visual Studio","Setup"],"title":"Cibler différents environnements avec .NET MAUI","uri":"/posts/tips/multi-environments-project-configuration/"},{"categories":null,"content":"Que ce soit pour le développement d’applications mobiles, de logiciels ou de sites Web, il est courant de mettre en place plusieurs environnements pour son projet. En effet, cela facilite le test de nouvelles fonctionnalités sans risquer d’impacter les données de nos utilisateurs. Dans le cadre de cet article, nous verrons comment une application .NET MAUI peut cibler différents environnements, grâce à plusieurs configurations de projet. ‎ Pour simplifier la lecture de cet article, nous nous concentrerons uniquement sur les plateformes iOS \u0026 Android. Cependant, le procédé est similaire pour les autres plateformes. Identifier toutes les configurations nécessaires au projet Dans un premier temps, tu dois déterminer combien de configurations différentes tu as besoin selon le nombre d’environnements créés pour ton projet. Cependant, si tu n’es qu’au début de ton projet, tu ne disposes peut-être que d’un environnement de développement. Voici donc quelques pistes de réflexion pour t’aider : Es-tu seul·e à développer cette application ? Y-a-t’il des testeurs dans ton équipe ? Ton projet est-il soumis à des critères de sécurité ou de performance ? Est-ce que tu dois l’exposer au client avant sa publication ? ‎ Par défaut, il est important d’isoler l’environnement de production de ton environnement de développement. Pour notre démonstration, nous nous référerons aux 3 environnements suivants : une configuration “DEV” pour travailler de manière totalement isolée sur sa machine (i.e. “en local”) et ne pas impacter l’activité des autres développeurs de son équipe, une configuration “TEST” pour faire valider tous les développements avant leur publication, et une configuration “PROD” qui représente l’état final de l’application, une fois disponible sur les stores. Allez, il est temps de passer à la pratique ! Dans la prochaine section, nous allons créer ces 3 configurations pour exécuter notre application mobile dans 3 environnements distincts. ‎ Je t’invite à sauter la partie suivante dans le cas où tu aurais déjà défini toutes les configurations nécessaires à ton projet dans Visual Studio. Créer les différentes configurations du projet dans Visual Studio Maintenant que nous avons identifié tous les environnements ciblés, voyons comment créer les différentes configurations pour notre application. Commence par ouvrir le fichier de configuration du projet dans Visual Studio. Comment accéder au fichier de configuration du projet ? Il est possible d’accéder au fichier de configuration à l’aide d’un clic droit sur le projet dans Visual Studio. Le fichier de configuration d’un projet se termine par l’extension .csproj et peut être édité par n’importe quel éditeur de texte (e.g. Visual Studio Code). On le retrouve généralement via l’explorateur de fichiers à la racine du projet. Une fois le fichier .csproj ouvert, ajoute à la fin du fichier le code suivant : Nom du fichier :MultiEnvMauiApp.csproj \u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e ... \u003cPropertyGroup\u003e \u003cConfigurations\u003eDEV;TEST;PROD\u003c/Configurations\u003e \u003c/PropertyGroup\u003e \u003c/Project\u003e Nous venons d’ajouter un paramètre qui, comme son nom l’indique, définit les 3 nouvelles configurations possibles du projet : “DEV”, “TEST” et “PROD”. Nous pouvons alors personnaliser la configuration du projet pour chacun des environnements ciblés. Pour cela, rajoute le code suivant à la fin du fichier .csproj : Nom du fichier :MultiEnvMauiApp.csproj \u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e ... \u003cPropertyGroup Condition=\" '$(Configuration)' == 'DEV' \"\u003e \u003c/PropertyGroup\u003e \u003cPropertyGroup Condition=\" '$(Configuration)' == 'TEST' \"\u003e \u003c/PropertyGroup\u003e \u003cPropertyGroup Condition=\" '$(Configuration)' == 'PROD' \"\u003e \u003c/PropertyGroup\u003e \u003c/Project\u003e Comme tu l’auras remarqué, nous avons ajouté une condition d’exécution à chacun de ces nouveaux groupes de propriétés. De cette façon, Visual Studio pourra appliquer la bonne configuration selon l’environnement ciblé. Voyons maintenant pour ce qui est du contenu en lui-même (à adapter selon tes besoins) : Nom ","date":"08/06/2023","objectID":"/posts/tips/multi-environments-project-configuration/:0:0","tags":["Visual Studio","Setup"],"title":"Cibler différents environnements avec .NET MAUI","uri":"/posts/tips/multi-environments-project-configuration/"},{"categories":null,"content":"Depuis la sortie officielle de .NET MAUI, il n’est pas possible de créer de nouveau projet sans que Visual Studio n’y ajoute un Shell par défaut. Heureusement, il existe une façon très simple de s’en débarrasser !","date":"10/04/2023","objectID":"/posts/tips/maui-app-with-no-shell/","tags":["New Project","Visual Studio","Shell"],"title":"Créer une app .NET MAUI sans Shell","uri":"/posts/tips/maui-app-with-no-shell/"},{"categories":null,"content":"Depuis la sortie officielle de .NET MAUI, il n’est pas possible de créer de nouveau projet sans que Visual Studio n’y ajoute un Shell par défaut. Heureusement, il existe une façon très simple de s’en débarrasser ! ","date":"10/04/2023","objectID":"/posts/tips/maui-app-with-no-shell/:0:0","tags":["New Project","Visual Studio","Shell"],"title":"Créer une app .NET MAUI sans Shell","uri":"/posts/tips/maui-app-with-no-shell/"},{"categories":null,"content":"Avec ou sans Shell ? À toi de voir ! Quand il s’agit de créer une nouvelle application en .NET MAUI, Visual Studio ne propose pas beaucoup d’options de configuration : Il y a bien sûr le choix de .NET MAUI Blazor, mais c’est un tout autre framework. Seulement, chaque nouvelle application .NET MAUI créée avec Visual Studio embarque un Shell par défaut. Et bien que le Shell peut aider à réduire la complexité du développement d’une application, c’est également un outil que tout débutant doit apprendre à maîtriser en plus du reste. Voici d’ailleurs un petit tableau comparatif des avantages et inconvénients du Shell : Les avantages Les inconvénients Apporte une certaine structure standard à l’application avec un menu latéral ou des onglets, ainsi qu’un système de navigation avec des URLs. Un peu complexe au premier abord pour un débutant, peut ralentir l’ouverture de l’app, et n’est pas nécessaire dans les cas les plus simples. Finalement, recourir au Shell dans un projet .NET MAUI reste un choix personnel et ne devrait donc pas être imposé par Visual Studio. Mais alors, comment obtenir une application sans Shell, comme dans le cours Ma Première App ? Tu vas voir, c’est très simple. ","date":"10/04/2023","objectID":"/posts/tips/maui-app-with-no-shell/:0:1","tags":["New Project","Visual Studio","Shell"],"title":"Créer une app .NET MAUI sans Shell","uri":"/posts/tips/maui-app-with-no-shell/"},{"categories":null,"content":"Se passer du Shell Dans un premier temps, il te faut un projet .NET MAUI. Tu peux en créer un nouveau avec Visual Studio, ou bien réutiliser un projet existant. Une fois ton projet ouvert dans Visual Studio, supprime la classe AppShell en effaçant les deux fichiers AppShell.xaml et AppShell.xaml.cs. Sélectionne les deux fichiers à la fois, puis fais un clic droit et supprime-les. Visual Studio te demandera probablement une confirmation. Vérifie que les fichiers sélectionnés sont les bons et confirme la suppression : On n’est jamais à l’abri d’une fausse manip ! Voilà, c’est fait ! Il ne reste alors plus qu’à reconfigurer la page de démarrage de l’application. Pour cela, ouvre le fichier App.xaml.cs et repère la ligne de code suivante dans le constructeur de la classe : Nom du fichier :App.xaml.cs MainPage = new AppShell(); Maintenant que la classe AppShell ne fait plus référence à rien, elle doit donc être remplacée. Il te suffit de la remplacer par la classe associée à la page qui apparaît en premier lors de l’ouverture de l’app ! Par exemple, pour tous les nouveaux projets, cela donnera : Nom du fichier :App.xaml.cs MainPage = new MainPage(); Et maintenant, à l’ouverture de l’application, c’est la page MainPage qui sera chargée en premier. Voilà, tu n’es plus obligé·e de développer ton application autour d’un Shell ! Et maintenant, que dirais-tu d’apprendre à naviguer de pages en pages sans le Shell ? ","date":"10/04/2023","objectID":"/posts/tips/maui-app-with-no-shell/:0:2","tags":["New Project","Visual Studio","Shell"],"title":"Créer une app .NET MAUI sans Shell","uri":"/posts/tips/maui-app-with-no-shell/"},{"categories":null,"content":"Allez c’est bientôt la fin du premier gros morceau de notre page principale. On passe désormais au contrôle du volume !","date":"20/03/2023","objectID":"/posts/tutos/my-first-app/9-volume-tracker/","tags":["Image","ImageButton","DataTrigger","Slider","MultiTrigger",".NET Community Toolkit","C# markup"],"title":"Le niveau sonore","uri":"/posts/tutos/my-first-app/9-volume-tracker/"},{"categories":null,"content":" ‎ Afin d’assurer le bon déroulement de cet article, je t’invite à repartir depuis ce chapitre où l’on a démarré la mise en place des contrôles du lecteur musical. Lors du dernier chapitre, on s’était attelés à la mise en place des contrôles de lecture du média. On y avait notamment découvert un nouveau type de bouton: le composant ImageButton. Aujourd’hui, on va encore développer notre interface utilisateur avec l’intégration des contrôles du volume. C’est la dernière ligne droite avant de commencer à implémenter le cœur de notre lecteur musical, alors accroche-toi ! Tout l’art de reproduire Allez, reprenons donc la maquette, voici ce que l’on devra reproduire dans l’app : Cette fois-ci, il n’y a que deux contrôles, ça devrait être rapide ! Comme tu peux le constater, ce n’est rien d’autre qu’un bouton pour couper le son et une barre de contrôle du volume sonore. Ça ne devrait pas être très long, commence par télécharger les différentes images utilisées pour afficher l’état du volume. Volume_Tracker_-_Images.zip ./files/Volume_Tracker_-_Images.zip En décompressant ce fichier, tu verras 4 nouvelles images: Ici, on a donc une image pour chaque niveau de volume : quand il est très fort, moyen ou très bas. D’ailleurs, il y en a même une pour quand le son sera coupé. Maintenant que tu as les images, il ne te reste alors plus qu’à les inclure dans le dossier Resources/Images, exactement comme la dernière fois ! ‎ Si tu as des doutes, tu peux te référer au chapitre précédent . À vos marques, prêt ? Codez ! C’est bon, tout est prêt ? Allez on passe au code ! Pour cela, on aura besoin d’un ImageButton pour couper le son et d’un Slider pour contrôler le volume sonore de manière précise. ‎ 🐒‎ ‎ Ah ! Mais je les connais ceux-là ! Eh oui ! Techniquement, c’est du déjà-vu, alors essaye de reproduire ces contrôles par toi-même avant de regarder le code qui suit : Nom du fichier :MusicPlayerView.cs ImageButton MuteButton = new ImageButton { HeightRequest = 25, WidthRequest = 25, Source = \"volume_medium.png\" }; Slider VolumeTracker = new Slider { Minimum = 0, MinimumTrackColor = Colors.Black, Maximum = 100, MaximumTrackColor = Colors.Gray, Value = 60 }; Voilà, on a donc défini un ImageButton avec une image par défaut, et un Slider pour contrôler le volume sonore de 0% à 100%. Et tu l’auras sûrement noté, le Slider est composé d’une barre noire qui représente le volume actuel, et d’une barre grise pour le volume supérieur disponible. Il ne te reste alors plus qu’à rajouter les contrôles dans le BottomLayout : Nom du fichier :MusicPlayerView.cs MuteButton.Row(2).Column(1), VolumeTracker.Row(2).Column(2).ColumnSpan(3), Alors, tu avais bien pensé à appliquer un ColumnSpan ? 😛 On en a en effet besoin pour afficher la barre de son à cheval sur trois colonnes de notre Grid. Allez, il est temps de relancer l’appli ! Voyons ce que ça donne : Vu comme ça, on dirait presque que l’application est terminée… # Changer d’image quand le son est coupé Ça devient plus facile avec tout cet entraînement, tu commences à prendre le coup de main ? 🙂 Bon, cette fois-ci, il n’y avait que deux composants à définir, alors on va aller un petit plus loin. Tu te rappelles des différentes images pour notre volume ? Il est temps de leur trouver une utilité ! L’idée, c’est que notre MuteButton change d’apparence en fonction du niveau de volume demandé. On aura donc une référence directe au VolumeTracker pour trouver la bonne image à associer au MuteButton. Pour cela, on utilisera un DataTrigger qui permet de modifier la propriété d’un objet lorsqu’une certaine valeur est détectée. Prenons le cas le plus simple, celui où le volume sonore détecté est de 0 : Nom du fichier :MusicPlayerView.cs DataTrigger VolumeOffTrigger =\u003e new DataTrigger(typeof(ImageButton)) { Binding = new Binding(nameof(Slider.Value), source: VolumeTracker), Value = 0d, Setters = { new Setter { Property = ImageButton.SourceProperty, Value = \"volume_off.png\" } } }; Dans un premier temps, on précise sur quel ","date":"20/03/2023","objectID":"/posts/tutos/my-first-app/9-volume-tracker/:0:0","tags":["Image","ImageButton","DataTrigger","Slider","MultiTrigger",".NET Community Toolkit","C# markup"],"title":"Le niveau sonore","uri":"/posts/tutos/my-first-app/9-volume-tracker/"},{"categories":null,"content":"Des boutons, toujours plus de boutons ! Dans ce chapitre, on va intégrer les contrôles pour manipuler le média.","date":"27/02/2023","objectID":"/posts/tutos/my-first-app/8-media-control/","tags":["Image","ImageButton","Visual Studio","Round Button","ColumnSpan"],"title":"Les contrôles de lecture du média","uri":"/posts/tutos/my-first-app/8-media-control/"},{"categories":null,"content":" ‎ Afin d’assurer le bon déroulement de cet article, je t’invite à repartir depuis ce chapitre où l’on a démarré la mise en place des contrôles du lecteur musical. Lors du dernier chapitre, on s’était attelés à la mise en place des premiers éléments visuels du lecteur musical. On y avait notamment découvert deux composants: le Label et le Slider. Aujourd’hui, on va continuer sur notre belle lancée et reproduire toute une série de boutons pour contrôler le média. La guerre des boutons Pour écouter de la musique, notre utilisateur a besoin de fonctions clés comme : jouer un morceau, passer à la piste suivante, etc. Si tu te souviens de la maquette, on avait une rangée principale de 5 boutons : 5 boutons bien alignés sur la même rangée, mais ils n’ont pas tous la même taille. La différence avec le bouton “ENTER” de la page d’accueil, c’est qu’ici, nos 5 boutons représentent une image cliquable. Pour les reproduire dans l’app, on fera donc appel au composant ImageButton. Mais tout d’abord, il faudra ajouter ces fameuses images au projet. Commence donc par les télécharger sur ton ordinateur : Media_Control_-_Images.zip ./files/Media_Control_-_Images.zip Puis décompresse le fichier obtenu. Tu devrais avoir les 6 images suivantes : ‎ 🐒‎ ‎ 6 images… mais on n’avait pas dit 5 boutons ? En effet, il y aura bien 5 boutons sur cette rangée. Mais rien ne nous empêche de remplacer l’image du bouton par une autre ! Si tu reprends la maquette, il y aura de gauche à droite : un bouton pour rejouer la piste musicale (une seule fois) ⇒ c’est l’image repeat_once.png un autre pour revenir à la chanson précédente ⇒ skip_previous.png on aura aussi un gros bouton central pour jouer ou mettre en pause la musique. C’est l’image de ce bouton qui changera automatiquement selon les cas suivants : soit la piste n’est pas en cours de lecture ⇒ ce sera l’image play.png ou bien elle est déjà en train d’être jouée ⇒ on affichera alors pause.png puis on aura un bouton pour passer à la chanson suivante ⇒ skip_next.png et un dernier pour télécharger le morceau ⇒ download.png Oui je sais, cette dernière fonction “télécharger” n’était pas prévue au programme ! Çà devait initialement être pour lire les titres en mode aléatoire, mais j’ai changé d’avis. 😄 Comme quoi, c’est important de concevoir une maquette aussi fiable que possible ! Ajouter les images au projet Maintenant que tu as téléchargé toutes les images, tu dois les importer dans le projet pour qu’elles deviennent utilisables par l’application. Pour cela, ouvre le projet dans Visual Studio et fais un clic droit sur le dossier Images : Rappelle-toi, c’est dans le dossier Resources qu’on stocke tous les médias (icônes, images, pistes audio et vidéo, …) Dans le menu contextuel qui s’affiche, dans la section Ajouter, clique sur l’option pour ajouter des fichiers depuis un dossier : Puis, sélectionne le dossier où tu as décompressé les 6 images et valide ton choix. Une fenêtre apparaît alors pour choisir les fichiers à inclure dans le projet. Dans notre cas, on veut importer toutes les images du dossier. Sélectionne donc tous les fichiers disponibles et clique sur OK : ‎ Il y a de grandes chances pour que Visual Studio te demande quelle stratégie appliquer pour importer les fichiers dans le dossier Resources/Images. Je te conseille de choisir de les copier, ou de les déplacer. Voilà c’est terminé, vérifie que tu as bien les 6 nouvelles images importées dans le dossier ! Découverte des ImageButton Maintenant que les images sont prêtes à l’emploi, on passe au code ! Définissons d’abord les deux boutons les plus petits (ceux aux extrémités) : Nom du fichier :MusicPlayerView.cs ImageButton RepeatOnceButton =\u003e new ImageButton { CornerRadius = 5, HeightRequest = 25, WidthRequest = 25, Source = \"repeat_once.png\", BackgroundColor = Colors.Black }; ImageButton DownloadButton =\u003e new ImageButton { CornerRadius = 5, HeightRequest = 25, WidthRequest = 25, Source = \"download.png\", BackgroundColor = Colors.Black }; Comme tu pe","date":"27/02/2023","objectID":"/posts/tutos/my-first-app/8-media-control/:0:0","tags":["Image","ImageButton","Visual Studio","Round Button","ColumnSpan"],"title":"Les contrôles de lecture du média","uri":"/posts/tutos/my-first-app/8-media-control/"},{"categories":null,"content":"Maintenant que les fondations de la page principale sont prêtes, on va pouvoir commencer à disposer tous les éléments de contrôle. Commençons avec le minutage !","date":"06/02/2023","objectID":"/posts/tutos/my-first-app/7-time-tracker/","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Le temps d’écoute","uri":"/posts/tutos/my-first-app/7-time-tracker/"},{"categories":null,"content":" ‎ Pour assurer le bon déroulement de cet article, je t’invite à récupérer le projet reprenant toutes les étapes appliquées jusqu’ici dans ce cours. Pour cela, réfère-toi au guide d’installation du projet et repars de l’exemple situé dans le dossier “3 - Page Scaffolding”. Dans l’article précédent, on a mis en place un quadrillage pour y disposer tous les contrôles de notre lecteur musical. On va donc pouvoir ajouter des éléments concrets pour l’utilisateur ! Afficher le minutage Commençons déjà avec la partie dédiée au minutage du titre musical. D’après la maquette, on aura un texte à gauche pour le temps d’écoute en cours, et à droite, pour la durée totale de la piste : L’application indique que le morceau est joué depuis 36 secondes et qu’il dure 2 minutes et 57 secondes. Pour reproduire cela dans l’application, on utilisera le composant Label qui permet d’afficher du texte à l’écran : Nom du fichier :MusicPlayerView.cs Label ElapsedTime =\u003e new Label { FontSize = 14, Text = \"0:36\", TextColor = Colors.White }.TextCenter(); Label TotalTime =\u003e new Label { FontSize = 14, Text = \"2:57\", TextColor = Colors.White }.TextCenter(); Ces deux nouveaux éléments sont définis pour afficher un texte statique écrit en blanc et avec une taille relativement petite. Cependant, la taille des caractères s’adaptera automatiquement au niveau d’agrandissement du texte défini par l’utilisateur dans les réglages d’accessibilité de son téléphone. ‎ Aller plus loin avec l’accessibilité pour les applications mobiles. Ajuster la tête de lecture Quant à l’élément du milieu, il remplit deux fonctions à la fois : afficher et contrôler la position de lecture dans le morceau. En effet, l’utilisateur s’en sert pour avancer ou reculer dans le morceau en faisant glisser son doigt horizontalement. De plus, ce composant possède une partie en rose qui représente le temps écoulé, et une autre en noir pour le temps restant. Pour reproduire cette barre de navigation, on utilisera le composant Slider : Nom du fichier :MusicPlayerView.cs Slider TimeTracker =\u003e new Slider { Minimum = 0, MinimumTrackColor = Colors.LightSalmon, Maximum = 100, MaximumTrackColor = Colors.Black, Value = 20 }; Un Slider est un contrôle doté d’un curseur permettant à l’utilisateur de sélectionner une valeur précise parmi toute une plage de valeurs possibles. Dans notre cas, c’est comme si l’on avait une règle graduée de 0 à 100 avec un curseur positionné sur le 20. ‎ 🐒‎ ‎ Ah oui je vois, on se situe en fait à 20% du morceau ! On aura donc une barre rose de 0 jusqu’à 20, et une barre noire de 20 jusqu’à 100. Oui, c’est ça ! Bon évidemment ici, toutes les valeurs de configuration sont statiques, mais l’idée finale est de permettre à l’utilisateur d’avancer ou de reculer l’écoute de la piste à la seconde près. Voilà, on en a terminé avec la première rangée d’éléments du lecteur musical. Pour vérifier que l’affichage est correct, j’aimerais que tu effaces tous les éléments enfants du BottomLayout pour lui assigner tous les composants définis dans ce chapitre. Pour cela, tu seras sûrement tenté d’écrire quelque chose comme : Nom du fichier :MusicPlayerView.cs Grid BottomLayout =\u003e new Grid { ... Children = { ElapsedTime.Row(0).Column(1), TimeTracker.Row(0).Column(2), TotalTime.Row(0).Column(5) } }; À première vue, ça semble pas mal ! Cependant, si tu démarres l’application, tu constateras qu’il y a un léger problème d’affichage : Disposé comme ça, le Slider n’a pas bonne mine. Pas de panique ! On va voir tout de suite comment réajuster cela. Bien utiliser les Grid Si tu te rappelles, on a initialement divisé le BottomLayout en 7 colonnes. Or, si notre code positionne bien notre Slider à partir de la case n°3 de la première ligne, il ne lui dit pas clairement où s’arrêter ! On pourrait alors simplement dire au Slider de s’étaler sur les colonnes suivantes, comme ceci : Le Slider est à cheval sur les cases n°3, n°4 et n°5. Pour cela, on utilise la méthode ColumnSpan() pour demander au Slider de s’étendr","date":"06/02/2023","objectID":"/posts/tutos/my-first-app/7-time-tracker/:0:0","tags":["Accessibility","Slider","Label","ColumnSpan"],"title":"Le temps d’écoute","uri":"/posts/tutos/my-first-app/7-time-tracker/"},{"categories":null,"content":"Avant de développer une nouvelle page, il vaut mieux réfléchir à la disposition des différents éléments. Et tu vas voir, c’est un vrai travail d’architecte !","date":"30/01/2023","objectID":"/posts/tutos/my-first-app/6-scaffolding/","tags":["C# markup","Grid"],"title":"Les fondations","uri":"/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":" ‎ Pour assurer le bon déroulement de cet article, je t’invite à récupérer le projet reprenant toutes les étapes appliquées jusqu’ici dans ce cours. Pour cela, réfère-toi au guide d’installation du projet et repars de l’exemple situé dans le dossier “2 - Navigation”. Avec ce nouveau chapitre, on entame une série d’articles axés autour du visuel de l’app, et il y a de bonnes chances que cela te plaise ! En effet, développer une interface visuelle nécessite de nombreux tests du rendu à l’écran, et il n’y a rien de mieux pour apprendre. Et c’est par la pratique régulière que tu vas naturellement comprendre et retenir tout un tas de choses 🙂 Allez, on est partis pour mettre en place les fondations de la page principale ! Le design Mais avant tout développement graphique, il vaut mieux réfléchir à la disposition des différents éléments que l’on souhaite afficher. Justement, .NET MAUI fournit pour cela plusieurs solutions simples pour structurer nos pages. Et tu vas voir, c’est un vrai travail d’architecte ! ‎ 🐒‎ ‎ Mais au fait, à quoi doit ressembler notre page ? C’est une très bonne question ! En général, quand imagine une nouvelle page pour notre application, il est conseillé d’en élaborer le design au crayon sur une feuille. En effet, comme les écrans de téléphone sont assez petits, il n’est pas facile de disposer tous les éléments souhaités. Puis, quand on est satisfait du rendu sur papier, on prépare alors une maquette sur ordinateur pour un rendu plus réaliste : ça facilite grandement l’intégration de la page dans l’application. Dans le cadre de notre cours, la page principale devra ressembler à la maquette suivante : Structuration de la page Sur cette maquette, on remarque que les éléments sont disposés de façon assez régulière. On pourrait même imaginer des lignes pour aligner les éléments les uns par rapport aux autres : Disposer les éléments suivant des lignes imaginaires est un exercice un peu spécial au début, mais cela devient une habitude avec le temps. Ces lignes te feront peut-être penser à une grille… et si c’est le cas, bien vu ! C’est tout le principe du composant Grid, qui comme son nom l’indique, permet de disposer des éléments sur une grille. On va l’utiliser plusieurs fois pour cette page. Initiation au Grid Pour respecter la maquette, la première chose à faire est de diviser la page en deux : La partie du haut qui n’affiche rien d’autre qu’un fond noir, Et celle du bas pour contrôler notre lecteur de musique. Tu remarqueras que la partie supérieure est légèrement plus grande que la partie inférieure. On pourrait même dire que la partie noire s’étale verticalement sur 60% de la page, ce qui laisse 40% d’espace pour le reste. Ce sont des données très utiles ! Mettons-les en application pour définir le contenu de notre page MusicPlayerView avec un Grid : Nom du fichier :MusicPlayerView.cs using CommunityToolkit.Maui.Markup; using static CommunityToolkit.Maui.Markup.GridRowsColumns; ... public MusicPlayerView() { ... Content = new Grid { RowDefinitions = Rows.Define( Stars(60), Stars(40)), RowSpacing = 0, Children = { TopLayout.Row(0), BottomLayout.Row(1), } }; } Avec le paramètre RowDefinitions, on configure une grille de 2 lignes : la première pourra s’étendre jusqu’à 60% de la page verticalement contre 40% pour la deuxième, comme sur notre design ! A l’initialisation du Grid, on définit également deux autres paramètres : le RowSpacing défini à 0 pour ne laisser aucun espace entre les lignes de notre grille, et Children qui contiendra tous les éléments de notre grille, à répartir sur deux lignes. Et si tu te demandes d’où sortent ces fameux TopLayout et BottomLayout, il s’agit de deux conteneurs d’éléments à définir en dehors du constructeur de la page. En effet, on utilise à nouveau un Grid pour chacun de ces deux contrôles pour nous aider dans le placement des éléments restants. Le premier Grid (le TopLayout) correspond à la partie supérieure de notre page et a donc un fond noir. Quant à l’autre Grid (le Bot","date":"30/01/2023","objectID":"/posts/tutos/my-first-app/6-scaffolding/:0:0","tags":["C# markup","Grid"],"title":"Les fondations","uri":"/posts/tutos/my-first-app/6-scaffolding/"},{"categories":null,"content":"On attaque désormais la création de la page principale de l’application. Mais qui dit nouvelle page dit aussi: permettre à l’utilisateur de se rendre sur cette page ! Voyons donc comment implémenter la navigation d’une page à une autre.","date":"23/01/2023","objectID":"/posts/tutos/my-first-app/5-how-to-navigate/","tags":["Navigation"],"title":"D’une page à l’autre","uri":"/posts/tutos/my-first-app/5-how-to-navigate/"},{"categories":null,"content":" ‎ Pour assurer le bon déroulement de cet article, je t’invite à récupérer le projet reprenant toutes les étapes appliquées jusqu’ici dans ce cours. Pour cela, réfère-toi au guide d’installation du projet et repars de l’exemple situé dans le dossier “1 - MVVM”. Hé, mais te revoilà ! On en a maintenant fini avec le MVVM et crois-moi, tu viens de faire un grand pas en avant ! Aujourd’hui ce sera bien plus simple, on attaque la création de la page principale de l’application. Mais qui dit nouvelle page dit aussi: permettre à l’utilisateur de s’y rendre ! Voyons donc comment implémenter la navigation d’une page à une autre. Naviguer vers une nouvelle page Commençons déjà par ajouter notre nouvelle page. Pour cela, fais un clic droit sur le dossier Views pour ajouter un nouveau fichier, puis choisis le template “.NET MAUI ContentPage (C#)” comme ci-dessous. On va nommer ce fichier : MusicPlayerView.cs. Comme tu l’auras remarqué, le template utilisé pour créer la page nous fournit un contenu par défaut. Il n’y a donc plus qu’à naviguer vers cette nouvelle page ! Pour cela, rends-toi dans le fichier HomeViewModel.cs et modifie la méthode Enter() de la façon suivante : Nom du fichier :HomeViewModel.cs using NightClub.Views; // Rappel: sans cette ligne, ça ne compilerait pas ! ... [RelayCommand] async Task Enter() { await Application.Current.MainPage.Navigation.PushAsync( new MusicPlayerView()); } Tout ce qu’on fait ici, c’est accéder au service de navigation fourni par l’application pour afficher une nouvelle page de type MusicPlayerView. En fait, lorsqu’on fait appel à la méthode PushAsync(), on ajoute la page MusicPlayerView tout en haut de la pile de pages déjà existantes, exactement comme sur le schéma ci-dessous: Comme avec un paquet de cartes à jouer, il n’y a que celle du dessus qui est visible. ‎ 🐒‎ ‎ Ah! Et c’est tout, je peux tester alors ? On y est presque ! En effet pour que la navigation fonctionne, on a besoin que la première page affichée au démarrage soit englobée dans une NavigationPage. Si tu retournes dans le fichier App.cs, il y a justement une méthode OnStart() qui est automatiquement exécutée à chaque fois que l’app est initialisée. Modifie donc cette méthode de sorte à définir HomeView comme la page racine de l’application, dans une NavigationPage: Nom du fichier :App.cs protected override void OnStart() { base.OnStart(); Console.WriteLine(\"[NightClub] App - OnStart\"); MainPage = new NavigationPage(new HomeView()); } Voilà c’est bon, relance l’application et clique sur le bouton Enter ! Supprimer l’en-tête de navigation Comme tu l’auras sûrement compris, notre page d’accueil est désormais contenue dans une page spécialement configurée pour la navigation. Elle contient donc par défaut une en-tête de navigation : D’un point de vue design, ce n’est pas nécessairement ce que l’on souhaite. Voyons donc rapidement comment supprimer cette en-tête pour la page d’accueil. Rends-toi dans le fichier HomeView.cs et invoque la méthode SetHasNavigationBar() dans le constructeur de la page, comme ceci: Nom du fichier :HomeView.cs public HomeView() { ... BindingContext = new HomeViewModel(); NavigationPage.SetHasNavigationBar(this, false); BackgroundColor = Colors.Black; ... } Et maintenant, si tu relances l’app, c’est quand même plus joli ! L’application commence à prendre forme tout doucement, et d’autant plus avec le prochain chapitre ! On se revoit très bientôt pour l’élaboration de notre page principale. Plus d’articles dans la même série: Introduction Installer le projet Première exécution du projet MVVM, la clé de la réussite D’une page à l’autre Les fondations Le temps d’écoute Les contrôles de lecture du média Le niveau sonore ","date":"23/01/2023","objectID":"/posts/tutos/my-first-app/5-how-to-navigate/:0:0","tags":["Navigation"],"title":"D’une page à l’autre","uri":"/posts/tutos/my-first-app/5-how-to-navigate/"},{"categories":null,"content":"Dans ce chapitre, nous découvrirons un patron de conception majeur pour le développement d’application mobile, le Model-View-ViewModel (MVVM) !","date":"12/01/2023","objectID":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM, la clé de la réussite","uri":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":" ‎ Pour assurer le bon déroulement de cet article, je t’invite à récupérer le projet reprenant toutes les étapes appliquées jusqu’ici dans ce cours. Pour cela, réfère-toi au guide d’installation du projet et repars de l’exemple situé dans le dossier “0 - Get Started”. Dans ce chapitre, nous découvrirons un patron de conception majeur pour le développement d’application mobile, le Model-View-ViewModel ! (plus couramment appelé “le MVVM”) Le Model-View-ViewModel Le MVVM est un patron de conception qui propose au développeur une séparation logique de son code en 3 couches : La View, qui correspond à l’interface utilisateur, c’est-à-dire tout ce que l’on va afficher à l’écran (e.g. la page HomeView), Le Model, qui fait référence au type de données affichées dans cette View, Et enfin le ViewModel, qui fait le lien entre la View et le Model. Par exemple, pour récupérer des données depuis le Cloud ou répondre aux interactions de l’utilisateur. ‎ 🐒‎ ‎ Je vois bien la séparation en effet, mais pourquoi est-ce recommandé ? L’un des principaux avantages du MVVM est de pouvoir isoler la vue (i.e. l’interface utilisateur) de la logique “métier”. Dans le cadre de notre première page, on obtient finalement deux fichiers : HomeView.cs qui définit précisément comment notre page s’affichera (i.e. une couleur de fond, une image en haut, un bouton en bas), Et HomeViewModel.cs qui regroupe toute la logique pour faire fonctionner notre page (ici, le comportement du bouton quand l’utilisateur appuie dessus). En suivant ce principe, le découpage de ton code est clair et tu limites le nombre de lignes de code par fichier. Tu ne voudrais pas d’un fichier de plus de 10 000 lignes ! 😄 En plus, il n’y a aucun risque d’affecter la logique de ton app en changeant seulement la couleur d’un bouton. ‎ 🐒‎ ‎ C’est clair ! Mais il y a un truc que je ne comprends pas, on n’a aucun Model pour la page HomeView ? Bonne remarque ! En effet, certaines pages sont tellement simples qu’elles ne nécessitent pas de Model. Dans ces cas-là, seuls les View et ViewModel seront donc requis. Le Data Binding On sait désormais bien découper notre code en plusieurs couches. Par exemple, définir un bouton dans une View et déclarer son action dans un ViewModel. Mais est-ce que tu saurais dire comment elles vont fonctionner ensemble ? ‎ 🐒‎ ‎ Hmm… peut-être dire au bouton de cette View d’agir selon ce qui a été déclaré dans ce ViewModel ? En effet, c’est quasiment ça ! Cela se déroule en deux temps : On associe d’abord un ViewModel à sa View (généralement via le BindingContext de la View), Puis on définit le comportement de chaque élément de la View dans le ViewModel, en recourant au principe du Data Binding. Le Data Binding est une technique permettant de lier deux objets de sorte que, lorsque l’un des deux est modifié, l’autre le sera également. Ça peut paraître un peu flou comme ça, mais tu comprendras mieux son rôle dans la section d’après. Pour le moment, on continue ! Appliquer le MVVM Maintenant que tu connais les bases du MVVM, je vais pouvoir t’apprendre à l’appliquer concrètement dans l’application. Commençons par créer un fichier qui servira de ViewModel pour notre HomeView. Pour cela, crée d’abord un nouveau dossier ViewModels dans le projet, puis ajoutes-y un nouveau fichier. Ce sera une nouvelle classe vide appelée HomeViewModel.cs : Ensuite, remplace son contenu par le suivant: Nom du fichier :HomeViewModel.cs using System; namespace NightClub.ViewModels; public class HomeViewModel { public HomeViewModel() { } async Task Enter() { await Application.Current.MainPage.DisplayAlert( \"Well Done !\", \"You have successfully reached the end of this chapter.\", \"Next !\"); } } Bon, il n’y a vraiment rien de spécial ici. C’est juste une classe d’objet C# avec une méthode Enter() qui affiche du texte à l’écran après un clic de l’utilisateur sur le bouton “ENTER”. ‎ 🐒‎ ‎ Ah ben quand même, on vient de définir l’action du bouton de la page d’accueil ! Eh oui tu as raison, mais en l’état,","date":"12/01/2023","objectID":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/:0:0","tags":["MVVM","Data Binding",".NET Community Toolkit"],"title":"MVVM, la clé de la réussite","uri":"/posts/tutos/my-first-app/4-mvvm-is-the-key-to-succeed/"},{"categories":null,"content":"Allez, il est temps de faire tourner l’application. On en profitera aussi pour jeter un œil au code source ! 🙂","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/3-first-run-of-the-project/","tags":["Visual Studio","C# markup"],"title":"Première exécution du projet","uri":"/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":" ‎ Pour assurer le bon déroulement de cet article, je t’invite à récupérer le projet reprenant toutes les étapes appliquées jusqu’ici dans ce cours. Pour cela, réfère-toi au guide d’installation du projet et repars de l’exemple situé dans le dossier “0 - Get Started”. Allez, il est temps de faire tourner l’application. On en profitera aussi pour jeter un œil au code source ! 🙂 Mais pour que notre application puisse fonctionner, il nous reste deux points à aborder : l’initialisation de l’app et surtout, gérer son état d’exécution. Initialisation de l’app Pour chaque plateforme ciblée (iOS, Android, …), chaque application .NET MAUI sera initialisée depuis un seul point d’entrée via la méthode CreateMauiApp() située dans le fichier MauiProgram.cs. C’est ici que l’on configurera tout ce dont a besoin l’app pour fonctionner comme on le souhaite : les services Web, les dépendances externes, ou bien encore les polices de caractères spécifiques. Gestion de l’état de l’app Mais on aura aussi besoin de quoi définir l’état actuel de notre application (quelle page afficher, que faire si l’application est arrêtée, …). Et pour ça on a justement une classe Application déclarée dans le fichier App.cs. Lancement de l’app Allez, il est temps de faire tourner l’application ! Choisis donc la plateforme que tu souhaites cibler, puis clique sur le bouton encadré en rouge pour démarrer le projet: Dans un premier temps, tu verras ton projet être compilé avec la configuration choisie (c’est l’étape du build): Sous Visual Studio for Mac, le statut actuel du projet peut facilement être consulté en bas à gauche de la fenêtre. Puis tu verras ton application se déployer automatiquement vers la plateforme choisie (ici, une simulation de l’iPhone 13, iOS 15.5). Et voilà le résultat ! ‎ 🐒‎ ‎ Héééé mais il ne se passe rien quand je clique sur le bouton ! Ce n’est évidemment que le début de notre app, le plus gros reste à faire ! La page d’accueil Ce que tu vois pour le moment, c’est la page d’accueil dont le contenu est spécifié dans le fichier HomeView.cs. Il s’agit là d’une ContentPage (littéralement une page avec du contenu) qui est le type de page le plus courant. Et comme tu peux le voir, ce qu’elle définit est très simple: Nom du fichier :HomeView.cs public HomeView() { BackgroundColor = Colors.Black; Content = new VerticalStackLayout { Children = { NightClubImage, EnterButton } }.CenterVertical(); } C’est une page avec un arrière-plan noir et dont le contenu est défini par une image et un bouton qui sont empilés verticalement dans un VerticalStackLayout. Et si tu veux savoir comment sont définis ces deux composants, il te suffit de regarder un peu plus bas dans le code de la page : Nom du fichier :HomeView.cs #region Controls Image NightClubImage =\u003e new Image { // .NET MAUI converts SVG files to PNG files. Source = \"night_club.png\" }; Button EnterButton =\u003e new Button { Text = \"ENTER\", TextColor = Colors.White, BackgroundColor = Colors.Magenta, CornerRadius = 10 } .Bold() .Paddings(50, 2, 50, 2) .CenterHorizontal(); #endregion Rien de très complexe à ce stade: On définit l’image du composant NightClubImage via la propriété “Source”, Et pour le bouton, on définit quelques propriétés de base comme le texte, la couleur, … mais tu aurais peut-être remarqué qu’on applique des fonctions au composant EnterButton : Bold() pour mettre en gras le texte du bouton, Paddings() pour rajouter un peu d’espace autour du texte, notamment à gauche et à droite du texte, Et enfin, CenterHorizontal() pour positionner le texte au centre du bouton. ‎ Ces méthodes sont fournies par un type de programmation particulière appelée “Declarative UI” ou encore “Fluent UI”. Grâce à cela, la page est entièrement codée en C#, comme pour le reste de l’app ! ‎ 🐒‎ ‎ D’accord ! Et il ne faudrait pas lui déclarer une action à ce bouton ? Tout juste ! Et on va voir comment déclencher l’exécution de code en cliquant sur ce bouton, mais pas n’importe comment. En effet, nous allons appliquer ce me","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/3-first-run-of-the-project/:0:0","tags":["Visual Studio","C# markup"],"title":"Première exécution du projet","uri":"/posts/tutos/my-first-app/3-first-run-of-the-project/"},{"categories":null,"content":"Aujourd'hui on attaque la création de notre première application ! Juste le temps d'installer ton environnement de travail et on aura rapidement quelque chose de concret. Allez c'est parti !","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/2-setup-the-project/","tags":["Visual Studio","Setup","New Project"],"title":"Installer le projet","uri":"/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Tu vas bientôt pouvoir créer ta première application mobile ! Juste le temps d’installer ton environnement de travail et on aura rapidement quelque chose de concret. Allez c’est parti ! Quels outils pour développer ? Voyons déjà les outils qui te permettront de développer ton appli. ‎ 🐒‎ ‎ Mais au fait, il faut être sous Windows, MacOS ou Linux ? En fait, il n’y a pas de pré-requis particulier pour développer une app avec .NET MAUI, à moins que tu ne traînes un ordinateur de l’avant-guerre et que tu ne mettes rien à jour… 🤔 Sinon, c’est surtout une question de préférence ! Personnellement, je développe sous MacOS car c’est un système que j’affectionne, et le simulateur d’iPhone qui y est intégré est très performant et me permet d’avoir rapidement un rendu de ce que je programme. Mais tu peux tout aussi bien développer sous Windows ou Linux ! Plus concrètement : sous Windows ou MacOS, c’est facile, Microsoft propose un environnement de développement intégré très performant: Visual Studio pour Windows, et Visual Studio for Mac pour… eh bien pour MacOS 😄 et si tu es sous Linux, il te faudra recourir à un peu plus d’ingéniosité (et c’est bien pour cela que tu es sous Linux, n’est-ce pas ? 😛). Dans ce cas-là, je te conseille d’utiliser l’excellent éditeur de code source Visual Studio Code. ‎ Dans le cadre de ce blog, je me concentrerais uniquement sur le développement d’application mobile à l’aide de Visual Studio. En effet, son utilisation est bien plus intuitive et c’est justement cela qui plaît à tout vrai néophyte. Installation de l’environnement Passons maintenant à l’installation de l’environnement de travail: Dans un premier temps, télécharge Visual Studio depuis le site officiel de Microsoft, en choisissant la version appropriée à ton système (Windows ou MacOS), Puis vient le moment d’installer Visual Studio et son environnement de développement .NET MAUI. Pour améliorer la lecture de ce blog, je te propose de directement suivre les étapes d’installation sur le site officiel: suivre les étapes d’installation sous Windows suivre les étapes d’installation sous MacOS Enfin, télécharge mon cours depuis GitHub. Pour cela, rends-toi sur le dépôt de code du blog, clique sur le bouton “Code” et télécharge le tout au format .ZIP ‎ Avant d’aller plus loin, si tu es sous MacOS, il te faudra t’assurer d’avoir téléchargé la dernière version d’Xcode qui est requise pour le simulateur d’iPhone. Son installation peut être très longue, aussi, je te conseille de le faire en parallèle de ta lecture. Description du projet Une fois le fichier téléchargé décompressé, rends-toi dans le dossier des exemples associés à notre cours (Samples/NightClub). Les dossiers qui y sont entreposés correspondent chacun à une partie différente du cours: Pour le moment, ouvre le premier dossier (0 - Get Started) et double-clique sur NightClub.sln pour ouvrir le projet NightClub dans Visual Studio. La structure du projet NightClub après ouverture dans Visual Studio. ‎ 🐒‎ ‎ Ok ! J’ouvre le projet, ça charge… Mais il y a déjà plein de choses dans ce projet, on ne peut pas partir de zéro ? En fait, c’est déjà le cas ! Le projet que tu as sous les yeux est tout neuf, mais il embarque plusieurs fichiers de base nécessaires au bon fonctionnement d’une application .NET MAUI: Toutes les librairies nécessaires au bon fonctionnement du projet sont regroupées dans le dossier Dependencies, Dans Platforms, tu retrouveras tous les fichiers nécessaires à l’exécution de l’application, et ce pour chaque plateforme cible, Quant au dossier Properties, on y retrouve généralement des fichiers de configuration (il y en a d’ailleurs une créée par défaut pour Windows), Et puis, tu auras la possibilité pour chaque application de lui configurer une icône et un écran de chargement ! Pour cela, on recourt généralement au dossier Resources pour stocker tous nos médias (icônes, images, pistes audio et vidéo, …), Enfin, il faudra bien pouvoir afficher quelque chose à l’ouverture de l’app ! Et p","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/2-setup-the-project/:0:0","tags":["Visual Studio","Setup","New Project"],"title":"Installer le projet","uri":"/posts/tutos/my-first-app/2-setup-the-project/"},{"categories":null,"content":"Salut les Dev·e·s ! 🤓 Moi c'est J-E et mon but avec ce blog est d’aider tout développeur débutant à se lancer dans son projet d’application mobile au travers de cours très simples. Pas de cours théoriques à rallonge, ici tu vas vite t’amuser et produire des apps sympas ! Et je t’accompagnerai du développement jusqu’à la mise en ligne de ton application sur les stores.","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/1-introduction/","tags":["New Project"],"title":"Introduction","uri":"/posts/tutos/my-first-app/1-introduction/"},{"categories":null,"content":"Salut les Dev·e·s ! 🤓 Moi c’est J-E, ou Jean-Emmanuel si tu préfères, et je suis ravi de te savoir en train de me lire ! 😊 En effet, j’avais à cœur de partager ma passion pour le développement d’applications mobiles cross-platforms, et tout particulièrement avec .NET MAUI (à prononcer “dote-net maoui”). Avec ce blog, je veux pouvoir aider tout développeur débutant à se lancer dans son projet d’application mobile au travers de cours très simples. Pas de cours théoriques à rallonge, ici tu vas vite t’amuser et produire des apps sympas ! Et je t’accompagnerai du développement jusqu’à la mise en ligne de ton application sur les stores. ‎ 🐒‎ ‎ Mais au fait, c’est quoi .NET MAUI ? Tu peux m’en dire plus ? Il s’agit du framework maintenu par Microsoft pour développer des applications mobiles, mais pas que ! En fait, MAUI signifie : “Multi-platform App User Interface”, ce qui veut littéralement dire “application dotée d’une interface utilisateur et qui peut s’exécuter sur plusieurs plateformes”. .NET MAUI a été officiellement publié courant 2022 et se base sur l’excellent framework Xamarin.Forms qui couvre iOS et Android uniquement. Et si tu n’en avais jamais entendu parler, pas de panique ! Moi-même j’en ai appris l’existence seulement fin 2019, et c’est grâce à lui que j’ai déployé ma toute première application sur les stores: MyVanity. ‎ 🐒‎ ‎ Et comment as-tu fait pour publier ta première application ? Ça t’a pris longtemps ? Et c’est là toute la magie de .NET MAUI, tu n’as qu’à coder un seul programme pour qu’il fonctionne sur Android, iOS, macOS et Windows ! Et tout ça bien-sûr avec un seul langage de programmation. Et donc non, cela ne m’a pas pris très longtemps, mais cela dépendra surtout: de tes connaissances en développement, de la complexité de ton application, et du temps que tu peux lui accorder. Dans mon cas, cela m’a pris exactement un an entre le moment où j’ai imaginé l’application et le jour où je l’ai publiée sur les stores. ‎ 🐒‎ ‎ D’accord, alors qu’est-ce que je dois savoir avant de débuter mon application ? Tout d’abord bravo, tu as raison de te lancer ! Alors pour démarrer ton application, il te faudra : Trouver une idée, Concevoir la maquette, Comprendre le langage C#. Pour le premier point, c’est facile, tu l’as normalement déjà fait pour arriver jusqu’ici. 😛 Le deuxième, c’est simplement pour avoir une idée précise de ce à quoi ton application ressemblera, et pour ça, tu peux utiliser le très bon Adobe XD qui est gratuit ! Enfin pour finir, il te faudra connaître le langage C# pour programmer ton application, et pour cela je te propose le parcours d’apprentissage élaboré par Microsoft. Cela dit, si tu as déjà codé dans ta vie, alors tu peux te lancer même sans connaître le C# ! Tu apprendras très vite en voulant développer ton application. Pour ce premier cours, je te propose de développer une application pour lire des titres musicaux dans une ambiance “boîte de nuit”. 💃🏾🕺🏻🪩 Tu feras sûrement quelques erreurs, mais se tromper est justement la meilleure façon d’apprendre, alors surtout: va jusqu’au bout de ton idée ! ‎ 🐒‎ ‎ J’ai l’idée en tête, mon design est prêt, et coder en C# ne me fait pas peur, on attaque ? Allez c’est parti, rendez-vous au prochain article ! Plus d’articles dans la même série: Introduction Installer le projet Première exécution du projet MVVM, la clé de la réussite D’une page à l’autre Les fondations Le temps d’écoute Les contrôles de lecture du média Le niveau sonore ","date":"02/01/2023","objectID":"/posts/tutos/my-first-app/1-introduction/:0:0","tags":["New Project"],"title":"Introduction","uri":"/posts/tutos/my-first-app/1-introduction/"}]